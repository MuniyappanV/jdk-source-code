/*
 * @(#)Resources_zh_CN.java	1.9 04/03/02
 *
 * Copyright 2004 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package sun.security.util;

/**
 * <p> This class represents the <code>ResourceBundle</code>
 * for javax.security.auth and sun.security.
 *
 * @version 1.9, 03/02/04
 */
public class Resources_zh_CN extends java.util.ListResourceBundle {

    private static final Object[][] contents = {

	// shared (from jarsigner)
	{" ", " "},
	{"  ", "  "},
	{"      ", "      "},
	{", ", ", "},
	// shared (from keytool)
	{"\n", "\n"},
	{"*******************************************",
		"*******************************************"},
	{"*******************************************\n\n",
		"*******************************************\n\n"},
      
	// keytool
	{"keytool error: ", "keytool\u9519\u8bef\uff1a "},
	{"Illegal option:  ", "\u975e\u6cd5\u9009\u9879\uff1a  "},
        {"-keystore must be NONE if -storetype is PKCS11",
                "\u5982\u679c -storetype \u4e3a PKCS11\uff0c\u5219 -keystore \u5fc5\u987b\u4e3a NONE"},
        {"-storepasswd and -keypasswd commands not supported if -storetype is PKCS11",
                "\u5982\u679c -storetype \u4e3a PKCS11\uff0c\u5219\u4e0d\u652f\u6301 -storepasswd \u548c -keypasswd \u547d\u4ee4"},
        {"-keypass and -new can not be specified if -storetype is PKCS11",
                "\u5982\u679c -storetype \u4e3a PKCS11\uff0c\u5219\u4e0d\u80fd\u6307\u5b9a -keypass \u548c -new"},
        {"if -protected is specified, then -storepass, -keypass, and -new must not be specified",
                "\u5982\u679c\u6307\u5b9a\u4e86 -protected\uff0c\u5219\u4e0d\u8981\u6307\u5b9a -storepass\u3001-keypass \u548c -new"},
	{"Validity must be greater than zero",
		"\u6709\u6548\u6027\u5fc5\u987b\u5927\u4e8e\u96f6"},
	{"provName not a provider", "{0}\u4e0d\u662f\u4e00\u4e2a\u63d0\u4f9b\u8005"},
	{"Must not specify both -v and -rfc with 'list' command",
		"\u4e0d\u5f97\u4ee5\u300c\u5217\u8868\u300d\u6307\u4ee4\u6765\u6307\u5b9a-v \u53ca-rfc"},
	{"Key password must be at least 6 characters",
		"\u5173\u952e\u5bc6\u7801\u81f3\u5c11\u5fc5\u987b\u4e3a6\u4e2a\u5b57\u7b26"},
	{"New password must be at least 6 characters",
		"\u65b0\u5bc6\u7801\u81f3\u5c11\u5fc5\u987b\u4e3a6\u4e2a\u5b57\u7b26"},
	{"Keystore file exists, but is empty: ",
		"Keystore\u6587\u4ef6\u5b58\u5728\uff0c\u4f46\u4e3a\u7a7a\u6587\u4ef6\uff1a "},
	{"Keystore file does not exist: ",
		"Keystore \u6587\u4ef6\u4e0d\u5b58\u5728\uff1a "},
	{"Must specify destination alias", "\u5fc5\u987b\u6307\u5b9a\u76ee\u7684\u5730\u522b\u540d"},
	{"Must specify alias", "\u5fc5\u987b\u6307\u5b9a\u522b\u540d"},
	{"Keystore password must be at least 6 characters",
		"Keystore \u5bc6\u7801\u81f3\u5c11\u5fc5\u987b\u4e3a6\u4e2a\u5b57\u7b26"},
	{"Enter keystore password:  ", "\u8f93\u5165keystore\u5bc6\u7801\uff1a  "},
	{"Keystore password is too short - must be at least 6 characters",
	 "Keystore \u5bc6\u7801\u592a\u77ed -\u81f3\u5c11\u5fc5\u987b\u4e3a6\u4e2a\u5b57\u7b26"},
	{"Too many failures - try later", "\u592a\u591a\u9519\u8bef - \u8bf7\u7a0d\u540e\u518d\u8bd5"},
	{"Certification request stored in file <filename>",
		"\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u7684\u8ba4\u8bc1\u8981\u6c42 <{0}>"},
	{"Submit this to your CA", "\u5c06\u6b64\u63d0\u4ea4\u7ed9\u60a8\u7684CA"},
	{"Certificate stored in file <filename>",
		"\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u7684\u8ba4\u8bc1 <{0}>"},
	{"Certificate reply was installed in keystore",
		"\u8ba4\u8bc1\u56de\u590d\u5df2\u5b89\u88c5\u5728 keystore\u4e2d"},
	{"Certificate reply was not installed in keystore",
		"\u8ba4\u8bc1\u56de\u590d\u672a\u5b89\u88c5\u5728 keystore\u4e2d"},
	{"Certificate was added to keystore",
		"\u8ba4\u8bc1\u5df2\u6dfb\u52a0\u81f3keystore\u4e2d"},
	{"Certificate was not added to keystore",
		"\u8ba4\u8bc1\u672a\u6dfb\u52a0\u81f3keystore\u4e2d"},
	{"[Storing ksfname]", "[\u6b63\u5728\u5b58\u50a8 {0}]"},
	{"alias has no public key (certificate)",
		"{0} \u6ca1\u6709\u516c\u5f00\u91d1\u94a5\uff08\u8ba4\u8bc1\uff09"},
	{"Cannot derive signature algorithm",
		"\u65e0\u6cd5\u53d6\u5f97\u7b7e\u540d\u7b97\u6cd5 "},
	{"Alias <alias> does not exist",
		"\u522b\u540d <{0}> \u4e0d\u5b58\u5728"},
	{"Alias <alias> has no certificate",
		"\u522b\u540d <{0}> \u6ca1\u6709\u8ba4\u8bc1"},
	{"Key pair not generated, alias <alias> already exists",
		"\u6ca1\u6709\u521b\u5efa\u952e\u503c\u5bf9\uff0c\u522b\u540d <{0}> \u5df2\u7ecf\u5b58\u5728"},
	{"Cannot derive signature algorithm",
		"\u65e0\u6cd5\u53d6\u5f97\u7b7e\u540d\u7b97\u6cd5"},
	{"Generating keysize bit keyAlgName key pair and self-signed certificate (sigAlgName)\n\tfor: x500Name",
		"\u521b\u5efa{0}\u6bd4\u7279{1}\u952e\u503c\u5bf9\u53ca\u9488\u5bf9{3}\u7684\u81ea\u6211\u7b7e\u7f72\u7684\u8ba4\u8bc1 ({2})\n\t\uff1a "},
	{"Enter key password for <alias>", "\u8f93\u5165<{0}>\u7684\u4e3b\u5bc6\u7801"},
	{"\t(RETURN if same as keystore password):  ",
		"\t\uff08\u5982\u679c\u548c keystore \u5bc6\u7801\u76f8\u540c\uff0c\u6309\u56de\u8f66\uff09\uff1a  "},
	{"Key password is too short - must be at least 6 characters",
		"\u4e3b\u5bc6\u7801\u592a\u77ed -\u81f3\u5c11\u5fc5\u987b\u4e3a 6 \u4e2a\u5b57\u7b26"},
	{"Too many failures - key not added to keystore",
		"\u592a\u591a\u9519\u8bef - \u952e\u503c\u672a\u88ab\u6dfb\u52a0\u81f3keystore\u4e2d"},
	{"Destination alias <dest> already exists",
		"\u76ee\u7684\u5730\u522b\u540d <{0}> \u5df2\u7ecf\u5b58\u5728"},
	{"Password is too short - must be at least 6 characters",
		"\u5bc6\u7801\u592a\u77ed -\u81f3\u5c11\u5fc5\u987b\u4e3a6\u4e2a\u5b57\u7b26"},
	{"Too many failures. Key entry not cloned",
		"\u592a\u591a\u9519\u8bef\u3002\u952e\u503c\u8f93\u5165\u672a\u88ab\u590d\u5236"},
	{"key password for <alias>", "<{0}> \u7684\u4e3b\u5bc6\u7801"},
	{"Keystore entry for <id.getName()> already exists",
		"<{0}> \u7684 Keystore \u8f93\u5165\u5df2\u7ecf\u5b58\u5728"},
	{"Creating keystore entry for <id.getName()> ...",
		"\u521b\u5efa <{0}> \u7684 keystore\u8f93\u5165..."},
	{"No entries from identity database added",
		"\u4ece\u6dfb\u52a0\u7684\u8fa8\u8bc6\u6570\u636e\u5e93\u4e2d\uff0c\u6ca1\u6709\u8f93\u5165"},
	{"Alias name: alias", "\u522b\u540d\u540d\u79f0\uff1a {0}"},
	{"Creation date: keyStore.getCreationDate(alias)",
		"\u521b\u5efa\u65e5\u671f\uff1a {0,date}"},
	{"alias, keyStore.getCreationDate(alias), ",
		"{0}, {1,date}, "},
        {"alias, ", "{0}, "},
	{"Entry type: keyEntry", "\u8f93\u5165\u7c7b\u578b\uff1aKeyEntry"},
	{"keyEntry,", "keyEntry,"},
	{"Certificate chain length: ", "\u8ba4\u8bc1\u94fe\u957f\u5ea6\uff1a "},
	{"Certificate[(i + 1)]:", "\u8ba4\u8bc1 [{0,number,integer}]:"},
	{"Certificate fingerprint (MD5): ", "\u8ba4\u8bc1\u6307\u7eb9 (MD5)\uff1a "},
	{"Entry type: trustedCertEntry\n", "\u8f93\u5165\u7c7b\u578b\uff1a trustedCertEntry\n"},
	{"trustedCertEntry,", "trustedCertEntry,"},
	{"Keystore type: ", "Keystore \u7c7b\u578b\uff1a "},
	{"Keystore provider: ", "Keystore \u63d0\u4f9b\u8005\uff1a "},
	{"Your keystore contains keyStore.size() entry",
		"\u60a8\u7684 keystore \u5305\u542b {0,number,integer} \u8f93\u5165"},
	{"Your keystore contains keyStore.size() entries",
		"\u60a8\u7684 keystore \u5305\u542b {0,number,integer} \u8f93\u5165"},
	{"Failed to parse input", "\u65e0\u6cd5\u5bf9\u8f93\u5165\u8fdb\u884c\u8bed\u6cd5\u5206\u6790"},
	{"Empty input", "\u7a7a\u8f93\u5165"},
	{"Not X.509 certificate", "\u975e X.509 \u8ba4\u8bc1"},
	{"Cannot derive signature algorithm",
		"\u65e0\u6cd5\u53d6\u5f97\u7b7e\u540d\u7b97\u6cd5"},
	{"alias has no public key", "{0} \u65e0\u516c\u7528\u5bc6\u94a5"},
	{"alias has no X.509 certificate", "{0} \u65e0 X.509 \u8ba4\u8bc1"},
	{"New certificate (self-signed):", "\u65b0\u8ba4\u8bc1\uff08\u81ea\u6211\u7b7e\u7f72\uff09\uff1a"},
	{"Reply has no certificates", "\u56de\u590d\u4e2d\u6ca1\u6709\u8ba4\u8bc1"},
	{"Certificate not imported, alias <alias> already exists",
		"\u8ba4\u8bc1\u672a\u8f93\u5165\uff0c\u522b\u540d <{0}> \u5df2\u7ecf\u5b58\u5728"},
	{"Input not an X.509 certificate", "\u6240\u8f93\u5165\u7684\u4e0d\u662f\u4e00\u4e2a X.509 \u8ba4\u8bc1"},
	{"Certificate already exists in keystore under alias <trustalias>",
		"\u5728 <{0}> \u7684\u522b\u540d\u4e4b\u4e0b\uff0c\u8ba4\u8bc1\u5df2\u7ecf\u5b58\u5728 keystore \u4e2d"},
	{"Do you still want to add it? [no]:  ",
		"\u60a8\u4ecd\u7136\u60f3\u8981\u6dfb\u52a0\u5b83\u5417\uff1f [\u5426]\uff1a  "},
	{"Certificate already exists in system-wide CA keystore under alias <trustalias>",
		"\u5728 <{0}> \u7684\u522b\u540d\u4e4b\u4e0b\uff0c\u8ba4\u8bc1\u5df2\u7ecf\u5b58\u5728\u4e8e CA keystore \u6574\u4e2a\u7cfb\u7edf\u4e4b\u4e2d"},
	{"Do you still want to add it to your own keystore? [no]:  ",
		"\u60a8\u4ecd\u7136\u60f3\u8981\u5c06\u5b83\u6dfb\u52a0\u5230\u81ea\u5df1\u7684keystore \u5417\uff1f [\u5426]\uff1a  "},
	{"Trust this certificate? [no]:  ", "\u4fe1\u4efb\u8fd9\u4e2a\u8ba4\u8bc1\uff1f [\u5426]\uff1a  "},
	{"YES", "\u662f"},
	{"New prompt: ", "\u65b0 {0}\uff1a "},
	{"Passwords must differ", "\u5fc5\u987b\u662f\u4e0d\u540c\u7684\u5bc6\u7801"},
	{"Re-enter new prompt: ", "\u91cd\u65b0\u8f93\u5165\u65b0 {0}\uff1a "},
	{"They don't match; try again", "\u4ed6\u4eec\u4e0d\u5339\u914d\uff1b\u8bf7\u518d\u8bd5\u4e00\u6b21"},
	{"Enter prompt alias name:  ", "\u8f93\u5165 {0} \u522b\u540d\u540d\u79f0\uff1a  "},
	{"Enter alias name:  ", "\u8f93\u5165\u522b\u540d\u540d\u79f0\uff1a  "},
	{"\t(RETURN if same as for <otherAlias>)",
		"\t\uff08\u5982\u679c\u548c <{0}> \u7684\u76f8\u540c\uff0c\u6309\u56de\u8f66\uff09"},
	{"*PATTERN* printX509Cert",
		"Owner: {0}\n\u53d1\u7167\u8005\uff1a {1}\n\u5e8f\u53f7\uff1a {2}\n\u6709\u6548\u671f\u95f4\uff1a {3} \u81f3\uff1a {4}\n\u8ba4\u8bc1\u6307\u7eb9\uff1a\n\t MD5\uff1a  {5}\n\t SHA1\uff1a {6}"},
	{"What is your first and last name?",
		"\u60a8\u7684\u540d\u5b57\u4e0e\u59d3\u6c0f\u662f\u4ec0\u4e48\uff1f"},
	{"What is the name of your organizational unit?",
		"\u60a8\u7684\u7ec4\u7ec7\u5355\u4f4d\u540d\u79f0\u662f\u4ec0\u4e48\uff1f"},
	{"What is the name of your organization?",
		"\u60a8\u7684\u7ec4\u7ec7\u540d\u79f0\u662f\u4ec0\u4e48\uff1f"},
	{"What is the name of your City or Locality?",
		"\u60a8\u6240\u5728\u7684\u57ce\u5e02\u6216\u533a\u57df\u540d\u79f0\u662f\u4ec0\u4e48\uff1f"},
	{"What is the name of your State or Province?",
		"\u60a8\u6240\u5728\u7684\u5dde\u6216\u7701\u4efd\u540d\u79f0\u662f\u4ec0\u4e48\uff1f"},
	{"What is the two-letter country code for this unit?",
		"\u8be5\u5355\u4f4d\u7684\u4e24\u5b57\u6bcd\u56fd\u5bb6\u4ee3\u7801\u662f\u4ec0\u4e48"},
	{"Is <name> correct?", "{0} \u6b63\u786e\u5417\uff1f"},
	{"no", "\u5426"},
	{"yes", "\u662f"},
	{"y", "y"},
	{"  [defaultValue]:  ", "  [{0}]\uff1a  "},
	{"Alias <alias> has no (private) key",
		"\u522b\u540d <{0}> \u6ca1\u6709\uff08\u79c1\u4eba\uff09\u5bc6\u94a5"},
	{"Recovered key is not a private key",
		"\u6062\u590d\u7684\u5bc6\u94a5\u5e76\u975e\u79c1\u4eba\u5bc6\u94a5"},
	{"*****************  WARNING WARNING WARNING  *****************",
	    "***************** \u8b66\u544a \u8b66\u544a \u8b66\u544a  *****************"},
	{"* The integrity of the information stored in your keystore  *",
	    "*\u4fdd\u5b58\u5728\u60a8\u7684 keystore \u4e2d\u6570\u636e\u7684\u5b8c\u6574\u6027  *"},
	{"* has NOT been verified!  In order to verify its integrity, *",
	    "* \u5c1a\u672a\u88ab\u9a8c\u8bc1\uff01  \u4e3a\u4e86\u9a8c\u8bc1\u5176\u5b8c\u6574\u6027\uff0c *"},
	{"* you must provide your keystore password.                  *",
	    "* \u60a8\u5fc5\u987b\u63d0\u4f9b\u60a8 keystore \u7684\u5bc6\u7801\u3002                  *"},
	{"Certificate reply does not contain public key for <alias>",
		"\u8ba4\u8bc1\u56de\u590d\u5e76\u672a\u5305\u542b <{0}> \u7684\u516c\u7528\u5bc6\u94a5"},
	{"Incomplete certificate chain in reply",
		"\u56de\u590d\u4e2d\u7684\u8ba4\u8bc1\u94fe\u4e0d\u5b8c\u6574"},
	{"Certificate chain in reply does not verify: ",
		"\u56de\u590d\u4e2d\u7684\u8ba4\u8bc1\u94fe\u672a\u9a8c\u8bc1\uff1a "},
	{"Top-level certificate in reply:\n",
		"\u56de\u590d\u4e2d\u7684\u6700\u9ad8\u7ea7\u8ba4\u8bc1\uff1a\n"},
	{"... is not trusted. ", "... \u662f\u4e0d\u53ef\u4fe1\u7684\u3002 "},
	{"Install reply anyway? [no]:  ", "\u8fd8\u662f\u8981\u5b89\u88c5\u56de\u590d\uff1f [\u5426]\uff1a  "},
	{"NO", "\u5426"},
	{"Public keys in reply and keystore don't match",
		"\u56de\u590d\u4e2d\u7684\u516c\u7528\u5bc6\u94a5\u4e0e keystore \u4e0d\u7b26"},
	{"Certificate reply and certificate in keystore are identical",
		"\u8ba4\u8bc1\u56de\u590d\u4e0ekeystore\u4e2d\u7684\u8ba4\u8bc1\u662f\u76f8\u540c\u7684"},
	{"Failed to establish chain from reply",
		"\u65e0\u6cd5\u4ece\u56de\u590d\u4e2d\u5efa\u7acb\u94fe\u63a5"},
	{"n", "n"},
	{"Wrong answer, try again", "\u9519\u8bef\u7684\u7b54\u6848\uff0c\u8bf7\u518d\u8bd5\u4e00\u6b21"},
	{"keytool usage:\n", "keytool \u7528\u6cd5\uff1a\n"},
        {"-certreq     [-v] [-protected]",
                "-certreq     [-v] [-protected]"},
        {"\t     [-alias <alias>] [-sigalg <sigalg>]",
                "\t     [-alias <alias>] [-sigalg <sigalg>]"},
	{"\t     [-file <csr_file>] [-keypass <keypass>]",
		"\t     [-file <csr_file>] [-keypass <keypass>]"},
	{"\t     [-keystore <keystore>] [-storepass <storepass>]",
		"\t     [-keystore <keystore>] [-storepass <storepass>]"},
        {"\t     [-storetype <storetype>] [-providerName <name>]",
                "\t     [-storetype <storetype>] [-providerName <name>]"},
        {"\t     [-providerClass <provider_class_name> [-providerArg <arg>]] ...",
                "\t     [-providerClass <provider_class_name> [-providerArg <arg>]] ..."},
	{"-delete      [-v] [-protected] -alias <alias>",
                "-delete      [-v] [-protected] -alias <alias>"},
        /** rest is same as -certreq starting from -keystore **/

	{"-export      [-v] [-rfc] [-protected]",
                "-export      [-v] [-rfc] [-protected]"},
        {"\t     [-alias <alias>] [-file <cert_file>]",
                "\t     [-alias <alias>] [-file <cert_file>]"},
	/** rest is same as -certreq starting from -keystore **/

        {"-genkey      [-v] [-protected]",
                "-genkey      [-v] [-protected]"},
	{"\t     [-alias <alias>]", "\t     [-alias <alias>]"},
        {"\t     [-keyalg <keyalg>] [-keysize <keysize>]",
                "\t     [-keyalg <keyalg>] [-keysize <keysize>]"},
        {"\t     [-sigalg <sigalg>] [-dname <dname>]",
                "\t     [-sigalg <sigalg>] [-dname <dname>]"},
        {"\t     [-validity <valDays>] [-keypass <keypass>]",
                "\t     [-validity <valDays>] [-keypass <keypass>]"},
        /** rest is same as -certreq starting from -keystore **/

	{"-help", "-help"},
        {"-identitydb  [-v] [-protected]",
                "-identitydb  [-v] [-protected]"},
	{"\t     [-file <idb_file>]", "\t     [-file <idb_file>]"},
        /** rest is same as -certreq starting from -keystore **/

        {"-import      [-v] [-noprompt] [-trustcacerts] [-protected]",
                "-import      [-v] [-noprompt] [-trustcacerts] [-protected]"},
        {"\t     [-alias <alias>]", "\t     [-alias <alias>]"},
	{"\t     [-file <cert_file>] [-keypass <keypass>]",
		"\t     [-file <cert_file>] [-keypass <keypass>]"},
	/** rest is same as -certreq starting from -keystore **/

        {"-keyclone    [-v] [-protected]",
                "-keyclone    [-v] [-protected]"},
        {"\t     [-alias <alias>] -dest <dest_alias>",
                "\t     [-alias <alias>] -dest <dest_alias>"},
	{"\t     [-keypass <keypass>] [-new <new_keypass>]",
		"\t     [-keypass <keypass>] [-new <new_keypass>]"},
	/** rest is same as -certreq starting from -keystore **/

	{"-keypasswd   [-v] [-alias <alias>]",
		"-keypasswd   [-v] [-alias <alias>]"},
	{"\t     [-keypass <old_keypass>] [-new <new_keypass>]",
		"\t     [-keypass <old_keypass>] [-new <new_keypass>]"},
	/** rest is same as -certreq starting from -keystore **/

        {"-list        [-v | -rfc] [-protected]",
                "-list        [-v | -rfc] [-protected]"},
	{"\t     [-alias <alias>]", "\t     [-alias <alias>]"},
        /** rest is same as -certreq starting from -keystore **/

	{"-printcert   [-v] [-file <cert_file>]",
		"-printcert   [-v] [-file <cert_file>]"},

        {"-selfcert    [-v] [-protected]",
                "-selfcert    [-v] [-protected]"},
	{"\t     [-alias <alias>]", "\t     [-alias <alias>]"},
	{"\t     [-dname <dname>] [-validity <valDays>]",
		"\t     [-dname <dname>] [-validity <valDays>]"},
	{"\t     [-keypass <keypass>] [-sigalg <sigalg>]",
                "\t     [-keypass <keypass>] [-sigalg <sigalg>]"},
        /** rest is same as -certreq starting from -keystore **/

	{"-storepasswd [-v] [-new <new_storepass>]",
		"-storepasswd [-v] [-new <new_storepass>]"},
	/** rest is same as -certreq starting from -keystore **/

	// policytool
	{"Warning: A public key for alias 'signers[i]' does not exist.",
		"\u8b66\u544a\uff1a\u522b\u540d {0} \u7684 A \u516c\u7528\u5bc6\u94a5\u4e0d\u5b58\u5728\u3002"},
	{"Warning: Class not found: ",
		"\u8b66\u544a\uff1a\u627e\u4e0d\u5230\u7c7b\u522b "},
	{"Policy File opened successfully",
		"\u89c4\u5219\u6587\u4ef6\u6210\u529f\u6253\u5f00"},
	{"null Keystore name", "\u65e0\u6548\u7684 Keystore \u540d\u79f0"},
	{"Warning: Unable to open Keystore: ",
		"\u8b66\u544a\uff1a\u4e0d\u80fd\u6253\u5f00 keystore\uff1a "},
	{"Illegal option: ", "\u975e\u6cd5\u9009\u9879\uff1a "},
	{"Usage: policytool [options]", "\u7528\u6cd5\uff1a policytool [\u9009\u9879]"},
	{"  [-file <file>]    policy file location",
		"  [-file <file>]    \u89c4\u5219\u6587\u4ef6\u4f4d\u7f6e"},
	{"New", "\u65b0\u6587\u4ef6"},
	{"Open", "\u6253\u5f00"},
	{"Save", "\u4fdd\u5b58"},
	{"Save As", "\u53e6\u5b58\u4e3a"},
	{"View Warning Log", "\u67e5\u770b\u8b66\u544a\u8bb0\u5f55"},
	{"Exit", "\u9000\u51fa"},
	{"Add Policy Entry", "\u6dfb\u52a0\u89c4\u5219\u9879\u76ee"},
	{"Edit Policy Entry", "\u7f16\u8f91\u89c4\u5219\u9879\u76ee"},
	{"Remove Policy Entry", "\u5220\u9664\u89c4\u5219\u9879\u76ee"},
	{"Change KeyStore", "\u66f4\u6539 KeyStore"},
	{"Add Public Key Alias", "\u6dfb\u52a0\u516c\u7528\u5bc6\u94a5\u522b\u540d"},
	{"Remove Public Key Alias", "\u5220\u9664\u516c\u7528\u5bc6\u94a5\u522b\u540d"},
	{"File", "\u6587\u4ef6"},
	{"Edit", "\u7f16\u8f91"},
	{"Policy File:", "\u89c4\u5219\u6587\u4ef6\uff1a"},
	{"Keystore:", "Keystore\uff1a"},
	{"Error parsing policy file policyFile: pppe.getMessage()",
		"\u89c4\u5219\u6587\u4ef6 {0}\uff1a {1} \u89e3\u6790\u9519\u8bef"},
	{"Could not find Policy File: ", "\u627e\u4e0d\u5230\u89c4\u5219\u6587\u4ef6\uff1a "},
	{"Policy Tool", "\u89c4\u5219\u5de5\u5177"},
	{"Errors have occurred while opening the policy configuration.  View the Warning Log for more information.",
		"\u6253\u5f00\u89c4\u5219\u914d\u7f6e\u65f6\u53d1\u751f\u9519\u8bef\u3002 \u8bf7\u67e5\u770b\u8b66\u544a\u8bb0\u5f55\u83b7\u53d6\u66f4\u591a\u4fe1\u606f"},
	{"Error", "\u9519\u8bef"},
	{"OK", "\u786e\u8ba4"},
	{"Status", "\u72b6\u6001"},
	{"Warning", "\u8b66\u544a"},
	{"Permission:                                                       ",
		"\u8bb8\u53ef\uff1a                                                       "},
	{"Target Name:                                                    ",
		"\u76ee\u6807\u540d\u79f0\uff1a                                                    "},
	{"library name", "\u7a0b\u5e8f\u5e93\u540d\u79f0"},
	{"package name", "\u8f6f\u4ef6\u5305\u540d\u79f0"},
	{"property name", "\u5c5e\u6027\u540d\u79f0"},
	{"provider name", "\u63d0\u4f9b\u8005\u540d\u79f0"},
	{"Actions:                                                             ",
		"\u52a8\u4f5c\uff1a                                                             "},
	{"OK to overwrite existing file filename?",
		"\u786e\u8ba4\u66ff\u6362\u73b0\u6709\u7684\u6587\u4ef6 {0}\uff1f"},
	{"Cancel", "\u53d6\u6d88"},
	{"CodeBase:", "CodeBase:"},
	{"SignedBy:", "SignedBy:"},
	{"  Add Permission", "  \u6dfb\u52a0\u6743\u9650"},
	{"  Edit Permission", "  \u7f16\u8f91\u6743\u9650"},
	{"Remove Permission", "\u5220\u9664\u6743\u9650"},
	{"Done", "\u5b8c\u6210"},
	{"New KeyStore URL:", "\u65b0 KeyStore URL\uff1a"},
	{"New KeyStore Type:", "\u65b0 KeyStore \u7c7b\u578b\uff1a"},
	{"Permissions", "\u6743\u9650"},
	{"  Edit Permission:", "  \u7f16\u8f91\u6743\u9650"},
	{"  Add New Permission:", "  \u52a0\u5165\u65b0\u7684\u6743\u9650"},
	{"Signed By:", "\u7b7e\u7f72\u4eba\uff1a"},
	{"Permission and Target Name must have a value",
		"\u6743\u9650\u53ca\u76ee\u6807\u540d\u5fc5\u987b\u6709\u4e00\u4e2a\u503c\u3002"},
	{"Remove this Policy Entry?", "\u5220\u9664\u6b64\u89c4\u5219\u9879\uff1f"},
	{"Overwrite File", "\u66ff\u6362\u6587\u4ef6"},
	{"Policy successfully written to filename",
		"\u89c4\u5219\u6210\u529f\u5199\u81f3 {0}"},
	{"null filename", "\u65e0\u6548\u7684\u6587\u4ef6\u540d"},
	{"filename not found", "{0} \u672a\u627e\u5230"},
	{"     Save changes?", "     \u4fdd\u5b58\u6240\u505a\u4fee\u6539\uff1f"},
	{"Yes", "\u662f"},
	{"No", "\u5426"},
	{"Error: Could not open policy file, filename, because of parsing error: pppe.getMessage()",
		"\u9519\u8bef\uff1a\u7531\u4e8e\u5b58\u5728\u89e3\u6790\u9519\u8bef\uff0c\u4e0d\u80fd\u6253\u5f00\u89c4\u5219\u6587\u4ef6\uff0c{0}\uff1a {1}"},
	{"Permission could not be mapped to an appropriate class",
		"\u65e0\u6cd5\u5c06\u6743\u9650\u6620\u5c04\u81f3\u4e00\u4e2a\u9002\u5f53\u7684\u7c7b\u522b"},
	{"Policy Entry", "\u89c4\u5219\u9879\u76ee"},
	{"Save Changes", "\u4fdd\u5b58\u4fee\u6539"},
	{"No Policy Entry selected", "\u6ca1\u6709\u9009\u62e9\u89c4\u5219\u9879\u76ee"},
	{"Keystore", "Keystore"},
	{"KeyStore URL must have a valid value",
		"KeyStore URL \u5fc5\u987b\u4e3a\u6709\u6548\u503c"},
	{"Invalid value for Actions", "\u65e0\u6548\u7684\u52a8\u4f5c\u503c"},
	{"No permission selected", "\u6ca1\u6709\u9009\u62e9\u6743\u9650"},
	{"Warning: Invalid argument(s) for constructor: ",
		"\u8b66\u544a\uff1a\u65e0\u6548\u7684\u6784\u9020\u7a0b\u5e8f\u53c2\u6570\uff1a "},
	{"Add Principal", "\u6dfb\u52a0 Principal"},
	{"Edit Principal", "\u7f16\u8f91 Principal"},
	{"Remove Principal", "\u5220\u9664 Principal"},
	{"Principal Type:", "Principal \u7c7b\u578b\uff1a"},
        {"Principal Name:", "Principal \u540d\u79f0\uff1a"},
	{"Illegal Principal Type", "\u975e\u6cd5\u7684 Principal \u7c7b\u578b"},
	{"No principal selected", "\u672a\u9009\u62e9 Principal"},
	{"Principals:", "Principals\uff1a"},
	{"Principals", "Principals"},
	{"  Add New Principal:", "  \u52a0\u5165\u65b0 Principal\uff1a"},
	{"  Edit Principal:", "  \u7f16\u8f91 Principal\uff1a"},
	{"name", "\u540d\u79f0"},
	{"Cannot Specify Principal with a Wildcard Class without a Wildcard Name",
	    "\u6ca1\u6709\u901a\u914d\u7b26\u540d\u79f0\uff0c\u65e0\u6cd5\u7528\u901a\u914d\u7b26\u7c7b\u522b\u6307\u5b9aPrincipal"},
	{"Cannot Specify Principal without a Class",
	    "\u6ca1\u6709\u7c7b\u522b\uff0c\u65e0\u6cd5\u6307\u5b9a Principal"},

        {"Cannot Specify Principal without a Name",
            "\u6ca1\u6709\u540d\u79f0\uff0c\u65e0\u6cd5\u6307\u5b9a Principal"},

	// javax.security.auth.PrivateCredentialPermission
	{"invalid null input(s)", "\u65e0\u6548\u7a7a\u8f93\u5165"},
	{"actions can only be 'read'", "\u52a8\u4f5c\u53ea\u80fd\u88ab\u2018\u8bfb\u53d6'"},
	{"permission name [name] syntax invalid: ",
		"\u6743\u9650\u540d\u79f0 [{0}]\u8bed\u6cd5\u65e0\u6548\uff1a "},
	{"Credential Class not followed by a Principal Class and Name",
		"\u8ba4\u8bc1\u7b49\u7ea7\u540e\u672a\u52a0\u4e0aPrincipal \u7c7b\u522b\u53ca\u540d\u79f0"},
	{"Principal Class not followed by a Principal Name",
		"Principal \u7c7b\u522b\u540e\u9762\u6ca1\u52a0\u4e0aPrincipal \u540d\u79f0"},
	{"Principal Name must be surrounded by quotes",
		"Principal \u540d\u79f0\u5fc5\u987b\u653e\u5728\u5f15\u53f7\u5185"},
	{"Principal Name missing end quote",
		"Principal \u540d\u79f0\u7f3a\u5c11\u4e0b\u5f15\u53f7"},
	{"PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value",
		"\u5982\u679c Principal \u540d\u79f0\u4e0d\u662f\u4e00\u4e2a\u901a\u914d\u7b26 (*) \u503c\uff0c\u90a3\u4e48 PrivateCredentialPermission Principal \u7c7b\u522b\u5c31\u4e0d\u4f1a\u662f\u4e00\u4e2a\u901a\u914d\u7b26 (*) \u503c"},
	{"CredOwner:\n\tPrincipal Class = class\n\tPrincipal Name = name",
		"CredOwner:\n\tPrincipal \u7c7b\u522b = {0}\n\tPrincipal \u540d\u79f0 = {1}"},

	// javax.security.auth.x500
	{"provided null name", "\u6240\u4f9b\u540d\u79f0\u65e0\u6548"},

	// javax.security.auth.Subject
	{"invalid null AccessControlContext provided",
		"\u63d0\u4f9b\u65e0\u6548\u7684\u7a7a AccessControlContext"},
	{"invalid null action provided", "\u63d0\u4f9b\u4e86\u65e0\u6548\u7684\u7a7a\u52a8\u4f5c"},
	{"invalid null Class provided", "\u63d0\u4f9b\u4e86\u65e0\u6548\u7684\u7a7a\u7c7b\u522b"},
	{"Subject:\n", "\u4e3b\u9898\uff1a\n"},
	{"\tPrincipal: ", "\tPrincipal: "},
	{"\tPublic Credential: ", "\t\u516c\u7528\u8ba4\u8bc1 "},
	{"\tPrivate Credentials inaccessible\n",
		"\t\u65e0\u6cd5\u8bbf\u95ee\u79c1\u4eba\u8ba4\u8bc1\n"},
	{"\tPrivate Credential: ", "\t\u79c1\u4eba\u8ba4\u8bc1 "},
	{"\tPrivate Credential inaccessible\n",
		"\t\u65e0\u6cd5\u8bbf\u95ee\u79c1\u4eba\u8ba4\u8bc1\n"},
	{"Subject is read-only", "\u4e3b\u9898\u4e3a\u53ea\u8bfb"},
	{"attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set",
		"\u8bd5\u56fe\u5c06\u4e00\u4e2a\u975e java.security.Principal \u5b9e\u4f8b\u7684\u5bf9\u8c61\u6dfb\u52a0\u81f3\u4e3b\u9898\u7684 Principal \u96c6\u4e2d"},
	{"attempting to add an object which is not an instance of class",
		"\u8bd5\u56fe\u6dfb\u52a0\u4e00\u4e2a\u975e {0} \u5b9e\u4f8b\u7684\u5bf9\u8c61"},

	// javax.security.auth.login.AppConfigurationEntry
	{"LoginModuleControlFlag: ", "LoginModuleControlFlag: "},

	// javax.security.auth.login.LoginContext
	{"Invalid null input: name", "\u65e0\u6548\u7a7a\u8f93\u5165\uff1a\u540d\u79f0"},
	{"No LoginModules configured for name",
	 "\u6ca1\u6709\u4e3a {0} \u914d\u7f6eLoginModules"},
	{"invalid null Subject provided", "\u63d0\u4f9b\u4e86\u65e0\u6548\u7a7a\u4e3b\u9898"},
	{"invalid null CallbackHandler provided",
		"\u63d0\u4f9b\u4e86\u65e0\u6548\u7684\u7a7a CallbackHandler"},
	{"null subject - logout called before login",
		"\u65e0\u6548\u4e3b\u9898 - \u5728\u767b\u5f55\u4e4b\u524d\u5373\u88ab\u8c03\u7528\u6ce8\u9500"},
	{"unable to instantiate LoginModule, module, because it does not provide a no-argument constructor",
		"\u65e0\u6cd5\u4f8b\u793a LoginModule\uff0c {0}\uff0c\u56e0\u4e3a\u5b83\u5e76\u672a\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u542b\u53c2\u6570\u7684\u6784\u9020\u7a0b\u5e8f"},
	{"unable to instantiate LoginModule",
		"\u65e0\u6cd5\u4f8b\u793a LoginModule"},
	{"unable to find LoginModule class: ",
		"\u65e0\u6cd5\u627e\u5230 LoginModule \u7c7b\u522b\uff1a "},
	{"unable to access LoginModule: ",
		"\u65e0\u6cd5\u8bbf\u95ee LoginModule: "},
	{"Login Failure: all modules ignored",
		"\u767b\u5f55\u5931\u8d25\uff1a\u5ffd\u7565\u6240\u6709\u6a21\u5757"},

	// sun.security.provider.PolicyFile

	{"java.security.policy: error parsing policy:\n\tmessage",
		"java.security.policy: \u89e3\u6790\u9519\u8bef {0}\uff1a\n\t{1}"},
	{"java.security.policy: error adding Permission, perm:\n\tmessage",
		"java.security.policy: \u6dfb\u52a0\u6743\u9650\u9519\u8bef {0}\uff1a\n\t{1}"},
	{"java.security.policy: error adding Entry:\n\tmessage",
		"java.security.policy: \u6dfb\u52a0\u9879\u76ee\u9519\u8bef\uff1a\n\t{0}"},
	{"alias name not provided (pe.name)", "\u672a\u63d0\u4f9b\u522b\u540d ({0})"},
	{"unable to perform substitution on alias, suffix",
		"\u4e0d\u80fd\u5728\u522b\u540d\u4e0a\u6267\u884c\u66ff\u4ee3\uff0c {0}"},
	{"substitution value, prefix, unsupported",
		"\u66ff\u4ee3\u503c {0} \u4e0d\u53d7\u652f\u6301"},
	{"(", "("},
	{")", ")"},
	{"type can't be null","\u4e0d\u80fd\u4e3a\u65e0\u6548\u7c7b\u578b"},

	// sun.security.provider.PolicyParser
        {"keystorePasswordURL can not be specified without also specifying keystore",
                "\u4e0d\u6307\u5b9a keystore \u65f6\u65e0\u6cd5\u6307\u5b9a keystorePasswordURL"},
	{"expected keystore type", "\u9884\u671f\u7684 keystore \u7c7b\u578b"},
        {"expected keystore provider", "\u9884\u671f\u7684 keystore \u63d0\u4f9b\u8005"},
	{"multiple Codebase expressions",
	        "\u591a\u79cd Codebase \u8868\u8fbe\u5f0f"},
        {"multiple SignedBy expressions","\u591a\u79cd SignedBy \u8868\u8fbe\u5f0f"},
	{"SignedBy has empty alias","SignedBy \u6709\u7a7a\u522b\u540d"},
	{"can not specify Principal with a wildcard class without a wildcard name",
		"\u6ca1\u6709\u901a\u914d\u7b26\u540d\u79f0\uff0c\u65e0\u6cd5\u7528\u901a\u914d\u7b26\u7c7b\u522b\u6307\u5b9aPrincipal"},
	{"expected codeBase or SignedBy or Principal",
		"\u9884\u671f\u7684 codeBase \u6216 SignedBy \u6216 Principal"},
	{"expected permission entry", "\u9884\u671f\u7684\u6743\u9650\u9879\u76ee"},
	{"number ", "\u53f7\u7801"},
	{"expected [expect], read [end of file]",
		"\u9884\u671f\u7684 [{0}], \u8bfb\u53d6 [end of file]"},
	{"expected [;], read [end of file]",
		"\u9884\u671f\u7684 [;], \u8bfb\u53d6[end of file]"},
	{"line number: msg", "\u5217 {0}\uff1a {1}"},
	{"line number: expected [expect], found [actual]",
		"\u884c\u53f7 {0}\uff1a\u9884\u671f\u7684 [{1}]\uff0c\u627e\u5230 [{2}]"},
	{"null principalClass or principalName",
		"\u65e0\u6548 principalClass \u6216 principalName"},

// sun.security.pkcs11.SunPKCS11
        {"PKCS11 Token [providerName] Password: ",
                "PKCS11 Token [{0}] \u5bc6\u7801: "},

	/* --- DEPRECATED --- */
	// javax.security.auth.Policy
	{"unable to instantiate Subject-based policy",
		"\u65e0\u6cd5\u4f8b\u793a\u4ee5\u4e3b\u9898\u4e3a\u57fa\u7840\u7684\u89c4\u5219"}
    };


    /**
     * Returns the contents of this <code>ResourceBundle</code>.
     *
     * <p>
     *
     * @return the contents of this <code>ResourceBundle</code>.
     */
    public Object[][] getContents() {
	return contents;
    }
}
