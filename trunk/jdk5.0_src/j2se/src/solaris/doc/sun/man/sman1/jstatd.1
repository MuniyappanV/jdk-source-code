<!DOCTYPE REFENTRY PUBLIC "-//Sun Microsystems//DTD DocBook V3.0-Based SolBook Subset V2.0//EN" [
<!--ArborText, Inc., 1988-1999, v.4002-->
<!ENTITY % javaents SYSTEM "javaman.ent">
%javaents;
]>
<?Pub UDT _bookmark _target>
<?Pub Inc>
<refentry id="jstatd-1">
<!--@(#)jstatd.1	1.1 04/06/15-->
<refmeta><refentrytitle>unpack200</refentrytitle><manvolnum>1</manvolnum>
<refmiscinfo class="date">22 Jun 2004</refmiscinfo>
<refmiscinfo class="sectdesc">&man1;</refmiscinfo>
<refmiscinfo class="software">&java-release;</refmiscinfo>
<refmiscinfo class="arch">generic</refmiscinfo>
<refmiscinfo class="copyright"> Copyright 2004 Sun Microsystems, Inc. All
rights reserved.  Copyright 2004 Sun Microsystems, Inc. Tous droits r&eacute;serv&eacute;s.
</refmiscinfo>
</refmeta>
<refnamediv><refname>jstatd</refname><refpurpose>Virtual Machine jstat Daemon
</refpurpose></refnamediv>
<refsynopsisdiv><title>&synp-tt;</title>
<cmdsynopsis><command>jstatd</command><arg choice="opt"><replaceable>[ options ]
</replaceable></arg>
</cmdsynopsis></refsynopsisdiv>
<refsect1><title>&parm-tt;</title>
<variablelist termlength="narrow">
<varlistentry><term><replaceable>options</replaceable> </term><listitem><para>
Command-line options. The options may be in any order. If there are redundant
or contradictory options, the last option specified will take precedence. 
</para>
</listitem></varlistentry>
</variablelist></refsect1>
<refsect1><title>&desc-tt;</title>
<indexterm id="java-1-indx-1"><primary sortas="Java interpreter">Java interpreter &mdash;
java</primary></indexterm><indexterm id="java-1-indx-2"><primary sortas="java">
java &mdash; Java interpreter</primary></indexterm><para>The jstatd tool is
an RMI server application that monitors for the creation and termination of
       instrumented HotSpot Java virtual machines (JVMs) and provides a interface
to allow remote monitoring        tools to attach to JVMs running on the local
host. </para>
<para>The jstatd server requires the presence of an RMI registry on the local
host. The jstatd server will        attempt to attach to the RMI registry
on the default port, or on the port indicated by the <option>-p <replaceable>
port</replaceable></option> option. If an RMI registry is not found, one will
be created within the jstatd application bound to the port indicated by the <option>
-p <replaceable>port</replaceable></option> option or to the default RMI registry
port if <option>-p <replaceable>port</replaceable></option>is omitted. Creation
of an internal RMI registry can be inhibited by specifying the <option>-nr
</option> option. </para>
<note><para>NOTE: This utility is unsupported and may or may not be available
in future versions of the JDK. It is not currently available on the Windows
98 and Windows ME platforms. </para>
</note>
</refsect1>
<refsect1><title>&opts-tt;</title>
<para>The jstatd command supports the following options: </para>
<variablelist>
<varlistentry><term>&mdash;nr</term><listitem><para>Do not attempt to create
an internal RMI registry within the jstatd process when an existing RMI registry
is not found. </para>
</listitem></varlistentry>
<varlistentry><term>-p<replaceable> port</replaceable></term><listitem><para>
 Port number where the RMI registry is expected to be found, or, if not found,
created if <option>-nr</option> is not specified. </para>
</listitem></varlistentry>
<varlistentry><term>-n<replaceable> rminame</replaceable></term><listitem>
<para>Name to which the remote RMI object is bound in the RMI registry. The
default name is <literal>JStatRemoteHost</literal>. If multiple jstatd servers
are started on the same host, the name of the exported RMI object for each
server can be made unique by by specifying this option. However, doing so
will require that the unique server name be included in the monitoring client's
hostid and vmid strings. </para>
</listitem></varlistentry>
<varlistentry><term>-J<replaceable>option</replaceable></term><listitem><para>
Pass<replaceable> option</replaceable> to the java launcher called by javac.
For example, <literal>-J-Xms48m</literal> sets the startup memory to 48 megabytes.
It is a common convention for -J to pass options to the underlying VM executing
applications written in Java. </para>
</listitem></varlistentry>
</variablelist></refsect1>
<refsect1><title>SECURITY</title>
<para>The jstatd server installs an instance of RMISecurityPolicy if no other
security manager has been        installed and therefore requires a security
policy file to be specified. The policy file must conform to        the default
policy implementation's Policy File Syntax. The policy file can be specified
with the        <option>-J-Djava.security.policy=<replaceable>file</replaceable> 
</option></para>
<para>The following policy file will allow the jstatd server to run without
any security exceptions. This policy is less liberal then granting all permissions
to all codebases, but is more liberal than a policy that grants the minimal
permissions to run the jstatd server. <screen>grant codebase "file:${java.home}/../lib/tools.jar" {
             permission java.security.AllPermission;
          };</screen></para>
<para>To use this policy, copy the text into a file called<literal> jstatd.all.policy
</literal> and run the jstatd server as follows: <screen>jstatd -J-Djava.security.policy=jstatd.all.policy
</screen></para>
<para>For sites with more restrictive security practices, Sun recommends that
the jstatd security policy be        customized to meet your specific needs. 
</para>
<para>The jstatd server can only monitor JVMs for which it has the appropriate
access permissions. However,  jstatd does not perform any user level authentication
or authorization checking. Therefore, it opens access to the instrumentation
exported by the JVMs for which the jstatd server has the appropriate  access
permissions, allowing arbitrary users on the network to monitor JVMs that
might otherwise be inaccessible. Such exposure may be unacceptable in your
environment. Particular care should be exercised when running the jstatd server
with credentials that allow wide exposure, such as running  the server with
root permissions on UNIX based systems. </para>
<para>The exposure introduced by the jstatd server can be eliminated by not
running the server, thus        requiring all monitoring activities to be
performed locally. Alternatively, the security policy file can be        customized
to limit access to specific trusted hosts. </para>
</refsect1>
<refsect1><title>REMOTE INTERFACE</title>
<para>The interface exported by the jstatd process is proprietary and is guaranteed
to change. Users and        developers are discouraged from writing to this
interface. </para>
</refsect1>
<refsect1><title>EXAMPLES</title>
<para>Here are some examples of starting jstatd. Note that the jstatd scripts
automatically start the server in        the background. </para>
<example>
<title>Using Internal RMI Registry</title>
<para>This example demonstrates starting jstatd with an internal RMI registry.
This example assumes that        no other server is bound to the default RMI
Registry port (port 1099). <screen>statd -J-Djava.security.policy=all.policy
</screen></para>
</example>
<example>
<title>Using External RMI Registry</title>
<para>This example demonstrates starting jstatd with a external RMI registry. <screen>
rmiregistry&amp;
          jstatd -J-Djava.security.policy=all.policy</screen></para>
<para>This example demonstrates starting jstatd with an external RMI registry
server on port 2020. <screen>rmiregistry 2020&amp;
          jstatd -J-Djava.security.policy=all.policy -p 2020</screen></para>
<para>This example demonstrates starting jstatd with an external RMI registry
on port 2020, bound to name A<literal>lternateJstatdServerName</literal>. <screen>
rmiregistry 2020&amp;
          jstatd -J-Djava.security.policy=all.policy -p 2020 -n AlternateJstatdServerName
</screen></para>
</example>
<example>
<title>Inhibiting creation of an in-process RMI registry</title>
<para>This example demonstrates starting jstatd such that it will not create
a RMI registry if one is not <?Pub Caret>found. This example assumes an RMI
registry is already running. If it is not, an appropriate error  message is
emitted. <screen>jstatd -nr</screen></para>
</example>
<example>
<title> Enabling RMI logging capabilities.</title>
<para>This example demonstrates starting jstatd with RMI logging capabilities
enabled. This technique is useful as a troubleshooting aid or for monitoring
server activities. <screen>jstatd -J-Djava.security.policy=all.policy -J-Djava.rmi.server.logCalls=true
</screen></para>
<para>This example uses the Bourne Shell syntax for setting environment variables,
other shells or command interpreters may require different syntax. </para>
</example>
</refsect1>
<refsect1><title>&also-tt;</title>
<para><citerefentry><refentrytitle>java</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,<citerefentry><refentrytitle>jps</refentrytitle><manvolnum>
1</manvolnum></citerefentry>, <citerefentry><refentrytitle>jstat</refentrytitle>
<manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>rmiregistry
</refentrytitle><manvolnum>1</manvolnum></citerefentry></para>
</refsect1>
</refentry>
<?Pub *0000009304>
