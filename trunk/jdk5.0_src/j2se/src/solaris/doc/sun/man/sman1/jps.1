<!DOCTYPE REFENTRY PUBLIC "-//Sun Microsystems//DTD DocBook V3.0-Based SolBook Subset V2.0//EN" [
<!--ArborText, Inc., 1988-1999, v.4002-->
<!ENTITY % javaents SYSTEM "javaman.ent">
%javaents;
]>
<?Pub UDT _bookmark _target>
<?Pub Inc>
<refentry id="jps-1">
<!--@(#)jps.1	1.1 04/06/15-->
<refmeta><refentrytitle>unpack200</refentrytitle><manvolnum>1</manvolnum>
<refmiscinfo class="date">22 Jun 2004</refmiscinfo>
<refmiscinfo class="sectdesc">&man1;</refmiscinfo>
<refmiscinfo class="software">&java-release;</refmiscinfo>
<refmiscinfo class="arch">generic</refmiscinfo>
<refmiscinfo class="copyright"> Copyright 2004 Sun Microsystems, Inc. All
rights reserved.  Copyright 2004 Sun Microsystems, Inc. Tous droits r&eacute;serv&eacute;s.
</refmiscinfo>
</refmeta>
<refnamediv><refname>jps</refname><refpurpose>Java Virtual Machine Process
Status Tool</refpurpose></refnamediv>
<refsynopsisdiv><title>&synp-tt;</title>
<cmdsynopsis><command>jps</command><arg choice="opt"><replaceable>[ options ]
</replaceable></arg><arg choice="plain"><replaceable>[ hostid ]</replaceable></arg>
</cmdsynopsis></refsynopsisdiv>
<refsect1><title>&parm-tt;</title>
<para>Options are mutually exclusive. Option, if used, should follow immediately
after the command       name. See OPTIONS. </para>
<variablelist termlength="narrow">
<varlistentry><term><replaceable>options</replaceable> </term><listitem><para>
command line options</para>
</listitem></varlistentry>
<varlistentry><term><replaceable>hostid</replaceable> </term><listitem><para>
The host identifier of the host for which the process report should be generated.
The hostid may include optional components that indicate the communications
protocol, port number, and other implementation specific data.</para>
</listitem></varlistentry>
</variablelist></refsect1>
<refsect1><title>&desc-tt;</title>
<indexterm id="java-1-indx-1"><primary sortas="Java interpreter">Java interpreter &mdash;
java</primary></indexterm><indexterm id="java-1-indx-2"><primary sortas="java">
java &mdash; Java interpreter</primary></indexterm><para>The jps tool lists
the instrumented HotSpot Java Virtual Machines (JVMs) on the target system.
The tool is limited to reporting information on JVMs for which it has the
access permissions. </para>
<para>If jps is run without specifying a hostid, it will look for instrumented
JVMs on the local host. If started        with a hostid, it will look for
JVMs on the indicated host, using the specified protocol and port. A jstatd
       process is assumed to be running on the target host.       </para>
<para> The jps command will report the local VM identifier, or lvmid, for
each instrumented JVM found on the target system. The lvmid is typically,
but not necessarily, the operating system's process identifier for       
the JVM process. With no options, jps will list each Java application's lvmid
followed by the short form of the application's class name or jar file name.
The short form of the class name or JAR file name omits the class's package
information or the JAR files path information. </para>
<para>The jps command uses the java launcher to find the class name and arguments
passed to the main        method. If the target JVM is started with a custom
launcher, the class name (or JAR file name) and the        arguments to the
main method will not be available. In this case, the jps command will output
the string Unknown for the class name or JAR file name and for the arguments
to the main method. </para>
<para> The list of JVMs produced by the jps command may be limited by the
permissions granted to the        principal running the command. The command
will only list the JVMs for which the principle has        access rights as
determined by operating system specific access control mechanisms. </para>
<note><para>NOTE - This utility is unsupported and may or may not be available
in future versions of the JDK. It is not currently available on Windows 98
and Windows ME platforms. </para>
</note>
</refsect1>
<refsect1><title>&opts-tt;</title>
<para>The jps command supports a number of options that modify the output
of the command. These        options are subject to change or removal in the
future. </para>
<variablelist>
<varlistentry><term>&mdash;q</term><listitem><para>Suppress the output of
the class name, JAR file name, and arguments passed to the main method, producing
only a list of local VM identifiers. </para>
</listitem></varlistentry>
<varlistentry><term>-m</term><listitem><para>Output the arguments passed to
the main method. The output may be null for embedded JVMs. </para>
</listitem></varlistentry>
<varlistentry><term>-l</term><listitem><para>Output the full package name
for the application's main class or the full path name to the application's
JAR file.</para>
</listitem></varlistentry>
<varlistentry><term>-v</term><listitem><para>Output the arguments passed to
the JVM. </para>
</listitem></varlistentry>
<varlistentry><term>-V</term><listitem><para>Output the arguments passed to
the JVM through the flags file (the .hotspotrc file or the file specified
by the -XX:Flags=&lt;filename> argument). </para>
</listitem></varlistentry>
<varlistentry><term>-J<replaceable>option</replaceable></term><listitem><para>
Pass <replaceable>option</replaceable> to the java launcher called by javac.
For example, -J-Xms48m sets the startup memory to 48 megabytes. It is a common
convention for -J to pass options to the underlying VM executing applications
written in Java. </para>
</listitem></varlistentry>
</variablelist></refsect1>
<refsect1><title>HOST IDENTIFIER</title>
<para>The host identifier, or <replaceable>hostid</replaceable> is a string
that indicates the target system. The syntax of the hostid string largely
corresponds to the syntax of a URI: <screen>[protocol:][[//]hostname][:port][/servername]
</screen></para>
<variablelist>
<varlistentry><term>protocol</term><listitem><para>The communications protocol.
If the protocol is omitted and a hostname is not specified, the default protocol
is a platform specific, optimized, local protocol. If the protocol is omitted
and a hostname is specified, then the default protocol is rmi. </para>
</listitem></varlistentry>
<varlistentry><term>hostname</term><listitem><para>A hostname or IP address
indicating the target host. If hostname is omitted, then the target host is
the local host. </para>
</listitem></varlistentry>
<varlistentry><term>port</term><listitem><para>The default port for communicating
with the remote server. If the hostname is omitted or the protocol specifies
an optimized, local protocol, then port is ignored. Otherwise, treatment of
the port parameter is implementation specific. For the default rmi protocol
the port indicates the port number for the rmiregistry on the remote host.
If port is omitted, and protocol indicates rmi, then the default rmiregistry
port (1099) is used. </para>
</listitem></varlistentry>
<varlistentry><term>servername</term><listitem><para>The treatment of this
parameter depends on the implementation. For the optimized, local protocol,
this field is ignored. For the rmi protocol, this parameter is a string representing
the name of the RMI remote object on the remote host. See the -n option for
the jstatd command. </para>
</listitem></varlistentry>
</variablelist></refsect1>
<refsect1><title>OUTPUT FORMAT</title>
<para>The output of the jps command follows the following pattern: <screen>
lvmid [ [ classname | JARfilename | "Unknown"] [ arg* ] [ jvmarg* ] ]</screen>Where
all output tokens are separated by white space. An arg that includes embedded
white space will introduce ambiguity when attempting to map arguments to their
actual positional parameters.</para>
<note><para>NOTE: You are advised not to write scripts to parse jps output
since the format may change in future releases. If you choose to write scripts
that parse jps output, expect to modify them for future releases of this tool.
</para>
</note>
</refsect1>
<refsect1><title>EXAMPLES</title>
<para>This section provides examples of the jps command. </para>
<example>
<title>Listing the instrumented JVMs on the local host:</title>
<screen>jps
          18027 Java2Demo.JAR
          18032 jps
          18005 jstat</screen>
</example>
<example>
<title>Listing the instrumented JVMs on a remote host:</title>
<para>This example assumes that the jstat server and either the its internal
RMI registry or a separate        external rmiregistry process are running
on the remote host on the default port (port 1099). It also        assumes
that the local host has appropriate permissions to access the remote host.
This example also        includes the -l option to output the long form of
the class names or JAR file names. </para>
<screen>jps -l remote.domain
          3002 /opt/j2sdk1.5.0/demo/jfc/Java2D/Java2Demo.JAR
          2857 sun.tools.jstatd.jstatd</screen>
</example>
<example>
<title>Listing the instrumented JVMs on a remote host with a non-default port
for the RMI registry</title>
<para>This example assumes that the jstatd server, with an internal RMI registry
bound to port 2002, is<?Pub Caret> running on the remote host. This example
also uses the -m option to include the arguments passed to the main method
of each of the listed Java applications. </para>
<screen>jps -m remote.domain:2002
          3002 /opt/j2sdk1.5.0/demo/jfc/Java2D/Java2Demo.JAR
          3102 sun.tools.jstatd.jstatd -p 2002</screen>
</example>
</refsect1>
<refsect1><title>&also-tt;</title>
<para><citerefentry><refentrytitle>java</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry><refentrytitle>jstat</refentrytitle><manvolnum>
1</manvolnum></citerefentry>, <citerefentry><refentrytitle>jstatd</refentrytitle>
<manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>rmiregistry
</refentrytitle><manvolnum>1</manvolnum></citerefentry> </para>
</refsect1>
</refentry>
<?Pub *0000009929>
