# 
# @(#)buildtree.make	1.20 03/12/23 16:35:23
# 
# Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.
#

# Usage:
#
# $(MAKE) -f buildtree.make ARCH=arch GAMMADIR=dir OS_FAMILY=os VARIANT=variant
#
# The macros ARCH, GAMMADIR, OS_FAMILY and VARIANT must be defined in the
# environment or on the command-line:
#
# ARCH		- sparc, i486, ...
# GAMMADIR	- top of workspace
# OS_FAMILY	- operating system
# VARIANT	- core, compiler1, or compiler2
#
# Builds the directory trees with makefiles plus some convenience files in
# each directory:
#
# Makefile	- for "make foo"
# flags.make	- with macro settings
# vm.make	- to support making "$(MAKE) -v vm.make" in makefiles
# adlc.make	- 
# jvmti.make	- generate JVMTI and JVMDI bindings from the spec (JSR-163)
# sa.make	- generate SA jar file and natives
# env.[ck]sh	- environment settings
# test_gamma	- script to run the Queens program
# 
# The makefiles are split this way so that "make foo" will run faster by not
# having to read the dependency files for the vm.

# 'gmake MAKE_VERBOSE=y' or 'gmake QUIETLY=' gives all the gory details.
QUIETLY$(MAKE_VERBOSE)	= @

# For now, until the compiler is less wobbly:
TESTFLAGS	= -Xbatch

ifdef LP64
# For the 64 bit Sparc build, we want to
# build it into a unique directory (solaris_sparcv9_xxxx)
# even though the platform is still sparc
BUILDARCH = sparcv9
else
BUILDARCH = $(ARCH)
endif

ifdef USE_GCC
PLATFORM_FILE	= $(GAMMADIR)/build/$(OS_FAMILY)/platform_$(ARCH).gcc
GCC_LIB         = /usr/local/lib
else
PLATFORM_FILE	= $(GAMMADIR)/build/$(OS_FAMILY)/platform_$(ARCH)
GCC_LIB         = 
endif

PLATFORM_DIR	= $(OS_FAMILY)_$(BUILDARCH)_$(VARIANT)

#
# We do two levels of exclusion in the shared directory.
# TOPLEVEL excludes are pruned, they are not recursively searched,
# but lower level directories can be named without fear of collision.
# ALWAYS excludes are excluded at any level in the directory tree.
#

ALWAYS_EXCLUDE_DIRS     = -name SCCS

ifeq		($(VARIANT),compiler2)
TOPLEVEL_EXCLUDE_DIRS	= $(ALWAYS_EXCLUDE_DIRS) -o -name adlc -o -name c1 -o -name agent
else
# compiler1 and core use the same exclude list
TOPLEVEL_EXCLUDE_DIRS	= $(ALWAYS_EXCLUDE_DIRS) -o -name adlc -o -name opto -o -name libadt -o -name agent
endif

# Get things from the platform file.
COMPILER	= $(shell sed -n 's/^compiler[ 	]*=[ 	]*//p' $(PLATFORM_FILE))
LIB_ARCH	= $(shell sed -n 's/^lib_arch[ 	]*=[ 	]*//p' $(PLATFORM_FILE))

SIMPLE_DIRS	= \
	$(PLATFORM_DIR)/generated/incls \
	$(PLATFORM_DIR)/generated/adfiles \
	$(PLATFORM_DIR)/generated/jvmtifiles

SUBMAKE_DIRS	= \
	$(PLATFORM_DIR)/debug \
	$(PLATFORM_DIR)/fastdebug \
	$(PLATFORM_DIR)/jvmg \
	$(PLATFORM_DIR)/optimized \
	$(PLATFORM_DIR)/product \
	$(PLATFORM_DIR)/profiled \
	$(PLATFORM_DIR)/release

# For dependencies and recursive makes.
BUILDTREE_MAKE	= $(GAMMADIR)/build/solaris/makefiles/buildtree.make

BUILDTREE_TARGETS = Makefile flags.make flags_vm.make vm.make adlc.make jvmti.make sa.make \
        env.ksh env.csh .dbxrc test_gamma

BUILDTREE_VARS	= GAMMADIR=$(GAMMADIR) OS_FAMILY=$(OS_FAMILY) \
	ARCH=$(ARCH) VARIANT=$(VARIANT)

BUILDTREE	= \
	$(MAKE) -f $(BUILDTREE_MAKE) $(BUILDTREE_TARGETS) $(BUILDTREE_VARS)

BUILDTREE_COMMENT	= echo "\# Generated by $(BUILDTREE_MAKE)"

.PHONY:  all FORCE

all:  $(SUBMAKE_DIRS)

# Run make in each subdirectory recursively.
$(SUBMAKE_DIRS): $(SIMPLE_DIRS) FORCE
	$(QUIETLY) [ -d $@ ] || { mkdir -p $@; }
	$(QUIETLY) cd $@ && $(BUILDTREE) TARGET=$(@F)
	$(QUIETLY) touch $@

$(SIMPLE_DIRS):
	$(QUIETLY) mkdir -p $@

flags.make: $(BUILDTREE_MAKE) ../shared_dirs.lst
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo "Platform_file = $(PLATFORM_FILE)" | sed 's|$(GAMMADIR)|$$(GAMMADIR)|'; \
	sed -n '/=/s/^ */Platform_/p' < $(PLATFORM_FILE); \
	echo; \
	echo "GAMMADIR = $(GAMMADIR)"; \
	echo "SYSDEFS = $$(Platform_sysdefs)"; \
	echo; \
	echo "Src_Dirs = \\"; \
	sed 's/$$/ \\/;s|$(GAMMADIR)|$$(GAMMADIR)|' ../shared_dirs.lst; \
	echo "$$(GAMMADIR)/src/cpu/$(ARCH)/vm \\"; \
	echo "$$(GAMMADIR)/src/os/$(OS_FAMILY)/vm \\"; \
	echo "$$(GAMMADIR)/src/os_cpu/$(OS_FAMILY)_$(ARCH)/vm"; \
	[ -n "$(CFLAGS_BROWSE)" ] && \
	    echo && echo "CFLAGS_BROWSE = $(CFLAGS_BROWSE)"; \
	[ -n "$(HOTSPOT_EXTRA_SYSDEFS)" ] && \
	    echo && \
	    echo "HOTSPOT_EXTRA_SYSDEFS$$(HOTSPOT_EXTRA_SYSDEFS) = $(HOTSPOT_EXTRA_SYSDEFS)" && \
	    echo "SYSDEFS += $$(HOTSPOT_EXTRA_SYSDEFS)"; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(VARIANT).make"; \
	[ "$(TARGET)" = profiled ] && \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/optimized.make"; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(COMPILER).make"; \
	) > $@

flags_vm.make: $(BUILDTREE_MAKE) ../shared_dirs.lst
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(TARGET).make"; \
	) > $@

../shared_dirs.lst:  $(BUILDTREE_MAKE) $(GAMMADIR)/src/share/vm
	@echo Creating directory list $@
	$(QUIETLY) find $(GAMMADIR)/src/share/vm/* -prune \
	-type d \! \( $(TOPLEVEL_EXCLUDE_DIRS) \) -exec find {} \
        -type d \! \( $(ALWAYS_EXCLUDE_DIRS) \) \; > $@

Makefile: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo include flags.make; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/top.make"; \
	) > $@

vm.make: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo include flags.make; \
	echo include flags_vm.make; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(@F)"; \
	) > $@

adlc.make: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo include flags.make; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(@F)"; \
	) > $@

jvmti.make: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo include flags.make; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(@F)"; \
	) > $@

sa.make: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	echo; \
	echo include flags.make; \
	echo; \
	echo "include $$(GAMMADIR)/build/$(OS_FAMILY)/makefiles/$(@F)"; \
	) > $@

env.ksh: $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	[ -n "$$JAVA_HOME" ] && { echo ": \$${JAVA_HOME:=$${JAVA_HOME}}"; }; \
	{ \
	echo "LD_LIBRARY_PATH=.:$${LD_LIBRARY_PATH:+$$LD_LIBRARY_PATH:}\$${JAVA_HOME}/jre/lib/${LIB_ARCH}/native_threads:\$${JAVA_HOME}/jre/lib/${LIB_ARCH}:${GCC_LIB}"; \
	echo "CLASSPATH=$${CLASSPATH:+$$CLASSPATH:}.:\$${JAVA_HOME}/jre/lib/rt.jar:\$${JAVA_HOME}/jre/lib/i18n.jar"; \
	} | sed s:$${JAVA_HOME:--------}:\$${JAVA_HOME}:g; \
	echo "HOTSPOT_BUILD_USER=\"$${LOGNAME:-$$USER} in `basename $(GAMMADIR)`\""; \
	echo "export JAVA_HOME LD_LIBRARY_PATH CLASSPATH HOTSPOT_BUILD_USER"; \
	) > $@

env.csh: env.ksh
	@echo Creating $@ ...
	$(QUIETLY) ( \
	$(BUILDTREE_COMMENT); \
	[ -n "$$JAVA_HOME" ] && \
	{ echo "if (! \$$?JAVA_HOME) setenv JAVA_HOME \"$$JAVA_HOME\""; }; \
	sed -n 's/^\([A-Za-z_][A-Za-z0-9_]*\)=/setenv \1 /p' $?; \
	) > $@

.dbxrc:  $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	echo "echo '# Loading $(PLATFORM_DIR)/$(TARGET)/.dbxrc'"; \
	echo "if [ -f \"\$${HOTSPOT_DBXWARE}\" ]"; \
	echo "then"; \
	echo "	source \"\$${HOTSPOT_DBXWARE}\""; \
	echo "elif [ -f \"\$$HOME/.dbxrc\" ]"; \
	echo "then"; \
	echo "	source \"\$$HOME/.dbxrc\""; \
	echo "fi"; \
	) > $@

# Skip the test for product builds (which only work when installed in a JDK), to
# avoid exiting with an error and causing make to halt.
NO_TEST_MSG	= \
	echo "$@:  skipping the test--this build must be tested in a JDK."

NO_JAVA_HOME_MSG	= \
	echo "JAVA_HOME must be set to run this test."

test_gamma:  $(BUILDTREE_MAKE)
	@echo Creating $@ ...
	$(QUIETLY) ( \
	echo '#!/bin/ksh'; \
	$(BUILDTREE_COMMENT); \
	[ "$(TARGET)" = product ] && { echo '$(NO_TEST_MSG)'; exit 0; }; \
	[ "$(TARGET)" = profiled ] && { echo '$(NO_TEST_MSG)'; exit 0; }; \
	echo '. ./env.ksh'; \
	echo "if [ -z \$$JAVA_HOME ]; then { $(NO_JAVA_HOME_MSG); exit 0; }; fi"; \
	echo 'CLASSPATH="$(GAMMADIR)/build/solaris:$$CLASSPATH"'; \
	echo '[ -f gamma_g ] && { gamma=gamma_g; }'; \
	echo './$${gamma:-gamma} $(TESTFLAGS) Queens < /dev/null'; \
	) > $@
	$(QUIETLY) chmod +x $@

FORCE:
