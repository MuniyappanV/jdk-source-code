#
# @(#)Release.gmk	1.107 10/04/16
# 
# Copyright (c) 2008, 2010 Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

# Release makefile, release targets

sample:
	$(MAKE) RELEASE_BUILD=1 I18N=1 jaws-sample

installer:
	$(MAKE) I18N=1 all

installer-all: installer-us installer-int

installer-us:
	$(MAKE) RELEASE_BUILD=1 all

installer-int:
	$(MAKE) RELEASE_BUILD=1 I18N=1 all

# Signing targets
ifdef WINDOWS
signexe-us:
	$(MAKE) RELEASE_BUILD=1 signexe

signexe-int:
	$(MAKE) RELEASE_BUILD=1 I18N=1 signexe

jinstall-us:
	$(MAKE) RELEASE_BUILD=1 jinstall

jinstall-int:
	$(MAKE) RELEASE_BUILD=1 I18N=1 jinstall
endif

# We only support 32 bit targets currently.  If anything other than 32 bit
# build is requested, just exit normally.

clobber: clean
	$(MAKE) RELEASE_BUILD=1 clean
	$(MAKE) RELEASE_BUILD=1 I18N=1 clean


# absolute directory names: note, these must exist prior to build 
# time - they are created in the main Makefile.
ABS_HTMLCONVERTER :=$(call FullPath,$(BINDIR))/HtmlConverter$(EXE_SUFFIX)

# This is the cached Temporary image which would be used for the plugin images.
TMP_DEPLOY_IMAGE_DIR := $(OUTPUTDIR)/tmp/deploy/deploy-image

# define deploy amd64 build switch
BUILD_REGUTILS_ONLY=false
ifeq ($(PLATFORM), windows)
ifeq ($(ARCH_DATA_MODEL), 64)
  ifneq ($(BUILD_DEPLOY_AMD64), true)
    BUILD_REGUTILS_ONLY=true
  endif
endif
endif

#
# Targets.
#
deploy-images images-clobber ::
	@$(ECHO) ">>>Making "$@" @ `$(DATE)` ..."; 

deploy-images:: deploy-jre-image deploy-jdk-image

# The following get removed from the SDK image.
NOTJDKTOOLS = \
	java_vm

# The following get removed from the JRE after the bulk-copy of BINDIR...
NOTJRETOOLS = \
	HtmlConverter$(EXE_SUFFIX) \
	packager$(EXE_SUFFIX) \
	beanreg.dll

# The following get removed from the JRE after the bulk-copy of LIBDIR...
NOTJRELIBS = \
	htmlconverter.jar

DEMODIR = $(OUTPUTDIR)/demo

PLUGIN_DEMO_SRC=$(J2SE_TOPDIR)/src/share

#
###### RULES 

######################################################
# Deploy-JRE Image
######################################################
deploy-jre-image::
	$(MKDIR) -p $(JRE_IMAGE_DIR)
	$(RM) -r $(TMP_DEPLOY_IMAGE_DIR)
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)
  ifneq ($(PLATFORM), windows)
	@#
	@# Copy the plugin binaries into the JRE image directory, if they exist...
	@#
	if [ -d $(OUTPUTDIR)/plugin ]; then \
	    $(MKDIR) $(TMP_DEPLOY_IMAGE_DIR)/plugin; \
	    $(CD) $(OUTPUTDIR)/plugin; \
	    $(TAR) cf - `$(FIND) . -type f` | \
	    ($(CD) $(TMP_DEPLOY_IMAGE_DIR)/plugin; $(TAR) xf -); \
	fi
	@#
	@# Copy plugin desktop file into the JRE image directory, if they exist...
	@#
	if [ -d $(OUTPUTDIR)/plugin/desktop ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/plugin/desktop; \
	    $(CP) -r -f $(OUTPUTDIR)/plugin/desktop $(TMP_DEPLOY_IMAGE_DIR)/plugin; \
	fi
	@#
	@# Copy the Java Control Panel script (jcontrol) into the JRE image
	@# directory, if it exists...
	@#
	if [ -f $(OUTPUTDIR)/bin/jcontrol ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/bin; \
	    $(CP) $(OUTPUTDIR)/bin/jcontrol $(TMP_DEPLOY_IMAGE_DIR)/bin; \
	    $(RM) $(TMP_DEPLOY_IMAGE_DIR)/bin/ControlPanel; \
	    $(LN) -sf ./jcontrol $(TMP_DEPLOY_IMAGE_DIR)/bin/ControlPanel; \
	fi
	@#
	@# Copy the desktop integration files (icons, applications/.desktop,
	@# mimetypes) into the JRE image directory, if they exist...
	@#
	if [ -d $(OUTPUTDIR)/lib/desktop ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib; \
	    $(CP) -rf $(OUTPUTDIR)/lib/desktop $(TMP_DEPLOY_IMAGE_DIR)/lib; \
	fi
	if [ -d $(OUTPUTDIR)/lib/images ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib; \
	    $(CP) -rf $(OUTPUTDIR)/lib/images $(TMP_DEPLOY_IMAGE_DIR)/lib; \
	fi
	@#
	@# Copy the java_vm executable into the JRE image directory, if it exists...
	@#
	if [ -f $(OUTPUTDIR)/bin/java_vm ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/bin; \
	    $(CP) $(OUTPUTDIR)/bin/java_vm $(TMP_DEPLOY_IMAGE_DIR)/bin/.; \
	fi
	@#
	@# Copy the JNI entry points into the JRE image directory, if it exists...
	@#
	if [ -f $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_jni.so ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH); \
	    $(CP) $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_jni.so $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH)/.; \
	fi

	@#
	@# Copy the common Netscape code into the JRE image directory, if it exists...
	@#
	if [ -f $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_nscp.so ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH); \
	    $(CP) $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_nscp.so $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH)/.; \
	fi
	if [ -f $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_nscp_gcc29.so ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH); \
	    $(CP) $(OUTPUTDIR)/lib/$(LIBARCH)/libjavaplugin_nscp_gcc29.so $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH)/.; \
	fi
	@#
	@# Copy the new Java Plug-In into the JRE image directory, if it exists...
	@#
	if [ -f $(OUTPUTDIR)/lib/$(LIBARCH)/libnpjp2.so ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH); \
	    $(CP) $(OUTPUTDIR)/lib/$(LIBARCH)/libnpjp2.so $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH)/.; \
	fi
	@#
	@# Copy the script L10N message files into the JRE image directory
	@#
	if [ -d $(LIBDIR) ]; then \
	    $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib; \
	    $(CD) $(LIBDIR); \
	    $(TAR) cf - `$(FIND) . -name 'sunw_java_plugin.mo' -print` | \
	    ($(CD) $(TMP_DEPLOY_IMAGE_DIR)/lib; $(TAR) xf -); \
	fi
	@# Now take care of the deploy common so
	if [ -f $(DEPLOY_COMMON_LIB) ]; then \
	   $(CP) $(DEPLOY_COMMON_LIB) $(TMP_DEPLOY_IMAGE_DIR)/lib/$(LIBARCH)/; \
	fi
  else # PLATFORM
     ifeq ($(BUILD_PLUGIN), true)
      ifneq ($(BUILD_REGUTILS_ONLY), true)
	@#
	@# Copy the plugin binaries into the temp plugin image directory, if they exist...
	@#
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/np*.dll $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/jp2* $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/javacpl* $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/regutils.dll $(TMP_DEPLOY_IMAGE_DIR)/bin
ifeq ($(ARCH_DATA_MODEL), 32)
	$(CP) $(BINDIR)/jpi* $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/axbridge.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
endif
	$(CP) -r $(BINDIR)/new_plugin $(TMP_DEPLOY_IMAGE_DIR)/bin;
	@# Above wildcard copies might have added map or pdb files, remove them
	$(RM) `$(FIND)  $(TMP_DEPLOY_IMAGE_DIR)/bin -name \*.map`
	$(RM) `$(FIND)  $(TMP_DEPLOY_IMAGE_DIR)/bin -name \*.pdb`
	$(CP) $(BINDIR)/eula.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
	$(CP) $(BINDIR)/ssv.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
	$(CP) $(BINDIR)/ssvagent.exe $(TMP_DEPLOY_IMAGE_DIR)/bin;
ifeq ($(BUILD_JKERNEL), true)
	$(CP) $(BINDIR)/jkernel.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
endif
	$(CP) $(BINDIR)/jbroker.exe $(TMP_DEPLOY_IMAGE_DIR)/bin;
	$(CP) $(BINDIR)/deployJava1.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
	$(CP) $(BINDIR)/npdeployJava1.dll $(TMP_DEPLOY_IMAGE_DIR)/bin;
	@# Now take care of the deploy common dll
	if [ -f $(DEPLOY_COMMON_LIB) ]; then \
	   $(CP) $(DEPLOY_COMMON_LIB) $(TMP_DEPLOY_IMAGE_DIR)/bin/; \
	fi
      else 
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/regutils.dll $(TMP_DEPLOY_IMAGE_DIR)/bin
      endif
     endif
  endif # PLATFORM
     ifeq ($(BUILD_PLUGIN), true)
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib/deploy
ifneq ($(BUILD_REGUTILS_ONLY), true)
	$(CP) $(LIBDIR)/plugin.jar $(TMP_DEPLOY_IMAGE_DIR)/lib
	$(CP) $(LIBDIR)/deploy/ffjcext.zip	$(TMP_DEPLOY_IMAGE_DIR)/lib/deploy
endif
	@#
	@# Remove tools that should not be part of JRE.
	@#
	for t in $(NOTJRETOOLS) ; do \
	    $(RM) $(TMP_DEPLOY_IMAGE_DIR)/bin$(ISA_DIR)/$$t ; \
	done ;
	@#
	@# Remove libs that should not be part of JRE.
	@#
	for l in $(NOTJRELIBS) ; do \
	    $(RM) $(TMP_DEPLOY_IMAGE_DIR)/lib/$$l ; \
	done ;
     endif
	@# Now take care of the javaws-image
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/lib
	$(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/bin
ifneq ($(BUILD_REGUTILS_ONLY), true)
	$(CP) -Rf $(IMAGE_DIR)/lib/javaws.jar $(TMP_DEPLOY_IMAGE_DIR)/lib
	$(CP) -Rf $(IMAGE_DIR)/lib/deploy $(TMP_DEPLOY_IMAGE_DIR)/lib
	$(CP) -Rf $(IMAGE_DIR)/lib/security $(TMP_DEPLOY_IMAGE_DIR)/lib
endif 
  ifneq ($(PLATFORM), windows)
	if [ -r $(IMAGE_DIR) ]; then \
	  $(CP) -Rf $(IMAGE_DIR)/bin $(TMP_DEPLOY_IMAGE_DIR); \
	  $(MKDIR) -p $(TMP_DEPLOY_IMAGE_DIR)/javaws; \
 	  $(LN) -sf ../bin/javaws $(TMP_DEPLOY_IMAGE_DIR)/javaws/javaws ; \
	fi
  else # PLATFORM
	if [ -r $(IMAGE_DIR) ]; then \
	  $(CP) -Rf $(IMAGE_DIR)/bin/*.exe $(TMP_DEPLOY_IMAGE_DIR)/bin; \
	  $(CP) -Rf $(IMAGE_DIR)/bin/*.dll $(TMP_DEPLOY_IMAGE_DIR)/bin; \
	fi
  endif
	@# Now take care of the deploy common jar
	if [ -f $(DEPLOY_COMMON_JAR) ]; then \
	  $(CP) $(DEPLOY_COMMON_JAR) $(TMP_DEPLOY_IMAGE_DIR)/lib/; \
	fi
  ifeq ($(PLATFORM), windows)
    ifeq ($(ARCH_DATA_MODEL), 32)
	@# Copy JQS files
	$(CP) -f $(OUTPUTDIR)/bin/jqs.exe $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CP) -f $(OUTPUTDIR)/bin/jqsnotify.exe $(TMP_DEPLOY_IMAGE_DIR)/bin
	$(CD) $(OUTPUTDIR)/lib/deploy; $(FIND) jqs -print | $(CPIO) -pdum \
             $(TMP_DEPLOY_IMAGE_DIR)/lib/deploy
    endif
  endif
	@# Now copy deploy image into the jre image
	$(CD) $(TMP_DEPLOY_IMAGE_DIR) ; $(FIND) . -depth -print | $(CPIO) -pdum $(JRE_IMAGE_DIR)
	@# all done with plugin image



######################################################
# plugin-JDK Image
######################################################
deploy-jdk-image::
	@#
	@# Grab tmp-plugin-jre.
	@#
	$(MKDIR) -p $(JDK_IMAGE_DIR)/jre
	$(CD) $(TMP_DEPLOY_IMAGE_DIR) ; $(FIND) . -depth -print | $(CPIO) -pdum $(JDK_IMAGE_DIR)/jre
	@#
	$(MKDIR) -p $(JDK_IMAGE_DIR)/bin
	if [ -r $(BINDIR)/HtmlConverter$(EXE_SUFFIX) ]; then \
	    $(CP) $(BINDIR)/HtmlConverter$(EXE_SUFFIX) $(JDK_IMAGE_DIR)/bin; \
	fi
	if [ -r $(IMAGE_DIR)/bin/javaws$(EXE_SUFFIX) ]; then \
	    $(CP) $(IMAGE_DIR)/bin/javaws$(EXE_SUFFIX) $(JDK_IMAGE_DIR)/bin; \
	fi
	if [ -r $(BINDIR)/jcontrol ]; then \
	    $(CP) $(BINDIR)/jcontrol $(JDK_IMAGE_DIR)/bin; \
	    $(RM) $(JDK_IMAGE_DIR)/bin/ControlPanel; \
	    $(LN) -sf ./jcontrol $(JDK_IMAGE_DIR)/bin/ControlPanel; \
	fi
	$(MKDIR) -p $(JDK_IMAGE_DIR)/lib
	if [ -r $(LIBDIR)/htmlconverter.jar ]; then \
	    $(CP) $(LIBDIR)/htmlconverter.jar $(JDK_IMAGE_DIR)/lib; \
	fi
	$(MKDIR) -p $(JDK_IMAGE_DIR)/bin
	if [ -r $(BINDIR)/packager$(EXE_SUFFIX) ]; then \
	    $(CP) $(BINDIR)/packager$(EXE_SUFFIX) $(JDK_IMAGE_DIR)/bin; \
	fi
	$(MKDIR) -p $(JDK_IMAGE_DIR)/bin
	if [ -r $(BINDIR)/beanreg.dll ]; then \
	    $(CP) $(BINDIR)/beanreg.dll $(JDK_IMAGE_DIR)/bin; \
	fi
	@#
	@# Plugin demos for web browsers
	@#
	$(RM) -r $(DEMODIR)/plugin
	$(MKDIR) -p $(DEMODIR)/plugin
	for demos in applets jfc; do \
	    $(CP) -r $(DEMODIR)/$${demos} $(DEMODIR)/plugin; \
	    $(CHMOD) -R +w $(DEMODIR)/plugin/$${demos}; \
	    if [ -r $(ABS_HTMLCONVERTER) ]; then \
	        $(ABS_HTMLCONVERTER) -source $(DEMODIR)/plugin/$${demos} -subdirs \
		    || exit 1; \
	    fi; \
	done
	$(RM) -r $(DEMODIR)/plugin/*_BAK
	$(SED) 's/MKTG_VERSION/$(JDK_MKTG_VERSION)/g' \
	    $(PLUGIN_DEMO_SRC)/demo/applets.html \
	    > $(DEMODIR)/applets.html
	$(CP) $(DEMODIR)/applets.html $(DEMODIR)/plugin/applets.html
	$(MKDIR) -p $(JDK_IMAGE_DIR)/demo
	$(CP) $(DEMODIR)/applets.html $(JDK_IMAGE_DIR)/demo
	$(CP) -r -f $(DEMODIR)/plugin $(JDK_IMAGE_DIR)/demo
	@# Javaws sample
ifneq ($(BUILD_REGUTILS_ONLY), true)
	$(CP) -r -f $(IMAGE_DIR)/sample $(JDK_IMAGE_DIR)
endif
	@# Done with the JDK


######################################################
# clobber
######################################################
deploy-images-clobber::
	$(RM) $(TEMPDIR)/tmp.jar
	$(RM) -r $(JDK_IMAGE_DIR)/demo/applets
	$(RM) -r $(JDK_IMAGE_DIR)/demo/plugin
	$(RM) -r $(JDK_IMAGE_DIR)/sample/jnlp
ifeq ($(PLATFORM), linux)
	$(RM) -r $(OUTPUTDIR)/$(ARCH)
endif

	$(RM) -r $(TMP_DEPLOY_IMAGE_DIR)

deploy-images deploy-images-clobber::
	@$(ECHO) ">>>Finished making "$@" @ `$(DATE)` ..."; 

.PHONY: jinstall-int jinstall-us signexe-int signexe-us installer-int installer-us \
installer-all installer sample pack-jars \
deploy-jre-image deploy-jdk-image deploy-images-clobber
