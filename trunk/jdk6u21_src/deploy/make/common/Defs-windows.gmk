#
# @(#)Defs-windows.gmk	1.44 10/03/24
#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
# Uses default JDK for build

include $(CONTROL_TOPDIR)/make/common/Defs-windows.gmk

# for RC_FLAGS
include $(J2SE_TOPDIR)/make/common/Defs-windows.gmk

LIBDIR = $(OUTPUTDIR)/lib

ifeq ($(ARCH_DATA_MODEL), 64)
    MIDL_PATH = $(ALT_DEPLOY_MSSDK)/bin
else
    MIDL_PATH = $(COMPILER_PATH)
endif

BUNDLE_SUFFIX  = .exe
CLASSPATH_SEP  = $(CLASSPATH_SEPARATOR)
JUMP_EXE       = $(BIN_DIR)/javaws.exe
PLATFORM_SRC   = $(DEPLOY_TOPDIR)/src/javaws/win32

C_FLAGS_COMMON = -nologo -DWIN32 \
	/Fd"$(OBJDIR)/" $(MS_RUNTIME_OPTION) $(MS_RUNTIME_DEBUG_OPTION) \
	-I$(DEPLOY_TOPDIR)/src/javaws/share/native \
	-I$(DEPLOY_TOPDIR)/src/javaws/win32/native \
        -I$(DEPLOY_TOPDIR)/src/common/windows/native \
	-I$(GENHDIR) -D$(ARCH)

ifeq ($(ARCH), amd64)
    LINK_FLAGS_COMMON = kernel32.lib user32.lib gdi32.lib winspool.lib \
	comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
	uuid.lib odbc32.lib odbccp32.lib wsock32.lib wininet.lib urlmon.lib ws2_32.lib bufferoverflowu.lib crypt32.lib $(LIBS) /nologo \
	/subsystem:windows /incremental:no /machine:$(LIBARCH)
else
    LINK_FLAGS_COMMON = kernel32.lib user32.lib gdi32.lib winspool.lib \
	comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib \
	uuid.lib odbc32.lib odbccp32.lib wsock32.lib wininet.lib urlmon.lib ws2_32.lib $(LIBS) /nologo \
	/subsystem:windows /incremental:no /machine:$(LIBARCH)
endif

C_FLAGS_OPT = /Ox /Os $(GX_OPTION) /Zi /DNDEBUG
C_FLAGS_DBG = $(GX_OPTION) /Gm /Zi /Od /FD 
ifeq ($(ARCH_DATA_MODEL), 32)
    C_FLAGS_DBG += /GZ /ZI
else
    # To detect 64-bit portability issues, remove once the porting is done
    C_FLAGS_OPT += /Wp64
    C_FLAGS_DBG += /Wp64
endif

LINK_FLAGS_OPT = -nologo -map -mapinfo:exports -mapinfo:lines -incremental:no -debug -opt:ref
LINK_FLAGS_DBG = -nologo -map -mapinfo:exports -mapinfo:lines -incremental:no -debug -opt:noref

 
ifeq ($(ARCH_DATA_MODEL), 64)
    LINK_FLAGS_OPT += -nodefaultlib:libc.lib
endif

ifdef JDK_UPDATE_VERSION
    JAVAWS_CONVERT_JDK_UPDATE_VER := $(shell $(ECHO) $(JDK_UPDATE_VERSION) | $(TR) "abcde" "12345")
    JAVAWS_CAB_CHAR1 := $(shell $(ECHO) $(JAVAWS_CONVERT_JDK_UPDATE_VER) | $(NAWK) '{print substr($$1, 1, 1);}')
    JAVAWS_CAB_CHAR2 := $(shell $(ECHO) $(JAVAWS_CONVERT_JDK_UPDATE_VER) | $(NAWK) '{print substr($$1, 2, 1);}')
    JAVAWS_CAB_CHAR3 := $(shell $(ECHO) $(JAVAWS_CONVERT_JDK_UPDATE_VER) | $(NAWK) '{print substr($$1, 3, 1);}')
    ifeq ($(JAVAWS_CAB_CHAR3),)
      JAVAWS_CAB_CHAR3 := 0
    endif
    ifeq ($(JAVAWS_CAB_CHAR1), 0)
      JAVAWS_CAB_VERSION := $(JAVAWS_CAB_CHAR2)$(JAVAWS_CAB_CHAR3)
    else
      JAVAWS_CAB_VERSION := $(JAVAWS_CAB_CHAR1)$(JAVAWS_CAB_CHAR2)$(JAVAWS_CAB_CHAR3)
    endif
else
    JAVAWS_CAB_VERSION := 0
    JAVAWS_CAB_CHAR1 := 0
    JAVAWS_CAB_CHAR2 := 0
endif

# versioning for windows
JAVAWS_CONVERT_MAJOR = "s/_JAVAWS_MAJOR_VER/$(JDK_MAJOR_VERSION)/g"
JAVAWS_CONVERT_MINOR = "s/_JAVAWS_MINOR_VER/$(JDK_MINOR_VERSION)/g"
JAVAWS_CONVERT_MICRO = "s/_JAVAWS_MICRO_VER/$(JDK_MICRO_VERSION)/g"
JAVAWS_CONVERT_JDK   = "s/_JAVAWS_JDK_VER/\"$(JDK_VERSION)\"/g"
JAVAWS_CONVERT_FULL  = "s/_JAVAWS_FULL_VER/$(FULL_VERSION)/g"

ifndef (JDK_UPDATE_VERSION)
  JAVAWS_CAB_VER = "s/_JAVAWS_CAB_VER/0/g"
  JAVAWS_CONVERT_UPDATE = "s/_JAVAWS_UPDATE_VER/NULL/g"
else
  JAVAWS_CAB_VER = "s/_JAVAWS_CAB_VER/$(JAVAWS_CAB_VERSION)/g"
  JAVAWS_CONVERT_UPDATE = "s/_JAVAWS_UPDATE_VER/$(JDK_UPDATE_VERSION)/g"
endif

JAVAWS_SUBSTITUTE_VERSIONS = $(SED) -e $(JAVAWS_CONVERT_MAJOR) -e $(JAVAWS_CONVERT_MINOR) -e $(JAVAWS_CONVERT_MICRO) -e $(JAVAWS_CONVERT_FULL) -e $(JAVAWS_CAB_VER) -e $(JAVAWS_CONVERT_JDK) -e $(JAVAWS_CONVERT_UPDATE)

# HOTSPOT_KERNEL_PATH: location of kernel jvm library file.
ifeq ($(ARCH_DATA_MODEL), 32)
  ifdef ALT_HOTSPOT_KERNEL_PATH
     HOTSPOT_KERNEL_PATH := $(call FullPath,$(ALT_HOTSPOT_KERNEL_PATH))
  else
    # The default HOTSPOT_IMPORT_PATH does not currently include the kernel vm.  
    # Look in alternate places if necessary.
    _HOTSPOT_KERNEL_PATH1 = $(HOTSPOT_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/kernel
    _HOTSPOT_KERNEL_PATH2 = $(PROMOTED_BUILD_DISTDIR)/hotspot/import/$(ARCH_VM_SUBDIR)/kernel
     HOTSPOT_KERNEL_PATH := $(call DirExists,$(_HOTSPOT_KERNEL_PATH1),$(_HOTSPOT_KERNEL_PATH2),)
  endif
  HOTSPOT_KERNEL_PATH:=$(call AltCheckSpaces,HOTSPOT_KERNEL_PATH)
  HOTSPOT_KERNEL_PATH:=$(call AltCheckValue,HOTSPOT_KERNEL_PATH)
endif

# Only define 7-Zip LZMA file compression variables if it is available

EC_TMP = $(shell if [ -d $(DEPLOY_TOPDIR)/make/lzma ] ; then \
  $(ECHO) true ; \
else \
  $(ECHO) false ; \
fi )
ifeq ($(EC_TMP), true)
  EXTRA_COMP_LIB_NAME = lzma.dll
  EXTRA_COMP_PATH = $(OUTPUTDIR)/tmp/deploy/lzma/win32/obj
  EXTRA_COMP_CMD_PATH = $(EXTRA_COMP_PATH)/lzma.exe
  EXTRA_COMP_LIB_PATH = $(EXTRA_COMP_PATH)/$(EXTRA_COMP_LIB_NAME)
endif

# define JKernel and JQS build switch 
ifeq ($(ARCH_DATA_MODEL), 32)
  BUILD_JKERNEL=true
  BUILD_JQS=true
endif
