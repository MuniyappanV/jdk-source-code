#
# Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL.  Use is subject to license terms.

#
# @(#)sanity-rules.gmk	1.42 10/03/05

################################################################
# SANITY
################################################################

sanity:: pre-sanity settings insane environment

ifeq ($(BUILD_HOTSPOT), true)
  sanity:: hotspot-sanity
endif

ifeq ($(BUILD_MOTIF), true)
  sanity:: motif-sanity
endif

ifeq ($(BUILD_DEPLOY), true)
  sanity:: deploy-sanity
endif

ifeq ($(BUILD_J2SE), true)
  sanity:: j2se-sanity 
endif

ifeq ($(BUILD_INSTALL), true)
  sanity:: install-sanity
endif

ifndef DEV_ONLY
  ifndef SKIP_COMPARE_IMAGES
    sanity:: compare-images-sanity
  endif
endif

sanity:: post-sanity

source-sanity : pre-sanity alt_bootdir bootdir post-sanity

$(ERROR_FILE) $(WARNING_FILE) $(MESSAGE_FILE):
	@$(prep-target)

purge-sanity: $(ERROR_FILE) $(WARNING_FILE) $(MESSAGE_FILE)
	-@$(RM) $(ERROR_FILE) $(WARNING_FILE) $(MESSAGE_FILE)

pre-sanity: purge-sanity 

# this should be the last rule in any target's sanity rule.
post-sanity post-sanity-hotspot post-sanity-j2se post-sanity-motif post-sanity-install post-sanity-deploy:
	@if [ -r $(MESSAGE_FILE) ]; then \
	  $(ECHO) "" ; \
	  $(CAT) $(MESSAGE_FILE) ; \
	fi
	@if [ -r $(WARNING_FILE) ]; then \
	  $(CAT) $(WARNING_FILE) ; \
	fi
	@if [ "x$(INSANE)" != x ]; then \
	  $(ECHO) "INSANE mode requested. \n" \
	    "Sanity will not force a build termination, even with errors.\n" \
	    "" >> $(ERROR_FILE); \
	fi
	@if [ -r $(ERROR_FILE) ]; then \
	  if [ "x$(INSANE)" = x ]; then \
	    $(ECHO) "Exiting because of the above error(s). \n" \
	      "">> $(ERROR_FILE); \
	  fi ; \
	  $(CAT) $(ERROR_FILE) ; \
	  if [ "x$(INSANE)" = x ]; then \
	    exit 1 ; \
	  fi ; \
	fi
ifdef PEDANTIC
	@if [ -r $(WARNING_FILE) ]; then \
	  $(ECHO) "PEDANTIC mode requested. \n" \
	    "Exiting because of the above warning(s). \n" \
	    "" >> $(ERROR_FILE); \
	  $(CAT) $(ERROR_FILE) ; \
	  exit 1 ; \
	fi
endif
	@if [ ! -r $(ERROR_FILE) ]; then \
	  $(ECHO) "Sanity check passed." ; \
	fi

insane:
ifdef INSANE
	@$(ECHO) "WARNING: You are building in 'INSANE' mode. You \n" \
	   "        should not use this mode, and in fact, \n" \
	   "        it may be removed at any time. If you \n" \
	   "        have build problems as a result of using \n" \
	   "        INSANE mode, then you should not expect \n" \
	   "        assistance from anyone with the problems \n" \
	   "        or consequences you experience. \n" \
	   "" >> $(WARNING_FILE)
endif

# Get list of environment variables set that we do not want set
ifdef ALT_HOTSPOT_SERVER_PATH
  DO_NOT_SET_LIST += ALT_HOTSPOT_SERVER_PATH
endif
ifdef ALT_HOTSPOT_CLIENT_PATH
  DO_NOT_SET_LIST += ALT_HOTSPOT_CLIENT_PATH
endif
ifdef ALT_HOTSPOT_LIB_PATH
  DO_NOT_SET_LIST += ALT_HOTSPOT_LIB_PATH
endif

# Error message for environment variable set that should not be
%.do_not_set:
	@$(ECHO) "ERROR: Your build environment has the variable\n" \
	   "        $* defined. When building\n" \
	   "        using the control workspace this variable should\n" \
	   "        not be set. Please unset it and restart your build. \n" \
	   "" >> $(ERROR_FILE)

# Check the environment variables	
environment: $(DO_NOT_SET_LIST:%=%.do_not_set)
ifneq ($(BUILD_HOTSPOT), true)
	@$(ECHO) "WARNING: You are not building HOTSPOT workspace from\n" \
           "        the control build. Hotspot libs will be obtained from \n" \
           "        the location set in ALT_HOTSPOT_IMPORT_PATH. \n" \
           "" >> $(WARNING_FILE)
endif
ifneq ($(BUILD_MOTIF), true)
  ifeq ($(PLATFORM), linux)
	@$(ECHO) "WARNING: You are not building MOTIF workspace from\n" \
	   "        the control build. MOTIF libs will be obtained from \n" \
	   "        the usual location or from the ALT_MOTIF_DIR, \n" \
	   "        location, if it is defined.\n" \
	   "" >> $(WARNING_FILE)
  endif
endif
ifneq ($(BUILD_J2SE), true)
	@$(ECHO) "WARNING: Your are not building J2SE workspace from\n" \
	   "        the control build. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the jdk binaries.\n" \
	   "" >> $(WARNING_FILE)
endif
ifneq ($(BUILD_DEPLOY), true)
	@$(ECHO) "WARNING: Your are not building DEPLOY workspace from\n" \
	   "        the control build. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the plugin and javaws binaries.\n" \
	   "" >> $(WARNING_FILE)
endif
ifneq ($(BUILD_INSTALL), true)
	@$(ECHO) "WARNING: Your are not building INSTALL workspace from\n" \
	   "        the control build. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the installation bundles\n" \
	   "" >> $(WARNING_FILE)
endif
ifdef NO_DOCS
	@$(ECHO) "WARNING: Your build environment has the variable NO_DOCS\n" \
	   "        defined. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the documentation\n" \
	   "        build.\n" \
	   "" >> $(WARNING_FILE)
endif
ifdef NO_IMAGES
	@$(ECHO) "WARNING: Your build environment has the variable NO_IMAGES\n" \
	   "        defined. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the install images\n" \
	   "        and bundles.\n" \
	   "" >> $(WARNING_FILE)
endif
ifdef DEV_ONLY
	@$(ECHO) "WARNING: Your build environment has the variable DEV_ONLY\n" \
	   "        defined. This will result in a development-only\n" \
	   "        build of the J2SE workspace, lacking the documentation\n" \
	   "        build and installation bundles.\n" \
	   "" >> $(WARNING_FILE)
endif
ifdef J2RE_ONLY
	@$(ECHO) "WARNING: Your build environment has the variable\n" \
	   "        J2RE_ONLY defined. This will result in a runtime-only\n" \
	   "        build of the J2SE workspace, lacking the javac compiler\n" \
	   "        and other tools that are built as part of a full J2SDK build.\n" \
	   "" >> $(WARNING_FILE)
endif

###########################################################
# Check for existence of previous release jdk & jre bundle
###########################################################
compare-images-sanity:
ifndef DEV_ONLY
  ifndef SKIP_COMPARE_IMAGES
	@if [ ! -f $(PREVIOUS_JRE_BUNDLE) ]; then \
	  $(ECHO) "ERROR: You do not have access to the previous java release jre bundles. \n" \
	    "      Please check your access to \n" \
	    "          $(PREVIOUS_JRE_BUNDLE) \n" \
	    "      and/or check your value of ALT_PREVIOUS_RELEASE_PATH or ALT_PREVIOUS_JRE_FILE \n" \
	    "      This will affect you if you build the images target. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
	@if [ ! -f $(PREVIOUS_JDK_BUNDLE) ]; then \
	  $(ECHO) "ERROR: You do not have access to the previous java release sdk bundles. \n" \
	    "      Please check your access to \n" \
	    "          $(PREVIOUS_sdk_BUNDLE) \n" \
	    "      and/or check your value of ALT_PREVIOUS_RELEASE_PATH or ALT_PREVIOUS_JDK_FILE. \n" \
	    "      This will affect you if you build the images target. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
  endif
endif

######################################################
# if specified, ALT_BOOTDIR must point to non-relative path if set
######################################################
alt_bootdir:
ifdef ALT_BOOTDIR
	@if [ `$(ECHO) $(subst \,/,$(ALT_BOOTDIR)) | $(EGREP) -ci '^([a-z]:)?/'` -ne 1 ]; then \
	  $(ECHO) "ERROR: ALT_BOOTDIR must be an Absolute Path Name, \n" \
	    "      not a Relative Path Name. \n" \
	    "      The current value of ALT_BOOTDIR is \n" \
	    "          $(ALT_BOOTDIR) \n" \
	    "      Please fix this and continue your build. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi
endif

######################################################
# BOOTDIR must point to a valid JDK.
######################################################
JAVA_VERSION := $(shell $(BOOTDIR)/bin/java$(EXE_SUFFIX) -version 2>&1  | $(NAWK) -F'"' '{ print $$2 }')
JAVA_VERSION_OK := $(shell $(ECHO) $(JAVA_VERSION) | $(EGREP) -c '^1.6.[0-9]')
bootdir:
	@if [ -x $(BOOTDIR)/bin/java$(EXE_SUFFIX) ]; then \
	  if [ $(JAVA_VERSION_OK) -ne 1 ]; then \
	    $(ECHO) "ERROR: Your BOOTDIR environment variable does not point \n" \
	      "      to a valid JDK for bootstrapping this build. \n" \
	      "      A JDK $(JDK_MKTG_VERSION) source generation process must be \n" \
	      "      bootstrapped using JDK $(MINIMUM_JDK_VERSION) fcs (or later). \n" \
	      "      Apparently, your bootstrap JDK is version $(JAVA_VERSION) \n" \
	      "      Please update your ALT_BOOTDIR setting and start your build again. \n" \
	      "" >> $(ERROR_FILE) ; \
	  fi \
	else \
	  $(ECHO) "ERROR: BOOTDIR does not point to a valid Java 2 SDK \n" \
	    "      Check that you have access to \n" \
	    "          $(BOOTDIR)/bin/java$(EXE_SUFFIX) \n" \
	    "      and/or check your value of ALT_BOOTDIR. \n" \
	    "" >> $(ERROR_FILE) ; \
	fi

######################################################
# dump out the variable settings...
######################################################
settings:: 
	@$(ECHO) "Build Machine Information:" >> $(MESSAGE_FILE)
ifeq ($(PLATFORM), windows)
	@$(ECHO) "   build machine = $(COMPUTERNAME)"  >> $(MESSAGE_FILE)
else
	@$(ECHO) "   build machine = $(HOSTNAME)"  >> $(MESSAGE_FILE)
endif
	@$(ECHO) "" >> $(MESSAGE_FILE)
	@$(ECHO) "Build Directory Structure:" >> $(MESSAGE_FILE)
	@$(ECHO) "   CWD = `$(PWD)`" >> $(MESSAGE_FILE)
	@$(ECHO) "   TOPDIR = $(TOPDIR)"  >> $(MESSAGE_FILE)
	@$(ECHO) "   CONTROL_TOPDIR = $(CONTROL_TOPDIR)"  >> $(MESSAGE_FILE)
ifeq ($(BUILD_HOTSPOT), true)
	@$(ECHO) "   HOTSPOT_TOPDIR = $(HOTSPOT_TOPDIR)"  >> $(MESSAGE_FILE)
endif
ifeq ($(BUILD_J2SE), true)
	@$(ECHO) "   J2SE_TOPDIR = $(J2SE_TOPDIR)"  >> $(MESSAGE_FILE)
endif
ifeq ($(BUILD_MOTIF), true)
	@$(ECHO) "   MOTIF_TOPDIR = $(MOTIF_TOPDIR)"  >> $(MESSAGE_FILE)
endif
ifeq ($(BUILD_DEPLOY), true)
  ifeq ($(ARCH_DATA_MODEL), 32)
	@$(ECHO) "   DEPLOY_TOPDIR = $(DEPLOY_TOPDIR)"  >> $(MESSAGE_FILE)
  endif
endif
ifeq ($(BUILD_INSTALL), true)
	@$(ECHO) "   INSTALL_TOPDIR = $(INSTALL_TOPDIR)"  >> $(MESSAGE_FILE)
endif
ifeq ($(BUILD_PUBS), true)
        @$(ECHO) "   PUBS_TOPDIR = $(PUBS_TOPDIR)"  >> $(MESSAGE_FILE)
endif
	@$(ECHO) "" >> $(MESSAGE_FILE)
ifndef DEV_ONLY
  ifndef SKIP_COMPARE_IMAGES
	@$(ECHO) "External File/Binary Locations:" >> $(MESSAGE_FILE)
	@$(ECHO) "   PREVIOUS_JRE_BUNDLE = $(PREVIOUS_JRE_BUNDLE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   PREVIOUS_JDK_BUNDLE = $(PREVIOUS_JDK_BUNDLE) " >> $(MESSAGE_FILE)
	@$(ECHO) "" >> $(MESSAGE_FILE)
  endif
endif
	@$(ECHO) "Build Directives:" >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_HOTSPOT = $(BUILD_HOTSPOT) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_MOTIF   = $(BUILD_MOTIF) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_J2SE    = $(BUILD_J2SE) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_DEPLOY  = $(BUILD_DEPLOY) " >> $(MESSAGE_FILE)
	@$(ECHO) "   BUILD_INSTALL = $(BUILD_INSTALL) " >> $(MESSAGE_FILE)
	@$(ECHO) "" >> $(MESSAGE_FILE)

.PHONY: sanity settings pre-sanity hotspot-sanity motif-sanity insane j2se-sanity \
	post-sanity post-sanity-hotspot post-sanity-j2se post-sanity-motif \
	post-sanity-install install-sanity deploy-sanity post-sanity-deploy \
	compare-images-sanity alt_bootdir bootdir
