#
# @(#)Library.gmk	1.127 10/03/23
#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

#
# Generic makefile for building shared libraries.
#

# WARNING: This file is shared with other workspaces.
#          So when it includes other files, it must use J2SE_TOPDIR.
#

include $(J2SE_TOPDIR)/make/common/Classes.gmk

#
# It is important to define these *after* including Classes.gmk
# in order to override the values defined inthat makefile.
#

ifeq ($(LIBRARY), fdlibm)
ifeq ($(PLATFORM),windows)
ACTUAL_LIBRARY_NAME = $(LIB_PREFIX)$(LIBRARY).$(FDDLIBM_SUFFIX)
ACTUAL_LIBRARY_DIR = $(OBJDIR)
else # PLATFORM
ACTUAL_LIBRARY_NAME = $(LIB_PREFIX)$(LIBRARY).$(ARCH).$(FDDLIBM_SUFFIX)
ACTUAL_LIBRARY_DIR = $(OBJDIR)
endif #PLATFORM
else # LIBRARY
ACTUAL_LIBRARY_NAME = $(LIB_PREFIX)$(LIBRARY).$(LIBRARY_SUFFIX)
ACTUAL_LIBRARY_DIR = $(LIB_LOCATION)
endif
ACTUAL_LIBRARY = $(ACTUAL_LIBRARY_DIR)/$(ACTUAL_LIBRARY_NAME)

library:: $(ACTUAL_LIBRARY)

FILES_o   = $(patsubst %.c,   %.$(OBJECT_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_c))))
FILES_o  += $(patsubst %.s,   %.$(OBJECT_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_s))))
FILES_o  += $(patsubst %.cpp, %.$(OBJECT_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_cpp))))

ifneq ($(PLATFORM),windows)
ifeq ($(INCREMENTAL_BUILD),true)
FILES_d   = $(patsubst %.c,   %.$(DEPEND_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_c))))
FILES_d  += $(patsubst %.cpp, %.$(DEPEND_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_cpp))))
endif # INCREMENTAL_BUILD
endif # PLATFORM

ifeq ($(PLATFORM),solaris)
# List of all lint files, one for each .c file (only for C)
FILES_ln   = $(patsubst %.c,   %.$(LINT_SUFFIX), $(addprefix $(OBJDIR)/, $(notdir $(FILES_c))))
endif

#
# C++ libraries must be linked with CC.
#
ifdef CPLUSPLUSLIBRARY
LINKER=$(LINK.cc)
else
LINKER=$(LINK.c)
endif

# FIXUP: unpack needs the zip .o files. So we must build zip?
#     or fix unpack makefile so it uses Program.gmk.
ifneq ($(IMPORT_NATIVE_BINARIES),true)
  COMPILE_IT=true
else
  ifeq ($(LIBRARY),zip)
    COMPILE_IT=true
  else
    COMPILE_IT=false
  endif
endif

# We either need to import (copy) libraries in, or build them
ifeq ($(COMPILE_IT),true)

$(ACTUAL_LIBRARY):: $(INIT) $(TEMPDIR) $(LIBDIR) $(BINDIR) $(EXTDIR) classheaders

ifeq ($(PLATFORM), windows)

#
# Library building rules.
#

$(LIBRARY).lib:: $(OBJDIR)

ifeq ($(LIBRARY), fdlibm)
$(ACTUAL_LIBRARY):: $(OBJDIR)/$(LIBRARY).lib

$(OBJDIR)/$(LIBRARY).lib:: $(OBJDIR)/$(LIBRARY).lcf
	@$(prep-target)
	$(LIBEXE) -NODEFAULTLIB:MSVCRT -out:$@ -nologo \
		@$(OBJDIR)/$(LIBRARY).lcf $(OTHER_LCF) $(LDLIBS_COMMON)
else # LIBRARY
# build it into $(OBJDIR) so that the other generated files get put 
# there, then copy just the DLL (and MAP file) to the requested directory.
#
$(ACTUAL_LIBRARY):: $(OBJDIR)/$(LIBRARY).lcf
	@$(prep-target)
	@$(MKDIR) -p $(OBJDIR)
	$(LINK) -dll -out:$(OBJDIR)/$(@F) \
	  -map:$(OBJDIR)/$(LIBRARY).map \
	  $(LFLAGS) @$(OBJDIR)/$(LIBRARY).lcf \
	  $(OTHER_LCF) $(JAVALIB) $(LDLIBS)
	$(CP) $(OBJDIR)/$(@F) $@
	$(CP) $(OBJDIR)/$(LIBRARY).map $(@D)
	$(CP) $(OBJDIR)/$(LIBRARY).pdb $(@D)

endif # LIBRARY

$(OBJDIR)/$(LIBRARY).lcf: $(OBJDIR)/$(LIBRARY).res $(FILES_o) $(FILES_m)
	@$(prep-target)
	@$(MKDIR) -p $(TEMPDIR)
	@$(ECHO) $(FILES_o) > $@ 
ifndef LOCAL_RESOURCE_FILE
	@$(ECHO) $(OBJDIR)/$(LIBRARY).res >> $@
endif
	@$(ECHO) Created $@ 

RC_FLAGS += /D "J2SE_FNAME=$(LIBRARY).dll" \
            /D "J2SE_INTERNAL_NAME=$(LIBRARY)" \
            /D "J2SE_FTYPE=0x2L"

$(OBJDIR)/$(LIBRARY).res: $(VERSIONINFO_RESOURCE)
ifndef LOCAL_RESOURCE_FILE
	@$(prep-target)
	$(RC) $(RC_FLAGS) $(CC_OBJECT_OUTPUT_FLAG)$(@) $(VERSIONINFO_RESOURCE)
endif

#
# Install a .lib file if required.
#
ifeq ($(INSTALL_DOT_LIB), true)
$(ACTUAL_LIBRARY):: $(LIBDIR)/$(LIBRARY).lib

clean:: 
	-$(RM) $(LIBDIR)/$(LIBRARY).lib

$(LIBDIR)/$(LIBRARY).lib:: $(OBJDIR)/$(LIBRARY).lib
	$(install-file)

$(LIBDIR)/$(LIBRARY).dll:: $(OBJDIR)/$(LIBRARY).dll
	$(install-file)

endif # INSTALL_DOT_LIB

else # PLATFORM

#
# PARALLEL_COMPILES: Will trigger compilations (just compilations) to
#   happen in parallel. Greatly decreases build time, even on single CPU
#   machines, more so on multiple CPU machines. Default is 2 compiles
#   at a time, but can be adjusted with ALT_PARALLEL_COMPILE_JOBS.
#   Note that each .d file will also be dependent on it's .o file, see
#   Rules.gmk.
#

$(OBJDIR)/.files_compiled: $(FILES_d) $(FILES_o)
	@$(ECHO) "$<" >> $@

ifeq ($(PARALLEL_COMPILES),true)

.PHONY: parallel_compile

parallel_compile:
	@$(ECHO) "Begin parallel compiles: $(shell $(PWD))"
	@$(MAKE) -j $(PARALLEL_COMPILE_JOBS) $(OBJDIR)/.files_compiled
	@$(ECHO) "Done with parallel compiles: $(shell $(PWD))"

$(ACTUAL_LIBRARY):: parallel_compile

endif

#
# On Solaris, use mcs to write the version into the comment section of
# the shared library.  On other platforms set this to false at the
# make command line.
#
$(ACTUAL_LIBRARY):: $(OBJDIR)/.files_compiled $(FILES_m) $(FILES_reorder)
	@$(prep-target)
	@$(ECHO) "STATS: LIBRARY=$(LIBRARY), PRODUCT=$(PRODUCT), _OPT=$(_OPT)"
	@$(ECHO) "Rebuilding $@ because of $?"
ifeq ($(LIBRARY), fdlibm)
	$(AR) -r $@ $(FILES_o)
else # LIBRARY
	$(LINKER) $(SHARED_LIBRARY_FLAG) -o $@ $(FILES_o) $(LDLIBS)
ifeq ($(WRITE_LIBVERSION),true)
	$(MCS) -d -a "$(FULL_VERSION)" $@
endif # WRITE_LIBVERSION
endif # LIBRARY

endif # PLATFORM

#
# Cross check all linted files against each other
#
ifeq ($(PLATFORM),solaris)
lint.errors : $(FILES_ln)
	$(LINT.c) $(FILES_ln) $(LDLIBS) 
endif

else  # COMPILE_IT

ifneq ($(LIBRARY), fdlibm)
# Copies in the file from the JDK_IMPORT_PATH area
$(ACTUAL_LIBRARY_DIR)/%: $(JDK_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/%
	@$(install-file)
$(ACTUAL_LIBRARY_DIR)/%: $(JDK_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/native_threads/%
	@$(install-file)
$(ACTUAL_LIBRARY_DIR)/%: $(JDK_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/headless/%
	@$(install-file)
$(ACTUAL_LIBRARY_DIR)/%: $(JDK_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/motif21/%
	@$(install-file)
$(ACTUAL_LIBRARY_DIR)/%: $(JDK_IMPORT_PATH)/$(ARCH_VM_SUBDIR)/xawt/%
	@$(install-file)
else
$(ACTUAL_LIBRARY_DIR)/%:
	@$(prep-target)
endif

endif # COMPILE_IT

#
# Class libraries with JNI native methods get a include to the package.
#
ifdef PACKAGE
vpath %.c $(PLATFORM_SRC)/native/$(PKGDIR)
vpath %.c $(SHARE_SRC)/native/$(PKGDIR)
OTHER_INCLUDES += -I$(SHARE_SRC)/native/common -I$(PLATFORM_SRC)/native/common
OTHER_INCLUDES += -I$(SHARE_SRC)/native/$(PKGDIR) \
		  -I$(PLATFORM_SRC)/native/$(PKGDIR)
endif

#
# Clean/clobber rules
#
clean::
	$(RM) -r $(ACTUAL_LIBRARY)
	$(RM) $(OBJDIR)/.files_compiled

clobber:: clean

#
# INCREMENTAL_BUILD means that this workspace will be built over and over
#   possibly incrementally. This means tracking the object file dependencies
#   on include files so that sources get re-compiled when the include files
#   change. When building from scratch and doing a one time build (like
#   release engineering or nightly builds) set INCREMENTAL_BUILD=false.
#

ifneq ($(PLATFORM), windows)
ifeq ($(INCREMENTAL_BUILD),true)

#
# Workaround: gnumake sometimes says files is empty when it shouldn't
#    was:  files := $(foreach file, $(wildcard $(OBJDIR)/*.$(DEPEND_SUFFIX)), $(file))
#
files := $(shell $(LS) $(OBJDIR)/*.$(DEPEND_SUFFIX) 2>/dev/null)

#
# Only include these files if we have any.
#
ifneq ($(strip $(files)),)

include $(files)

endif # files

endif # INCREMENTAL_BUILD
endif # PLATFORM

#
# Default dependencies
#

all: build

build: library

debug:
	$(MAKE) VARIANT=DBG build

fastdebug:
	$(MAKE) VARIANT=DBG FASTDEBUG=true build

.PHONY: all build debug fastdebug

