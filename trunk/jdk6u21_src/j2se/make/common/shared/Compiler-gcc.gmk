#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
# @(#)Compiler-gcc.gmk	1.11 10/03/23
#
# WARNING: This file is shared with other workspaces.
#

#
# GCC Compiler settings
#

COMPILER_NAME=GCC

USER_COMPILER_TOOLS=0

ifneq (,$(ALT_COMPILER_CC))
  ifneq (,$(ALT_COMPILER_CPP))
    ifneq (,$(ALT_COMPILER_CXX))
      USER_COMPILER_TOOLS=1
    endif
  endif
endif

ifeq (1,$(USER_COMPILER_TOOLS))
  CC            = $(ALT_COMPILER_CC)
  CPP           = $(ALT_COMPILER_CPP)
  CXX           = $(ALT_COMPILER_CXX)
  CCC           = $(ALT_COMPILER_CXX)
  #warning using USER_COMPILER_TOOLS
else
  #warning using COMPILER_PATH $(COMPILER_PATH)
endif

ifeq ($(PLATFORM), windows)

  # Settings specific to Windows, pretty stale, hasn't been used
  ifneq (1,$(USER_COMPILER_TOOLS))
    CC           = $(COMPILER_PATH)gcc
    CPP          = $(COMPILER_PATH)gcc -E
    CXX          = $(COMPILER_PATH)g++
    CCC          = $(COMPILER_PATH)g++
  endif
  LIBEXE       = $(COMPILER_PATH)lib
  LINK         = $(COMPILER_PATH)link
  RC           = $(MSDEVTOOLS_PATH)link
  LINK32       = $(LINK)
  RSC          = $(RC)
  # unset any GNU Make settings of MFLAGS and MAKEFLAGS which may mess up nmake
  NMAKE          = MFLAGS= MAKEFLAGS= $(COMPILER_PATH)nmake -nologo
  ifeq ($(ARCH_DATA_MODEL), 32)
    CC_VER  = UNKNOWN
    CC_TYPE = UNKNOWN
  else
    CC_VER  = UNKNOWN
    CC_TYPE = UNKNOWN
  endif
  _LINK_VER :=$(shell $(LINK) 2>&1 | $(HEAD) -n 1)
  LINK_VER  :=$(call GetVersion,"$(_LINK_VER)")

endif

ifeq ($(PLATFORM), linux)

  # Settings specific to Linux
  ifneq (1,$(USER_COMPILER_TOOLS))
    CC          = $(COMPILER_PATH)gcc
    CPP         = $(COMPILER_PATH)gcc -E
    CXX         = $(COMPILER_PATH)g++
  endif

  # statically link libstdc++ before C++ ABI is stablized on Linux
  STATIC_CXX    = true
  ifeq ($(STATIC_CXX),true)
    # g++ always dynamically links libstdc++, even we use "-Wl,-Bstatic -lstdc++"
    # We need to use gcc to statically link the C++ runtime. gcc and g++ use
    # the same subprocess to compile C++ files, so it is OK to build using gcc.
    CXX         = $(CC)
  endif

  ifeq ($(ARCH_DATA_MODEL), 32)
    REQUIRED_CC_VER = 3.2
    REQUIRED_GCC_VER = 3.2.1*
    REQUIRED_GCC_VER_INT = 3.2.1-7a
  else
    ifeq ($(ARCH), amd64)
      REQUIRED_CC_VER = 3.2
      REQUIRED_GCC_VER = 3.2.*
    endif
    ifeq ($(ARCH), ia64)
      REQUIRED_CC_VER = 3.2
      REQUIRED_GCC_VER = 2.9[56789].*
    endif
  endif
  # Option used to create a shared library
  SHARED_LIBRARY_FLAG = -shared -mimpure-text
  SUN_COMP_VER := $(shell $(CC) --verbose 2>&1 )

endif

ifeq ($(PLATFORM), solaris)

  # Settings specific to Solaris
  ifneq (1,$(USER_COMPILER_TOOLS))
    CC            = $(COMPILER_PATH)gcc
    CPP           = $(COMPILER_PATH)gcc -E
    CXX           = $(COMPILER_PATH)g++
  endif
  REQUIRED_CC_VER = 3.2

  # Option used to create a shared library
  SHARED_LIBRARY_FLAG = -G
  # But gcc is still needed no matter what on 32bit
  ifeq ($(ARCH_DATA_MODEL), 32)
    REQUIRED_GCC_VER = 2.95
    ifneq (1,$(USER_COMPILER_TOOLS))
      GCC =$(GCC_COMPILER_PATH)gcc
    endif
    _GCC_VER :=$(shell $(GCC) -dumpversion 2>&1 )
    GCC_VER  :=$(call GetVersion,"$(_GCC_VER)")
  endif

endif

# Get gcc version
_CC_VER :=$(shell $(CC) -dumpversion 2>&1 )
CC_VER  :=$(call GetVersion,"$(_CC_VER)")

