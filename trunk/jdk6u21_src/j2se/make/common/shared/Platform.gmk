#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
# @(#)Platform.gmk	1.32 10/03/23
#
# WARNING: This file is shared with other workspaces.
#

#
# Shared platform (OS/ARCH) variable settings for the JDK builds.
#
# Includes basic system requirements, versions of utilities required,
#   suffixes on files, and basic defaults attributed to the build platform.
#

#
# Assumes some basic unix system utilities (e.g. uname) are in the search path
#   in order to figure out the system.
#

ifndef PLATFORM_SHARED

PLATFORM_SHARED=done

# Possible Input variables:
#     SYSTEM_UNAME                the target system: SunOS, Linux, Windows_NT, CYGWIN
#     ARCH_DATA_MODEL             the target cpu bit width: 32 or 64
#     CROSS_COMPILE_ARCH          the target processor arch:
#                                   solaris 32: `uname -p`
#                                   solaris 64: `isainfo -n`
#                                   linux:      `uname -m`
#                                   windows: cross compile to ARCH needed
#                                            (must set ARCH_DATA_MODEL=64 too)
#     USER, LOGNAME               user name (runs logname, or id if not set)
#     PROCESSOR_IDENTIFIER        windows only: needed in environment
#
# (Also gets input by running the utilities uname, logname, isainfo, or id.)
#
# Variables set by this file:
#     SYSTEM_UNAME                what 'uname' says this system is
#     USER                        login name of user (minus blanks)
#     PLATFORM                    windows, solaris, or linux
#     VARIANT                     OPT or DBG, OPT is the default
#     OS_NAME                     solaris, linux, or nt
#     OS_VERSION                  specific version of os, 5.8, 2.4.9-e.3, etc.
#     OS_VENDOR                   company name
#     TEMP_DISK                   /tmp or C:/temp
#     ARCH_DATA_MODEL             32 or 64
#     ARCH                        sparc, i386, sparcv9, amd64, or ia64
#     ARCH_FAMILY                 sparc or i386
#     ARCHPROP                    sparc, i386, or x86
#     ARCH_VM_SUBDIR              jre/bin, jre/lib/sparc, etc.
#     LIBARCH                     sparc, i386, sparcv9, or amd64
#     DEV_NULL                    destination of /dev/null, NUL or /dev/NULL
#     CLASSPATH_SEPARATOR         separator in classpath, ; or :
#     LIB_PREFIX                  dynamic or static library prefix, lib or empty
#     LIB_SUFFIX                  static library file suffix, .lib or .a?
#     LIBRARY_SUFFIX              dynamic library file suffix, .dll or .so
#     OBJECT_SUFFIX               object file suffix, .o or .obj
#     EXE_SUFFIX                  executable file suffix, .exe or empty
#     BUNDLE_FILE_SUFFIX          suffix for bundles: .tar or .tar.gz
#     ISA_DIR                     solaris only: /sparcv9 or /amd64
#     LIBARCH32                   solaris only: sparc or i386
#     LIBARCH64                   solaris only: sparcv9 or amd64
#     REQUIRED_WINDOWS_NAME       windows only: basic name of windows 
#     REQUIRED_WINDOWS_VERSION    windows only: specific version of windows 
#     USING_CYGWIN                windows only: true or false
#     WINDOWS_NT_VERSION_STRING   windows only: long version name
#     USE_ONLY_BOOTDIR_TOOLS      windows only: bootdir java used only
#     REQUIRED_OS_VERSION         required OS version, e.g. 5.8, 2.4
#     REQUIRED_FREE_SPACE         minimum disk space needed for outputdir
#     ISHIELD_TEMP_MIN            windows only: minimum disk space in temp area
#     REQUIRED_ZIP_VER            required version of zip
#     REQUIRED_UNZIP_VER          required version of unzip
#     REQUIRED_DXSDK_VER          windows only: required version of DirectX
#     LINUX_VERSION_INFO          linux only: location of linux release file
#     REQUIRED_LINUX_VER          linux only: required version of linux
#     REQUIRED_LINUX_FULLVER      linux only: required full version of linux
#     REQUIRED_ALSA_VERSION       linux only: required version of ALSA

ifeq (,$(SYSTEM_UNAME))
    SYSTEM_UNAME := $(shell uname)
endif

REQUIRED_BOOT_VER = 1.6

# Don't define this unless it's not defined
ifndef VARIANT
  VARIANT=OPT
endif

# Platform settings specific to Solaris
ifeq ($(SYSTEM_UNAME), SunOS)
  PLATFORM = solaris
  OS_NAME = solaris
  OS_VERSION := $(shell uname -r)
  # Solaris sparc build can be either 32-bit or 64-bit.
  #   Default to 32, but allow explicit setting to 32 or 64.
  ifndef ARCH_DATA_MODEL
    ARCH_DATA_MODEL=32
  endif
  ifeq ($(ARCH_DATA_MODEL), 32)
    ifeq (,$(CROSS_COMPILE_ARCH))
      processor := $(shell uname -p)
    else
      processor := $(CROSS_COMPILE_ARCH)
    endif
    archExpr = case "$(processor)" in  \
                i[3-9]86) \
                    echo i586 \
                    ;; \
                sparc*)  \
                    echo sparc \
                    ;; \
                *) \
                    echo $(processor)  \
                    ;; \
        esac
    ARCH        := $(shell $(archExpr))
  else
    ifeq (,$(CROSS_COMPILE_ARCH))
      ARCH := $(shell isainfo -n)
    else
      ARCH := $(CROSS_COMPILE_ARCH)
    endif
    # ISA_DIR is used to locate 64-bit specific libraries which are generally
    # in the same general place as other libraries under the ./$(ARCH) directory
    ISA_DIR = /$(ARCH)
  endif
  # Need to maintain the jre/lib/i386 location for 32-bit Intel
  ifeq ($(ARCH), i586)
     ARCH_FAMILY = $(ARCH)
     LIBARCH     = i386
     # Value of Java os.arch property
     ARCHPROP    = x86
  else
     ifeq ($(ARCH), amd64)
        ARCH_FAMILY = i586
     else
        ARCH_FAMILY = sparc
     endif
     LIBARCH  = $(ARCH)
     # Value of Java os.arch property
     ARCHPROP = $(LIBARCH)
  endif
  # The two LIBARCH names
  ifeq ($(ARCH_FAMILY), sparc)
    LIBARCH32 = sparc
    LIBARCH64 = sparcv9
  else
    LIBARCH32 = i386
    LIBARCH64 = amd64
  endif
  # Suffix for file bundles used in previous release
  BUNDLE_FILE_SUFFIX=.tar
  OS_VENDOR = Sun Microsystems
  # Required Solaris version
  ifeq ($(ARCH), amd64)
    REQUIRED_OS_VERSION = 5.10
  else
    REQUIRED_OS_VERSION = 5.8
  endif
  # Minimum disk space needed as determined by running 'du -sk' on 
  #    a fully built workspace.
  ifeq ($(ARCH_FAMILY), sparc)
    REQUIRED_FREE_SPACE=1300000
  else
    REQUIRED_FREE_SPACE=1040000
  endif
  # How much RAM does this machine have:
  MB_OF_MEMORY=$(shell /etc/prtconf | fgrep 'Memory size:' | expand | cut -d' ' -f3)
endif

# Platform settings specific to Linux
ifeq ($(SYSTEM_UNAME), Linux)
  PLATFORM = linux
  OS_NAME = linux
  OS_VERSION := $(shell uname -r)
  # Arch and OS name/version
  ifeq (,$(CROSS_COMPILE_ARCH))
      mach := $(shell uname -m)
  else
      mach := $(CROSS_COMPILE_ARCH)
  endif
  archExpr = case "$(mach)" in  \
                i[3-9]86) \
                    echo i586 \
                    ;; \
                ia64) \
                    echo ia64 \
                    ;; \
                x86_64) \
                    echo amd64 \
                    ;; \
                sparc*)  \
                    echo sparc \
                    ;; \
                *) \
                    echo $(mach)  \
                    ;; \
        esac
  ARCH        := $(shell $(archExpr) )
  ARCH_FAMILY = $(ARCH)
  # Linux builds may be 32-bit or 64-bit data model.
  ifndef ARCH_DATA_MODEL
    ifeq ($(ARCH), i586)
      ARCH_DATA_MODEL=32
    else
      ARCH_DATA_MODEL=64
    endif
  endif
  # Need to maintain the jre/lib/i386 location for 32-bit Intel
  ifeq ($(ARCH), i586)
    LIBARCH = i386
  else
    LIBARCH = $(ARCH)
  endif
  # Value of Java os.arch property
  ARCHPROP   = $(LIBARCH)
  # Suffix for file bundles used in previous release
  BUNDLE_FILE_SUFFIX=.tar.gz
  # Minimum disk space needed as determined by running 'du -sk' on 
  #    a fully built workspace.
  REQUIRED_FREE_SPACE=1460000
  LINUX_VERSION_INFO = /etc/redhat-release
  OS_VENDOR = Red Hat
  ifeq ($(ARCH_DATA_MODEL), 32)
    REQUIRED_LINUX_VER = Advanced Server
    REQUIRED_LINUX_FULLVER = Advanced Server release 2.1AS
    REQUIRED_OS_VERSION = 2.4.9-e.3
  else
    ifeq ($(ARCH), amd64)
      LINUX_VERSION_INFO = /etc/SuSE-release
      OS_VENDOR = SuSE Enterprise
      REQUIRED_LINUX_VER = 8.1
      REQUIRED_LINUX_FULLVER = $(REQUIRED_LINUX_VER) SLSE AMD64
      REQUIRED_OS_VERSION = 2.4.19-SMP
    else
      REQUIRED_LINUX_VER = Advanced Server
      REQUIRED_LINUX_FULLVER = Advanced Server release 2.1AS 64 bit
      REQUIRED_OS_VERSION = 2.4.19-SMP
    endif
  endif
  ifneq ($(ARCH), ia64)
    # ALSA 0.9.1 and above
    REQUIRED_ALSA_VERSION = ^((0[.]9[.][1-9])|(1[.]0[.][0-9]))[0-9]*
  endif
  # How much RAM does this machine have:
  MB_OF_MEMORY := $(shell free -m | fgrep Mem: | sed -e 's@\ \ *@ @g' | cut -d' ' -f2)
endif

# Windows with and without CYGWIN will be slightly different
ifeq ($(SYSTEM_UNAME), Windows_NT)
  PLATFORM = windows
  OS_VERSION := $(shell uname -r)
  WINDOWS_NT_VERSION_STRING=Windows_NT
  REQUIRED_MKS_VER=6.1
endif
ifneq (,$(findstring CYGWIN,$(SYSTEM_UNAME)))
  PLATFORM = windows
  OS_VERSION := 5
  USING_CYGWIN = true
  export USING_CYGWIN
  WINDOWS_NT_VERSION_STRING=CYGWIN_NT
  REQUIRED_CYGWIN_VER=4.0
endif

# Platform settings specific to Windows
ifeq ($(PLATFORM), windows)
  OS_NAME = nt
  REQUIRED_OS_VERSION=5
  # Windows builds default to the appropriate for the underlaying
  # architecture.
  # Temporary disk area
  TEMP_DISK=C:/temp
  # GNU Make or MKS overrides $(PROCESSOR_ARCHITECTURE) to always
  # return "x86". Use the first word of $(PROCESSOR_IDENTIFIER) instead.
  ifndef ARCH_DATA_MODEL
    ifeq ($(word 1, $(PROCESSOR_IDENTIFIER)),ia64)
      ARCH_DATA_MODEL=64
    else
      ifeq ($(word 1, $(PROCESSOR_IDENTIFIER)),AMD64)
        ARCH_DATA_MODEL=64
      else
        ARCH_DATA_MODEL=32
      endif
    endif
  endif
  export ARCH_DATA_MODEL
  # LIBARCH is used to preserve the jre/lib/i386 directory name for 32-bit intel
  ARCH=i586
  LIBARCH=i386
  # Value of Java os.arch property
  ARCHPROP=x86
  REQUIRED_WINDOWS_NAME=Windows Professional 2000
  REQUIRED_WINDOWS_VERSION=5 0 Service Pack 4
  ifeq ($(ARCH_DATA_MODEL), 64)
    # If the user wants to perform a cross compile build then they must
    # - set ARCH_DATA_MODEL=64 and either
    #      + set CROSS_COMPILE_ARCH to ia64 or amd64, or
    #      + leave CROSS_COMPILE_ARCH unset to get ia64 build by default.
    ifdef CROSS_COMPILE_ARCH
      ARCH=$(CROSS_COMPILE_ARCH)
      USE_ONLY_BOOTDIR_TOOLS = true
    else
      REQUIRED_WINDOWS_NAME=Windows Server 2003
      REQUIRED_WINDOWS_VERSION=5 2 Service Pack 1
      ifeq ($(word 1, $(PROCESSOR_IDENTIFIER)), AMD64)
        ARCH=amd64
      else
        ARCH=ia64
        ifneq ($(word 1, $(PROCESSOR_IDENTIFIER)), ia64)
           USE_ONLY_BOOTDIR_TOOLS = true
           CROSS_COMPILE_ARCH=ia64
        endif
      endif
    endif
    LIBARCH=$(ARCH)
    # Value of Java os.arch property
    ARCHPROP=$(LIBARCH)
  endif
  ARCH_FAMILY = $(ARCH)
  # Where is unwanted output to be delivered?
  DEV_NULL = NUL
  export DEV_NULL
  # Classpath separator
  CLASSPATH_SEPARATOR = ;
  # The suffix used for object file (.o for unix .obj for windows)
  OBJECT_SUFFIX = obj
  # The suffix applied to executables (.exe for windows, nothing for solaris)
  EXE_SUFFIX = .exe
  # The prefix applied to library files (lib for solaris, nothing for windows)
  LIB_PREFIX=
  LIBRARY_SUFFIX = dll
  LIB_SUFFIX     = lib
  # User name determination (set _USER)
  ifndef USER
    ifdef USERNAME
      _USER := $(USERNAME)
    else
      ifdef LOGNAME
        _USER := $(LOGNAME)
      else
        _USER := $(shell id -un)
      endif
    endif
  else
    _USER:=$(USER)
  endif
  # Location of client/server directories
  ARCH_VM_SUBDIR=jre/bin
  # Suffix for file bundles used in previous release
  BUNDLE_FILE_SUFFIX=.tar
  # Minimum disk space needed as determined by running 'du -sk' on 
  #    a fully built workspace.
  REQUIRED_FREE_SPACE=500000
  # ISHIELD_TEMP_MIN is the difference of an empty C:\TEMP vs. one after a
  #     bundles build on windows.
  ISHIELD_TEMP_MIN=250000
  REQUIRED_DXSDK_VER = 0x0900
  OS_VENDOR = Microsoft
  # How much RAM does this machine have:
  #  (Couldn't figure out how to do this on the command line with Windows)
  MB_OF_MEMORY=512
endif

# Machines with 512Mb or less of real memory are considered low memory
#    build machines and adjustments will be made to prevent excessing
#    system swapping during the build.
ifeq ($(shell expr $(MB_OF_MEMORY) '<=' 512), 1)
  LOW_MEMORY_MACHINE=true
else
  LOW_MEMORY_MACHINE=false
endif

REQUIRED_ZIP_VER = 2.2
REQUIRED_UNZIP_VER = 5.12
REQUIRED_MAKE_VER = 3.78

# Unix type settings (same for all unix platforms)
ifneq ($(PLATFORM), windows)
  # Temporary disk area
  TEMP_DISK=/tmp
  # Where is unwanted output to be delivered?
  DEV_NULL = /dev/null
  export DEV_NULL
  # Character used between entries in classpath 
  CLASSPATH_SEPARATOR = :
  # suffix used for object file (.o for unix .obj for windows)
  OBJECT_SUFFIX = o
  # The suffix applied to runtime libraries
  LIBRARY_SUFFIX = so
  # The suffix applied to link libraries
  LIB_SUFFIX = so
  # The suffix applied to executables (.exe for windows, nothing for solaris)
  EXE_SUFFIX =
  # The prefix applied to library files (lib for solaris, nothing for windows)
  LIB_PREFIX = lib
  # User name determination (set _USER)
  ifndef USER
    ifdef LOGNAME
      _USER := $(LOGNAME)
    else
      _USER := $(shell logname)
    endif
  else
    _USER:=$(USER)
  endif
  # Location of client/server directories
  ARCH_VM_SUBDIR=jre/lib/$(LIBARCH)
endif

# If blanks in the username, use the first 4 words and pack them together
_USER1:=$(subst ', ,$(_USER))
_USER2:=$(subst ", ,$(_USER1))
USER:=$(word 1,$(_USER2))$(word 2,$(_USER2))$(word 3,$(_USER2))$(word 4,$(_USER2))
export USER

export PLATFORM
endif

