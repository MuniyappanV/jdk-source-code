#
# Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#
# @(#)Release.gmk	1.362 10/05/27
#

include $(J2SE_TOPDIR)/make/docs/CORE_PKGS.gmk
include $(J2SE_TOPDIR)/make/docs/NON_CORE_PKGS.gmk

#
# Perform release engineering tasks.
#
# images    An image is what the product looks like when it is
#           installed.
#

IMAGE_BINDIR = bin

# The compiler should not issue a "Propietary" warning when compiling
# classes in the com.sun.java.swing.plaf packages, since we've always
# allowed, and even advocated, extending them (see bug 6476749).
#
# This approach is NOT to be used as a general purpose way to avoid such
# compiler warnings for non-core packages. The correct way is to document
# the packages in NON_CORE_PKGS.gmk, and include them in the NON_CORE_PKGS
# definition.
#
# Swing has taken this approach only as a temporary measure to avoid
# the compiler warnings until we can properly document these packages.
# This is covered under 6491853.
EXCLUDE_PROPWARN_PKGS = com.sun.java.swing.plaf          \
                        com.sun.java.swing.plaf.windows  \
                        com.sun.java.swing.plaf.motif    \
                        com.sun.java.swing.plaf.nimbus   \
                        com.sun.java.swing.plaf.gtk
#
# Include the exported private packages in ct.sym.
# This is an interim solution until the ct.sym is replaced 
# with a new module system (being discussed for JDK 7).  
#
EXPORTED_PRIVATE_PKGS = com.sun.servicetag

# 64-bit solaris has a few special cases. We define the variable
# SOLARIS64 for use in this Makefile to easily test those cases
ifeq ($(PLATFORM), solaris)
  ifeq ($(ARCH_DATA_MODEL), 64)
    SOLARIS64 = true
    IMAGE_BINDIR = bin/$(ARCH)
  endif
endif

# Set a few internal names depending if this is "Java for Business" or not.
# This is currently only used to select unique version of the documentation

ifeq ($(J4B), true)
  JRE_NAME = jrefb
  JDK_NAME = jdkfb
else
  JRE_NAME = jre
  JDK_NAME = jdk
endif

JTG_DOCS            = $(J2SE_TOPDIR)/src/solaris/doc

#We use this for man page header
jdkversion := $(JDK_MAJOR_VERSION).$(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION)

# Text documents on windows use this suffix
ifeq ($(PLATFORM), windows)
  TEXT_SUFFIX = .txt
endif


## Custom Revision milestone checking
## Point Custom rev will have 'revXXXXnn' as MILESTONE value
##    where XXXX is the stock/other symbol unique for customer
##    where nn is the 2 digit numeric number for point release
## See 6908562 for detail

ifeq ($(shell $(ECHO) $(MILESTONE) | $(CUT) -c1-3), rev)
    MILESTONE_CHECK=rev
else
    MILESTONE_CHECK=$(MILESTONE)
endif

JDK_TEMPDIR=$(TEMPDIR)/jdk
JRE_TEMPDIR=$(TEMPDIR)/jre

# The names of the JDK text files to be copied to the image dirs
# These will be modified to have the platform specific EOL chars.
# 6912291 - Third party license agreement should be present in all bundles
JDK_SOURCE_DOCLIST = COPYRIGHT README.html README_ja.html README_zh_CN.html THIRDPARTYLICENSEREADME.txt

# The names of the JDK text files to be copied to the image dirs
# These will be modified to have the platform specific EOL chars,
# and will be renamed to have their platform specific text extensions.
# JDK_NAMECHANGE_DOCLIST = README

# The names of the JRE text files to be copied to the image dirs
# These will be modified to have the platform specific EOL chars.
# 6912291 - Third party license agreement should be present in all bundles
JRE_SOURCE_DOCLIST = COPYRIGHT Welcome.html THIRDPARTYLICENSEREADME.txt

# The names of the JDK text files to be copied to the image dirs
# These will be modified to have the platform specific EOL chars,
# and will be renamed to have their platform specific text extensions.
JRE_NAMECHANGE_DOCLIST = README

# absolute directory names: note, these must exist prior to build
# time - they are created in the main Makefile.
ABS_J2SE_TOPDIR  :=$(call FullPath,$(J2SE_TOPDIR))
JRE_IMAGE_BINDIR   = $(JRE_IMAGE_DIR)/bin
JRE_IMAGE_THREADIR = $(JRE_IMAGE_DIR)/bin/*/native_threads

MAINMANIFEST  = $(ABS_J2SE_TOPDIR)/make/tools/manifest.mf
BEANMANIFEST  = $(ABS_J2SE_TOPDIR)/make/javax/swing/beaninfo/manifest

#
# Man pages
#

JRE_MAN_PAGES = \
	java.1		\
	keytool.1	\
	rmid.1		\
	rmiregistry.1	\
	tnameserv.1     \
	servertool.1    \
	orbd.1          \
	policytool.1    \
	pack200.1	      \
	unpack200.1

ifeq ($(ARCH_DATA_MODEL),32)
  JRE_MAN_PAGES += javaws.1
endif

ifeq ($(PLATFORM), linux)
endif

JDK_MAN_PAGES = \
	$(JRE_MAN_PAGES) \
	appletviewer.1 \
  apt.1 \
	extcheck.1 \
	idlj.1 \
	jar.1 \
	jarsigner.1 \
	javac.1 \
	javadoc.1 \
	javah.1 \
	javap.1 \
	jconsole.1 \
	jdb.1 \
	jhat.1 \
  jinfo.1 \
  jmap.1 \
  jps.1 \
	jrunscript.1 \
  jsadebugd.1 \
  jstack.1 \
  jstat.1 \
  jstatd.1 \
  jvisualvm.1 \
	native2ascii.1 \
	rmic.1 \
  schemagen.1 \
	serialver.1 \
  wsgen.1 \
  wsimport.1 \
  xjc.1

ifeq ($(PLATFORM), solaris)
  LIBTHREAD_PKG_LOC=pkgdefs/SUNWjvthr
  MANDIR=$(J2SE_TOPDIR)/src/solaris/doc/sun/man/man1
  JA_MANDIR=$(J2SE_TOPDIR)/src/solaris/doc/sun/man/man1
  DEST_MAN_PATH = man/man1
endif # PLATFORM

ifeq ($(PLATFORM), linux)
  MANDIR=$(J2SE_TOPDIR)/src/linux/doc/man
  JA_MANDIR=$(J2SE_TOPDIR)/src/linux/doc/man
  DEST_MAN_PATH = man/man1
endif


#
# Targets.
#
INITIAL_IMAGE_JRE=initial-image-jre
INITIAL_IMAGE_JDK=initial-image-jdk
ifeq ($(PLATFORM), solaris)
  ifeq ($(ARCH_DATA_MODEL), 64)
    INITIAL_IMAGE_JRE=initial-image-jre-sol64
    INITIAL_IMAGE_JDK=initial-image-jdk-sol64
  endif
endif

images images-clobber \
initial-image-jre initial-image-jdk \
initial-image-jre-sol64 initial-image-jdk-sol64 \
trim-image-jre trim-image-jdk \
process-image-jre process-image-jdk \
compare-image-jre compare-image-jdk ::
	@$(ECHO) ">>>Making "$@" @ `$(DATE)` ...";

# Order is important here, trim jre after jdk image is created
images:: sanity-images post-sanity-images  \
         $(INITIAL_IMAGE_JRE) $(INITIAL_IMAGE_JDK) \
	 trim-image-jre trim-image-jdk \
	 process-image-jre process-image-jdk

# Don't use these
image-jre:: initial-image-jre trim-image-jre process-image-jre
image-jdk:: initial-image-jdk trim-image-jdk process-image-jdk

#
# Sources we ship in the SDK.
#
SOURCES = \
	java/applet			\
	java/awt			\
	java/beans			\
	java/io				\
	java/lang			\
	java/math			\
	java/net			\
	java/nio			\
	java/rmi			\
	java/security			\
	java/sql			\
	java/text			\
	java/util			\
	com/sun/corba			\
	com/sun/image/codec/jpeg	\
	com/sun/imageio                 \
	com/sun/java/swing		\
	com/sun/javadoc			\
	com/sun/jmx			\
	com/sun/mirror			\
	com/sun/source			\
	com/sun/naming			\
	com/sun/security/auth		\
	com/sun/security/jgss		\
	javax/accessibility		\
	javax/annotation		\
	javax/script			\
	javax/imageio			\
	javax/lang			\
	javax/management		\
	javax/naming			\
	javax/print			\
	javax/rmi			\
	javax/security			\
	javax/sound			\
	javax/sql			\
	javax/swing			\
	javax/tools			\
	javax/xml			\
	com/sun/org/apache		\
	com/sun/java_cup		\
	com/sun/jlex	        	\
	org/ietf			\
	org/omg				\
	org/w3c/dom			\
	org/xml/sax			\
	sunw
#
# Directories where sources may be found.  If a file with the same path
# name exists in more than one of these places, the one found last on this
# list wins.
#
SOURCE_DIRS = $(SHARE_SRC)/classes $(PLATFORM_SRC)/classes $(GENSRCDIR)

#
# Specific files and directories that will be filtered out from above areas.
#
SOURCE_FILTERs = SCCS 'X-*' '*-X-*' '*-template.java' ',*'
SOURCE_FILES_filter = $(SOURCE_FILTERs:%=-name % -prune -o)

#
# Bug 4249883 - excluding some unnecessary packages from com.sun.tools
#
# Bug 5008685 - exclude jconsole from sun/tools
#               Side note: sun/tools/javazic is used by the build
#                          but is not part of the product.
#
TOOLS = \
	META-INF/services/com.sun.jdi.connect.Connector \
	META-INF/services/com.sun.jdi.connect.spi.TransportService \
	sun/tools/asm		\
	sun/tools/hprof		\
	sun/tools/jar		\
	sun/tools/java		\
	sun/tools/javac		\
	sun/tools/javap		\
	sun/tools/jps		\
	sun/tools/jstat		\
	sun/tools/jstatd	\
	sun/tools/native2ascii	\
	sun/tools/serialver	\
	sun/tools/tree		\
	sun/tools/util		\
	sun/security/tools/JarBASE64Encoder.class \
	sun/security/tools/JarSigner.class \
	sun/security/tools/JarSignerParameters.class \
	sun/security/tools/JarSignerResources.class \
	sun/security/tools/JarSignerResources_ja.class \
	sun/security/tools/JarSignerResources_zh_CN.class \
	sun/security/tools/SignatureFile\$$Block.class \
	sun/security/tools/SignatureFile.class \
	sun/security/tools/TimestampedSigner.class \
	sun/rmi/rmic		\
	sun/applet		\
	sun/jvmstat		\
	com/sun/javadoc		\
	com/sun/jdi		\
	com/sun/jarsigner	\
	com/sun/mirror		\
	com/sun/source          \
	com/sun/tools/doclets   \
	com/sun/tools/example/debug/expr \
	com/sun/tools/example/debug/tty  \
	com/sun/tools/extcheck  \
	com/sun/tools/hat       \
	com/sun/tools/javac     \
	com/sun/tools/javadoc   \
	com/sun/tools/apt       \
	com/sun/tools/javah     \
	com/sun/tools/corba     \
	com/sun/tools/internal/xjc       \
	com/sun/tools/internal/ws       \
	META-INF/services/com.sun.mirror.apt.AnnotationProcessorFactory \
	META-INF/services/com.sun.tools.internal.xjc.Plugin \
	com/sun/istack/internal/tools       \
	com/sun/istack/internal/ws       \
        com/sun/codemodel       \
        com/sun/tools/internal/jxc             \
        com/sun/xml/internal/rngom       \
        com/sun/xml/internal/xsom       \
        org/relaxng/datatype   \
	com/sun/xml/internal/dtdparser \
	com/sun/tools/jdi	\
	com/sun/tools/script/shell	\
	META-INF/services/com.sun.tools.attach.spi.AttachProvider \
	com/sun/tools/attach	\
	sun/tools/attach	\
	sun/tools/jstack        \
	sun/tools/jinfo         \
	sun/tools/jmap

JPDA_SHARE_SRC=$(J2SE_TOPDIR)/src/share
JPDA_DEMO_PKGS= \
	com/sun/tools/example/README \
	com/sun/tools/example/doc \
	com/sun/tools/example/trace \
	com/sun/tools/example/debug/expr \
	com/sun/tools/example/debug/tty \
	com/sun/tools/example/debug/bdi \
	com/sun/tools/example/debug/event \
	com/sun/tools/example/debug/gui

# The following get removed from the SDK image.
NOTJDKTOOLS = \
	java_vm

# The following get removed from the JRE after the bulk-copy of BINDIR...
NOTJRETOOLS = \
	appletviewer$(EXE_SUFFIX) \
	extcheck$(EXE_SUFFIX) \
	idlj$(EXE_SUFFIX) \
	jar$(EXE_SUFFIX) \
	jarsigner$(EXE_SUFFIX) \
	java-rmi.cgi \
	javac$(EXE_SUFFIX) \
	javadoc$(EXE_SUFFIX) \
	apt$(EXE_SUFFIX) \
	javah$(EXE_SUFFIX) \
	javap$(EXE_SUFFIX) \
	jdb$(EXE_SUFFIX) \
	jps$(EXE_SUFFIX) \
	jrunscript$(EXE_SUFFIX) \
	jstat$(EXE_SUFFIX) \
	jstatd$(EXE_SUFFIX) \
	jstack$(EXE_SUFFIX) \
	packagebean$(SCRIPT_SUFFIX) \
	rmic$(EXE_SUFFIX) \
	serialver$(EXE_SUFFIX) \
	unregbean$(EXE_SUFFIX) \
	jconsole$(EXE_SUFFIX) \
	jinfo$(EXE_SUFFIX) \
	jmap$(EXE_SUFFIX) \
	native2ascii$(EXE_SUFFIX) \
	xjc$(EXE_SUFFIX) \
	wsgen$(EXE_SUFFIX) \
	wsimport$(EXE_SUFFIX) \
        schemagen$(EXE_SUFFIX) \
	jsadebugd$(EXE_SUFFIX) \
	jhat$(EXE_SUFFIX)

# The following get removed from the JRE after the bulk-copy of LIBDIR...
NOTJRELIBS = tools.jar \
        jconsole.jar

ifeq ($(INCLUDE_SA), true)
  NOTJRELIBS += sa-jdi.jar

  # The following get removed from the JRE after the bulk-copy of LIBDIR...
  NOTJRE_SHARED_LIBS = $(SALIB_NAME)
else
  NOTJRE_SHARED_LIBS =
endif

# Attach library is JDK only
NOTJRE_SHARED_LIBS += $(LIB_PREFIX)attach.$(LIBRARY_SUFFIX)

#
###### RULES

$(TEMPDIR)/DirDiff/DirDiff.class:  $(J2SE_TOPDIR)/make/tools/DirDiff/DirDiff.java
	$(prep-target)
	$(JAVAC) -d $(@D) $<
	@$(java-vm-cleanup)

######################################################
# List of directories in classes directory that should NOT be in rt.jar
######################################################

NOT_RT_JAR_LIST = $(ABS_TEMPDIR)/not_rt_jar.list

$(NOT_RT_JAR_LIST): FRC
	$(prep-target)
	$(ECHO) "#\n" >> $@
	$(ECHO) "# List of subdirectories not in include in rt.jar" >> $@
	$(ECHO) "# Directories must contain trailing '/'." >> $@
	$(ECHO) "com/sun/javadoc/" >> $@
	$(ECHO) "com/sun/jdi/" >> $@
	$(ECHO) "com/sun/jarsigner/" >> $@
	$(ECHO) "com/sun/mirror/" >> $@
	$(ECHO) "com/sun/source/" >> $@
	$(ECHO) "com/sun/istack/internal/tools/" >> $@
	$(ECHO) "com/sun/istack/internal/ws/" >> $@
	$(ECHO) "META-INF/services/com.sun.jdi.connect.Connector" >> $@
	$(ECHO) "META-INF/services/com.sun.jdi.connect.spi.TransportService" >> $@
	$(ECHO) "META-INF/services/com.sun.mirror.apt.AnnotationProcessorFactory" >> $@
	$(ECHO) "META-INF/services/com.sun.tools.internal.xjc.Plugin" >> $@
	$(ECHO) "com/sun/tools/" >> $@
	$(ECHO) "sun/jvmstat/" >> $@
	$(ECHO) "sun/rmi/rmic/" >> $@
	$(ECHO) "sun/tools/asm/" >> $@
	$(ECHO) "sun/tools/java/" >> $@
	$(ECHO) "sun/tools/javac/" >> $@
	$(ECHO) "sun/tools/javap/" >> $@
	$(ECHO) "sun/tools/jconsole/" >> $@
	$(ECHO) "sun/tools/jps/" >> $@
	$(ECHO) "sun/tools/jstat/" >> $@
	$(ECHO) "sun/tools/jstatd/" >> $@
	$(ECHO) "sun/tools/native2ascii/" >> $@
	$(ECHO) "sun/tools/serialver/" >> $@
	$(ECHO) "sun/tools/tree/" >> $@
	$(ECHO) "sun/tools/util/" >> $@
	$(ECHO) "sun/security/tools/JarBASE64Encoder.class" >> $@
	$(ECHO) "sun/security/tools/JarSigner.class" >> $@
	$(ECHO) "sun/security/tools/JarSignerParameters.class" >> $@
	$(ECHO) "sun/security/tools/JarSignerResources.class" >> $@
	$(ECHO) "sun/security/tools/JarSignerResources_ja.class" >> $@
	$(ECHO) "sun/security/tools/JarSignerResources_zh_CN.class" >> $@
	$(ECHO) "sun/security/tools/SignatureFile\$$Block.class" >> $@
	$(ECHO) "sun/security/tools/SignatureFile.class" >> $@
	$(ECHO) "sun/security/tools/TimestampedSigner.class" >> $@
	$(ECHO) "META-INF/services/com.sun.tools.attach.spi.AttachProvider" >> $@
	$(ECHO) "com/sun/tools/attach/" >> $@
	$(ECHO) "org/relaxng/datatype/" >> $@
	$(ECHO) "com/sun/codemodel/" >> $@
	$(ECHO) "com/sun/xml/internal/dtdparser/" >> $@
	$(ECHO) "com/sun/xml/internal/rngom/" >> $@
	$(ECHO) "com/sun/xml/internal/xsom/" >> $@
	$(ECHO) "com/sun/tools/script/shell/" >> $@
	$(ECHO) "sun/tools/attach/" >> $@
	$(ECHO) "sun/tools/jstack/" >> $@
	$(ECHO) "sun/tools/jinfo/" >> $@
	$(ECHO) "sun/tools/jmap/" >> $@


ifeq ($(PLATFORM), windows)
	$(ECHO) "com/sun/java/swing/plaf/gtk/" >> $@
	$(ECHO) "com/sun/swing/internal/plaf/gtk/" >> $@
endif

# File order list for rt.jar
#     - sun.applet is included, till hotjava stops relying on it.
#     - sun.tools.jar is included, needs cleanup.
#
REORDER_TEMPDIR=$(ABS_TEMPDIR)/reorder
TOTAL_JAR_FILELIST=$(REORDER_TEMPDIR)/file_list

JARFILELISTS_TEMPDIR=$(ABS_TEMPDIR)/jarfilelists
RT_JAR_FILELIST=$(JARFILELISTS_TEMPDIR)/rt_jar_list
RES_JAR_FILELIST=$(JARFILELISTS_TEMPDIR)/resources_jar_list

$(REORDER_TEMPDIR)/JarReorder.class: $(J2SE_TOPDIR)/make/tools/reorder/JarReorder.java
	$(prep-target)
	$(JAVAC) -d $(@D) $<
	@$(java-vm-cleanup)

$(TOTAL_JAR_FILELIST):  $(REORDER_TEMPDIR)/JarReorder.class $(NOT_RT_JAR_LIST)
	$(prep-target)
	$(RM) $@.temp
	$(CD) $(CLASSBINDIR) ; \
		$(ABS_JAVA) -classpath $(REORDER_TEMPDIR) JarReorder \
		-o  $@.temp $(ABS_LIBDIR)/classlist $(NOT_RT_JAR_LIST)  .
	$(MV) $@.temp $@
	@$(CD) $(CLASSBINDIR); $(java-vm-cleanup)

# Create JarSplit.class
$(JARFILELISTS_TEMPDIR)/JarSplit.class: $(J2SE_TOPDIR)/make/tools/jarsplit/JarSplit.java
	$(prep-target)
	$(JAVAC) -d $(@D) $<
	@$(java-vm-cleanup)

# Create the rt.jar file list & non-class files list
MakeJarFileList: $(TOTAL_JAR_FILELIST) $(JARFILELISTS_TEMPDIR)/JarSplit.class
	@$(RM) $(RT_JAR_FILELIST) $(RES_JAR_FILELIST)
	$(ABS_JAVA) -classpath $(JARFILELISTS_TEMPDIR) JarSplit $(TOTAL_JAR_FILELIST) \
		-o  $(RT_JAR_FILELIST) $(RES_JAR_FILELIST)
	@$(java-vm-cleanup)

# Create the manifest file.
JAR_MANIFEST_FILE=$(ABS_TEMPDIR)/manifest.tmp
$(JAR_MANIFEST_FILE):
	$(prep-target)
	( $(SED) "s/@@RELEASE@@/$(RELEASE)/" $(MAINMANIFEST); $(ECHO); \
		$(CAT) $(BEANMANIFEST) ) > $@

# Create resources.jar containing non-class files
RESOURCES_JAR=$(ABS_TEMPDIR)/resources-orig.jar
$(RESOURCES_JAR): MakeJarFileList $(JAR_MANIFEST_FILE)
	$(prep-target)
	$(CD) $(CLASSBINDIR) ; \
		$(ABS_JAR) c0mf $(JAR_MANIFEST_FILE) $@ @$(RES_JAR_FILELIST) \
		 $(JAR_JFLAGS)
	@$(java-vm-cleanup)

# Create rt.jar
RT_JAR=$(ABS_TEMPDIR)/rt-orig.jar
$(RT_JAR): MakeJarFileList $(JAR_MANIFEST_FILE)
	$(prep-target)
	$(CD) $(CLASSBINDIR) ; \
		$(ABS_JAR) c0mf $(JAR_MANIFEST_FILE) $@ @$(RT_JAR_FILELIST) \
		 $(JAR_JFLAGS)
	@$(CD) $(CLASSBINDIR); $(java-vm-cleanup)

# Meta-index construction to make core class loaders lazier
META_INDEX_TEMPDIR=$(ABS_TEMPDIR)/meta-index
BUILD_META_INDEX=$(META_INDEX_TEMPDIR)/BuildMetaIndex.class

$(BUILD_META_INDEX): $(J2SE_TOPDIR)/make/tools/MetaIndex/BuildMetaIndex.java
	$(prep-target)
	$(JAVAC) -d $(@D) $<
	@$(java-vm-cleanup)

######################################################
# JRE Image
######################################################

# 64-bit solaris jre image contains only the 64-bit add-on files.
initial-image-jre-sol64 ::
	$(RM) -r $(JRE_IMAGE_DIR)
	$(MKDIR) -p $(JRE_IMAGE_DIR)
	@# Use tar instead of cp to preserve the symbolic links
	for dir in bin lib ; do \
	  $(CD) $(ABS_OUTPUTDIR); \
		$(TAR) cf - `$(FIND) $$dir -name '$(ARCH)' -print` | \
		($(CD) $(JRE_IMAGE_DIR); $(TAR) xf -); \
	done
	@# Remove some files from the jre area
	for t in $(NOTJRETOOLS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/bin$(ISA_DIR)/$$t ; \
	done
	for l in $(NOTJRELIBS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/lib/$$l ; \
	done
	$(RM) `$(FIND) $(JRE_IMAGE_DIR)/lib -name 'orb.idl'`
	$(RM) `$(FIND) $(JRE_IMAGE_DIR)/lib -name 'ir.idl'`

# Construct an initial jre image (initial jdk jre) no trimming or stripping
initial-image-jre :: $(RT_JAR) $(RESOURCES_JAR) $(BUILD_META_INDEX)
	$(RM) -r $(JRE_IMAGE_DIR)
	$(MKDIR) -p $(JRE_IMAGE_DIR)
	@# Copy in bin directory
	$(CD) $(OUTPUTDIR); $(FIND) bin -depth | $(CPIO) -pdum $(JRE_IMAGE_DIR)
	@# CTE plugin security change require new empty directory lib/applet
	$(MKDIR) -p $(JRE_IMAGE_DIR)/lib/applet
	@# Copy in lib directory
	$(CD) $(OUTPUTDIR); $(FIND) lib -depth | $(CPIO) -pdum $(JRE_IMAGE_DIR)
	@# Make sure all directories are read/execute for everyone
	$(CHMOD) a+rx `$(FIND) $(JRE_IMAGE_DIR) -type d`
	@# Remove some files from the jre area
	for t in $(NOTJRETOOLS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/bin$(ISA_DIR)/$$t ; \
	done
	for l in $(NOTJRELIBS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/lib/$$l ; \
	done
	@# Remove orb.idl and ir.idl from jre
	$(FIND) $(JRE_IMAGE_DIR)/lib -name 'orb.idl' -exec $(RM) \{} \;
	$(FIND) $(JRE_IMAGE_DIR)/lib -name 'ir.idl' -exec $(RM) \{} \;
	@# Copy in rt.jar & resources.jar file
	$(CP) $(RT_JAR) $(JRE_IMAGE_DIR)/lib/rt.jar
	$(CP) $(RESOURCES_JAR) $(JRE_IMAGE_DIR)/lib/resources.jar
	@#
	@# Doc files.
	@# add the platform appropriate EOL and extension to the text.
	$(CD) $(JRE_IMAGE_DIR); \
	    $(RM) $(JRE_SOURCE_DOCLIST) $(JRE_NAMECHANGE_DOCLIST)$(TEXT_SUFFIX)
	for d in $(JRE_SOURCE_DOCLIST); do \
		$(SED) 's/$$//g' $(SHARE_SRC)/doc/$(JRE_NAME)/$$d > $(JRE_IMAGE_DIR)/$$d ; \
		$(CHMOD) 444 $(JRE_IMAGE_DIR)/$$d ; \
	done
	for d in $(JRE_NAMECHANGE_DOCLIST); do \
		$(SED) 's/$$//g' $(SHARE_SRC)/doc/$(JRE_NAME)/$$d > \
		$(JRE_IMAGE_DIR)/$$d$(TEXT_SUFFIX) ; \
		$(CHMOD) 444 $(JRE_IMAGE_DIR)/$$d$(TEXT_SUFFIX) ; \
	done
	@# Generate meta-index to make boot and extension class loaders lazier
	$(CD) $(JRE_IMAGE_DIR)/lib; \
	    $(ABS_JAVA) -classpath $(META_INDEX_TEMPDIR) BuildMetaIndex -o meta-index *.jar
	@$(CD) $(JRE_IMAGE_DIR)/lib; $(java-vm-cleanup)
	$(CD) $(JRE_IMAGE_DIR)/lib/ext; \
	    $(ABS_JAVA) -classpath $(META_INDEX_TEMPDIR) BuildMetaIndex -o meta-index *.jar
	@$(CD) $(JRE_IMAGE_DIR)/lib/ext; $(java-vm-cleanup)
ifeq ($(PLATFORM), windows)
	@# Remove certain *.lib files
	$(CD) $(JRE_IMAGE_DIR)/lib; \
            $(RM) java.$(LIB_SUFFIX) jvm.$(LIB_SUFFIX) \
                  hpi.$(LIB_SUFFIX) awt.$(LIB_SUFFIX) jawt.$(LIB_SUFFIX)
  ifeq ($(ARCH_DATA_MODEL), 32)
	@# The Java Kernel JRE image ships with a special VM.  It is not included
	@# in the full JRE image, so remove it.  Also, is it only for 32-bit windows.
	$(CD) $(JRE_IMAGE_DIR)/bin && $(RM) -r kernel
  endif
else # Not windows
	@#
	@# UNIX man pages....
	@#
	$(MKDIR) -p $(JRE_IMAGE_DIR)/$(DEST_MAN_PATH)
	for i in $(JRE_MAN_PAGES); do \
		$(CP) $(MANDIR)/$$i $(JRE_IMAGE_DIR)/$(DEST_MAN_PATH); \
	done
	@#
	@# Add Japanese manpages
	@#
  ifeq ($(PLATFORM), linux)
	for manpage in $(JRE_MAN_PAGES); do \
	    for encoding in $(JA_TARGET_ENCODINGS); do \
		MAN_DEST_PATH=$(JRE_IMAGE_DIR)/man/ja; \
		if [ "$${encoding}" != "$(JA_SOURCE_ENCODING)" ]; then \
		    MAN_DEST_PATH=$${MAN_DEST_PATH}_JP.$${encoding}; \
		fi; \
		MAN_DEST_PATH=$${MAN_DEST_PATH}/man1; \
		$(MKDIR) -p $${MAN_DEST_PATH}; \
		$(CAT) $(JA_MANDIR)/ja/$${manpage} \
		    | $(NATIVE2ASCII) -encoding $(JA_SOURCE_ENCODING) \
		    | $(NATIVE2ASCII) -reverse -encoding $${encoding} \
		    > $${MAN_DEST_PATH}/$${manpage}; \
	    done; \
	done
	$(MV) $(JRE_IMAGE_DIR)/man/ja $(JRE_IMAGE_DIR)/man/ja_JP.$(JA_SOURCE_ENCODING)
	$(CD) $(JRE_IMAGE_DIR)/man; $(LN) -s ja_JP.$(JA_SOURCE_ENCODING) ja
  else # not Linux
	for manpage in $(JRE_MAN_PAGES); do \
	    for encoding in $(JA_TARGET_ENCODINGS); do \
		MAN_DEST_PATH=$(JRE_IMAGE_DIR)/man/ja; \
		if [ "$${encoding}" != "$(JA_SOURCE_ENCODING)" ]; then \
		    MAN_DEST_PATH=$${MAN_DEST_PATH}_JP.$${encoding}; \
		fi; \
		MAN_DEST_PATH=$${MAN_DEST_PATH}/man1; \
		$(MKDIR) -p $${MAN_DEST_PATH}; \
		$(CAT) $(JA_MANDIR)/ja/$${manpage} \
		    | $(NATIVE2ASCII) -encoding $(JA_SOURCE_ENCODING) \
		    | $(SED) 's/@@VERSION@@/$(jdkversion)/g' \
		    | $(NATIVE2ASCII) -reverse -encoding $${encoding} \
		    > $${MAN_DEST_PATH}/$${manpage}; \
	    done; \
	done
	@$(java-vm-cleanup)
  endif # Linux
endif # Windows

# Trim out any extra files not for the jre shipment but wanted in the jdk jre.
#   (Note the jdk WILL want the jre image before this trimming)
#   Removes server VM and alt-rt.jar on Windows 32bit.
#   Remove certain shared libraries that should not be in the jre image
#      but should be in the jdk jre image.
trim-image-jre::
ifeq ($(PLATFORM), windows)
  ifeq ($(ARCH_DATA_MODEL), 32)
	$(RM) -r $(JRE_IMAGE_DIR)/bin/server
	$(RM) $(JRE_IMAGE_DIR)/lib/alt-rt.jar
  endif
  ifdef NOTJRE_SHARED_LIBS
	for l in $(NOTJRE_SHARED_LIBS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/bin/$$l ; \
	done ;
  endif
else # PLATFORM
  ifdef NOTJRE_SHARED_LIBS
	for l in $(NOTJRE_SHARED_LIBS) ; do \
	    $(RM) $(JRE_IMAGE_DIR)/lib/$(LIBARCH)/$$l ; \
	done ;
  endif
endif # PLATFORM

# Get list of all Elf files in the jre
JRE_ELF_LIST=$(ABS_TEMPDIR)/jre-elf-files.list
$(JRE_ELF_LIST):
ifneq ($(PLATFORM), windows)
	$(RM) $@
	$(FIND) $(JRE_IMAGE_DIR)/lib -type f -name \*.$(LIB_SUFFIX) >> $@
	$(FILE) `$(FIND) $(JRE_IMAGE_DIR)/bin -type f -name \*$(EXE_SUFFIX)` \
	    | $(EGREP) 'ELF' | $(CUT) -d':' -f1 >> $@
endif

# Post process the image (strips and mcs on Elf files we are shipping)
#   (Note the jdk WILL want the jre image before this processing)
process-image-jre:: $(JRE_ELF_LIST)
ifneq ($(POST_STRIP_PROCESS), )
	for f in `$(CAT) $(JRE_ELF_LIST)`; do \
	  $(CHMOD) u+w $${f}; \
	  $(ECHO) $(POST_STRIP_PROCESS) $${f}; \
	  $(POST_STRIP_PROCESS) $${f}; \
	  $(CHMOD) go-w $${f}; \
	done
endif
ifneq ($(POST_MCS_PROCESS), )
	for f in `$(CAT) $(JRE_ELF_LIST)`; do \
	  $(CHMOD) u+w $${f}; \
	  $(ECHO) $(POST_MCS_PROCESS) $${f}; \
	  $(POST_MCS_PROCESS) $${f}; \
	  $(CHMOD) go-w $${f}; \
	done
endif
	$(RM) $(JRE_ELF_LIST)

######################################################
# JDK Image
######################################################

# Solaris 64 bit image is special
#   cpio sometimes leavs directories without rx access.
initial-image-jdk-sol64::
	$(RM) -r $(JDK_IMAGE_DIR)
	$(MKDIR) -p $(JDK_IMAGE_DIR)/jre
	@# Copy in jre directory
	$(CD) $(JRE_IMAGE_DIR) ; $(FIND) . -depth -print \
	      | $(CPIO) -pdum $(JDK_IMAGE_DIR)/jre
	@# Make sure all directories are read/execute for everyone
	$(CHMOD) a+rx `$(FIND) $(JDK_IMAGE_DIR) -type d`
	$(RM) -rf $(JDK_IMAGE_DIR)/jre/man
	for dir in bin demo ; do \
	  $(CD) $(ABS_OUTPUTDIR); \
		$(TAR) cf - `$(FIND) $$dir -name '$(LIBARCH)' -print` | \
		($(CD) $(JDK_IMAGE_DIR); $(TAR) xf -); \
        done

# Standard jdk image
initial-image-jdk::
	$(RM) -r $(JDK_IMAGE_DIR)
	$(MKDIR) -p $(JDK_IMAGE_DIR)/jre
	@# Copy in jre directory
	$(CD) $(JRE_IMAGE_DIR) ; $(FIND) . -depth -print \
	      | $(CPIO) -pdum $(JDK_IMAGE_DIR)/jre
	@# Make sure all directories are read/execute for everyone
	$(CHMOD) a+rx `$(FIND) $(JDK_IMAGE_DIR) -type d`
	$(RM) -rf $(JDK_IMAGE_DIR)/jre/man
	$(MKDIR) $(JDK_IMAGE_DIR)/lib
	@#
	@# Copy in the jars in lib that only belong in the JDK
	@#
	for l in $(NOTJRELIBS); do \
	    if [ -r $(LIBDIR)/$$l ]; then \
	        $(CP) $(LIBDIR)/$$l $(JDK_IMAGE_DIR)/lib; \
	    fi; \
	done
  ifeq ($(PLATFORM), windows)
	@#
	@# Audio soundbank - Bug# 4236400
	@# Windows only: adding audio files to JDK's jre/lib directory.
	@#
	($(CD) $(LIBDIR); $(TAR) cf - \
	    `$(FIND) audio -depth -print`) | \
	    ($(CD) $(JDK_IMAGE_DIR)/jre/lib; $(TAR) xf -)
	@#
	@#
	@# lib/
	@#
	$(CP) $(LIBDIR)/$(LIB_PREFIX)jvm.$(LIB_SUFFIX) $(JDK_IMAGE_DIR)/lib
	$(CP) $(LIBDIR)/$(LIB_PREFIX)jawt.$(LIB_SUFFIX) $(JDK_IMAGE_DIR)/lib
	@#
	@# bin/
	@#
	@# copy all EXE files and only certain DLL files from BINDIR
	$(MKDIR) -p $(JDK_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/*$(EXE_SUFFIX) $(JDK_IMAGE_DIR)/bin
	$(CP) $(BINDIR)/jli.$(LIBRARY_SUFFIX) $(JDK_IMAGE_DIR)/bin
    ifeq ($(ARCH_DATA_MODEL), 32)
      ifeq ($(COMPILER_VERSION), VS2003)
	$(CP) $(BINDIR)/msvc*71.$(LIBRARY_SUFFIX) $(JDK_IMAGE_DIR)/bin
      endif
    endif
  else # PLATFORM
	@#
	@# bin/
	@#
	($(CD) $(BINDIR)/..; $(TAR) cf - \
	    `$(FIND) bin \( -type f -o -type l \) -print `) | \
	    ($(CD) $(JDK_IMAGE_DIR); $(TAR) xf -)
  endif # PLATFORM
	@#
	@# lib/tools.jar
	@#
	$(JAR) c0f $(LIBDIR)/tools.jar $(addprefix \
		-C $(CLASSBINDIR) , $(TOOLS)) \
	        $(JAR_JFLAGS)
	@$(java-vm-cleanup)
	$(CP) $(LIBDIR)/tools.jar $(JDK_IMAGE_DIR)/lib/tools.jar
	@#
	@# lib/ct.sym
	@#
	$(JAVAC) -XDprocess.packages -proc:only \
	    -processor com.sun.tools.javac.sym.CreateSymbols \
	    -Acom.sun.tools.javac.sym.Jar=$(RT_JAR) \
	    -Acom.sun.tools.javac.sym.Dest=$(OUTPUTDIR)/symbols/META-INF/sym/rt.jar \
	    $(CORE_PKGS) $(NON_CORE_PKGS) $(EXCLUDE_PROPWARN_PKGS) $(EXPORTED_PRIVATE_PKGS)
	$(JAR) c0f $(LIBDIR)/ct.sym -C $(OUTPUTDIR)/symbols META-INF $(JAR_JFLAGS)
	@$(java-vm-cleanup)
	$(CP) $(LIBDIR)/ct.sym $(JDK_IMAGE_DIR)/lib/ct.sym
	@#
	@# CORBA supported orb.idl and ir.idl should be copied to lib
	@#
	$(CP) $(LIBDIR)/orb.idl $(JDK_IMAGE_DIR)/lib/orb.idl
	$(CP) $(LIBDIR)/ir.idl $(JDK_IMAGE_DIR)/lib/ir.idl
  ifeq ($(PLATFORM), linux)
	@#
	@# on Linux copy jexec from jre/lib to /lib
	@#
	$(CP) $(LIBDIR)/jexec $(JDK_IMAGE_DIR)/lib/jexec
  endif # PLATFORM
	@#
	@# src.zip
	@#
	$(MKDIR) -p $(JDK_IMAGE_DIR)/src
	@#
	@# The '*-*' pattern in the find command excludes files named with dashes,
	@# such as the java.nio templates for generated classes
	@#
	@# The Linux 'tar' command cannot handle the huge command line argument
	@# generated by the more efficient solaris/windows method of copying files.
	@# So for Linux, make use of the -T option (like Solaris' -I option) of
	@# obtaining the list of files from a file. MKS tar has no such option.
  ifeq ($(PLATFORM), linux)
	for d in $(SOURCE_DIRS); do \
	  $(RM) $(ABS_TEMPDIR)/src-files.list; \
	  ($(CD) $$d;  \
	    for sd in $(SOURCES) ; do \
              if [ -d $$sd ] ; then \
	        $(FIND) $$sd $(SOURCE_FILES_filter) \
		        -name '*.java' -print \
		        >> $(ABS_TEMPDIR)/src-files.list ; \
	      fi; \
	    done ; \
	  ) ; \
	  if [ -f  $(ABS_TEMPDIR)/src-files.list ] ; then \
	    ($(CD) $$d; $(TAR) cf - -T $(ABS_TEMPDIR)/src-files.list ) \
	       | ($(CD) $(JDK_IMAGE_DIR)/src; $(TAR) xf -); \
	  fi; \
	done
  else
	for d in $(SOURCE_DIRS); do \
	  $(RM) $(ABS_TEMPDIR)/src-files.list; \
	  ($(CD) $$d; \
	    for sd in $(SOURCES) ; do \
              if [ -d $$sd ] ; then \
	        $(FIND) $$sd $(SOURCE_FILES_filter) \
		        -name '*.java' -print \
		        >> $(ABS_TEMPDIR)/src-files.list ; \
	      fi; \
	    done ; \
	  ) ; \
	  if [ -f  $(ABS_TEMPDIR)/src-files.list ] ; then \
	    ($(CD) $$d; $(TAR) cf - `$(CAT) $(ABS_TEMPDIR)/src-files.list`) \
	      | ($(CD) $(JDK_IMAGE_DIR)/src; $(TAR) xf -); \
	  fi; \
	done
  endif
	$(RM) $(ABS_TEMPDIR)/src-files.list
	$(CHMOD) -R +w $(JDK_IMAGE_DIR)/src
	$(MKDIR) -p $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/java.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/java.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/manifest_info.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/parse_manifest.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/version_comp.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/version_comp.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/wildcard.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/wildcard.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/jli_util.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/jli_util.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/splashscreen_stubs.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(SHARE_SRC)/bin/splashscreen.h $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(PLATFORM_SRC)/bin/java_md.c $(JDK_IMAGE_DIR)/src/launcher
	$(CP) $(PLATFORM_SRC)/bin/java_md.h $(JDK_IMAGE_DIR)/src/launcher
	$(CD) $(JDK_IMAGE_DIR)/src; $(ZIPEXE) -qr ../src.zip *
	$(RM) -r $(JDK_IMAGE_DIR)/src
	@#
	@# demo, include
	@#
	@# since variables contain relative path names, create a
	@# temporary jar file and then move it.
	$(RM) -r $(DEMODIR)/jpda
	$(MKDIR) -p $(DEMODIR)/jpda
	$(RM) $(ABS_TEMPDIR)/tmp.jar
	$(CD) $(JPDA_SHARE_SRC)/classes; \
		$(ABS_JAR) cf $(ABS_TEMPDIR)/tmp.jar \
		`$(FIND) $(JPDA_DEMO_PKGS) -name SCCS -prune \
		-o \( -name '*.java' \
		   -o -name 'README*' \
		   -o -name '*.html' \
		   -o -name '*.jj' \) -print` \
		   $(JAR_JFLAGS)
	@$(CD) $(JPDA_SHARE_SRC)/classes; $(java-vm-cleanup)
	$(MV) $(TEMPDIR)/tmp.jar $(DEMODIR)/jpda/examples.jar
	@#
	@#
	$(CP) -r -f $(DEMODIR) $(JDK_IMAGE_DIR)
	$(CP) -r -f $(SAMPLEDIR) $(JDK_IMAGE_DIR)
	$(CP) -r $(INCLUDEDIR) $(JDK_IMAGE_DIR)
	@#
	@# jdk/docs
	@#
	@# add the platform appropriate EOL and extension to the text.
	$(CD) $(JDK_IMAGE_DIR); \
		$(RM) $(JDK_SOURCE_DOCLIST)
	for d in $(JDK_SOURCE_DOCLIST); do \
	    $(SED) 's/$$//g' $(SHARE_SRC)/doc/$(JDK_NAME)/$$d > $(JDK_IMAGE_DIR)/$$d ; \
	    $(CHMOD) 444 $(JDK_IMAGE_DIR)/$$d ; \
	done
	@#
	@# Swing BeanInfo generation
	@#
	$(CD) javax/swing/beaninfo; $(MAKE) swing-1.2-beans
  ifneq ($(PLATFORM), windows)
	$(MKDIR) -p $(JDK_IMAGE_DIR)/$(DEST_MAN_PATH)
	$(CP) $(MANDIR)/*.1 $(JDK_IMAGE_DIR)/$(DEST_MAN_PATH)
	@#
	@# Add Japanese manpages for Solaris
	@#
    ifeq ($(PLATFORM), linux)
	for manpage in $(JDK_MAN_PAGES); do \
	    for encoding in $(JA_TARGET_ENCODINGS); do \
		MAN_DEST_PATH=$(JDK_IMAGE_DIR)/man/ja; \
		if [ "$${encoding}" != "$(JA_SOURCE_ENCODING)" ]; then \
		    MAN_DEST_PATH=$${MAN_DEST_PATH}_JP.$${encoding}; \
		fi; \
		MAN_DEST_PATH=$${MAN_DEST_PATH}/man1; \
		$(MKDIR) -p $${MAN_DEST_PATH}; \
		$(CAT) $(JA_MANDIR)/ja/$${manpage} \
		    | $(NATIVE2ASCII) -encoding $(JA_SOURCE_ENCODING) \
		    | $(NATIVE2ASCII) -reverse -encoding $${encoding} \
		    > $${MAN_DEST_PATH}/$${manpage}; \
	    done; \
	done
	$(MV) $(JDK_IMAGE_DIR)/man/ja $(JDK_IMAGE_DIR)/man/ja_JP.$(JA_SOURCE_ENCODING)
	$(CD) $(JDK_IMAGE_DIR)/man; $(LN) -s ja_JP.$(JA_SOURCE_ENCODING) ja
    else
	for manpage in $(JDK_MAN_PAGES); do \
	    for encoding in $(JA_TARGET_ENCODINGS); do \
		MAN_DEST_PATH=$(JDK_IMAGE_DIR)/man/ja; \
		if [ "$${encoding}" != "$(JA_SOURCE_ENCODING)" ]; then \
		    MAN_DEST_PATH=$${MAN_DEST_PATH}_JP.$${encoding}; \
		fi; \
		MAN_DEST_PATH=$${MAN_DEST_PATH}/man1; \
		$(MKDIR) -p $${MAN_DEST_PATH}; \
		$(CAT) $(JA_MANDIR)/ja/$${manpage} \
		    | $(NATIVE2ASCII) -encoding $(JA_SOURCE_ENCODING) \
		    | $(SED) 's/@@VERSION@@/$(jdkversion)/g' \
		    | $(NATIVE2ASCII) -reverse -encoding $${encoding} \
		    > $${MAN_DEST_PATH}/$${manpage}; \
	    done; \
	done
    endif # PLATFORM
  endif # PLATFORM
	@#Copy demo applets
	$(MKDIR) -p $(JDK_IMAGE_DIR)/demo
	$(CP) -r -f $(DEMODIR)/applets $(JDK_IMAGE_DIR)/demo

# Trim out files we don't want to ship
trim-image-jdk::
	@# Remove tools that should not be part of SDK.
	for t in $(NOTJDKTOOLS); do \
	    $(RM) $(JDK_IMAGE_DIR)/bin/$${t}$(EXE_SUFFIX) \
		  $(JDK_IMAGE_DIR)/bin/*/native_threads/$${t}$(EXE_SUFFIX); \
	done
# Get list of Elf files in the jdk
JDK_ELF_LIST=$(ABS_TEMPDIR)/jdk-elf-files.list
$(JDK_ELF_LIST):
ifneq ($(PLATFORM), windows)
	$(RM) $@
	$(FIND) $(JDK_IMAGE_DIR)/jre/lib -type f -name \*.$(LIB_SUFFIX) >> $@
	$(FILE) `$(FIND) $(JDK_IMAGE_DIR)/jre/bin -type f -name \*$(EXE_SUFFIX)` \
	    | $(EGREP) 'ELF' | $(CUT) -d':' -f1 >> $@
	file `$(FIND) $(JDK_IMAGE_DIR)/bin -type f -name \*$(EXE_SUFFIX)` \
	    | $(EGREP) 'ELF' | $(CUT) -d':' -f1 >> $@
endif

# Post process the image (strips and mcs on files we are shipping)
process-image-jdk:: $(JDK_ELF_LIST)
ifneq ($(POST_STRIP_PROCESS), )
	for f in `$(CAT) $(JDK_ELF_LIST)`; do \
	  $(CHMOD) u+w $${f}; \
	  $(ECHO) $(POST_STRIP_PROCESS) $${f}; \
	  $(POST_STRIP_PROCESS) $${f}; \
	  $(CHMOD) go-w $${f}; \
	done
endif
ifneq ($(POST_MCS_PROCESS), )
	for f in `$(CAT) $(JDK_ELF_LIST)`; do \
	  $(CHMOD) u+w $${f}; \
	  $(ECHO) $(POST_MCS_PROCESS) $${f}; \
	  $(POST_MCS_PROCESS) $${f}; \
	  $(CHMOD) go-w $${f}; \
	done
endif
	$(RM) $(JDK_ELF_LIST)

###################################################################
# Compare JRE image filelist with previous release image filelist
###################################################################
previous-jre::
	$(RM) -r $(TEMPDIR)/previous_jre
	$(MKDIR) -p $(TEMPDIR)/previous_jre
	$(CP) $(PREVIOUS_JRE_BUNDLE) $(TEMPDIR)/previous_jre
ifeq ($(PLATFORM), linux)
	($(CD) $(TEMPDIR)/previous_jre; \
	   $(GUNZIP) -dc $(PREVIOUS_JRE_FILE) | \
	   $(TAR) xf - )
else
	($(CD) $(TEMPDIR)/previous_jre; \
	   $(TAR) xf $(PREVIOUS_JRE_FILE))
endif

compare-image-jre:: previous-jre $(TEMPDIR)/DirDiff/DirDiff.class
	$(JAVA) -classpath $(TEMPDIR)/DirDiff/ DirDiff \
	   $(TEMPDIR)/previous_jre/jre$(PREVIOUS_JDK_VERSION) \
	   $(JRE_IMAGE_DIR) | $(SORT) >> $(WARNING_FILE)
	$(ECHO) >> $(WARNING_FILE)
	@$(java-vm-cleanup)

###################################################################
# Compare JDK image filelist with previous release image filelist
###################################################################
previous-jdk::
	$(RM) -r $(TEMPDIR)/previous_jdk
	$(MKDIR) -p $(TEMPDIR)/previous_jdk
	$(CP) $(PREVIOUS_JDK_BUNDLE) $(TEMPDIR)/previous_jdk
ifeq ($(PLATFORM), linux)
	($(CD) $(TEMPDIR)/previous_jdk; \
	   $(GUNZIP) -dc $(PREVIOUS_JDK_FILE) | \
	   $(TAR) xf - )
else
	($(CD) $(TEMPDIR)/previous_jdk; \
	   $(TAR) xf $(PREVIOUS_JDK_FILE))
endif

compare-image-jdk:: previous-jdk $(TEMPDIR)/DirDiff/DirDiff.class
	$(JAVA) -classpath $(TEMPDIR)/DirDiff/ DirDiff \
	   $(TEMPDIR)/previous_jdk/jdk$(PREVIOUS_JDK_VERSION) \
	   $(JDK_IMAGE_DIR) | $(SORT) >> $(WARNING_FILE)
	$(ECHO) >> $(WARNING_FILE)
	@$(java-vm-cleanup)

######################################################
# clobber
######################################################
images-clobber::
	$(RM) -r $(JDK_TEMPDIR)
	$(RM) -r $(JRE_TEMPDIR)
	$(RM) -r $(REORDER_TEMPDIR)
	$(RM) -r $(JARFILELISTS_TEMPDIR)
	$(RM) -r $(META_INDEX_TEMPDIR)
ifeq ($(ARCH_DATA_MODEL), 32)
	$(CD) javax/swing/beaninfo; $(MAKE) swingbeans.clobber
	$(RM) -r $(DEMODIR)/jpda
	$(RM) -r $(CLASSBINDIR)/META-INF
	$(RM) $(TEMPDIR)/tmp.jar
endif
ifeq ($(PLATFORM), linux)
	$(RM) -r $(OUTPUTDIR)/$(ARCH)
endif
ifeq ($(PLATFORM), windows)
	$(RM) $(TEMPDIR)/rebase.input
endif
	$(RM) -r $(JDK_IMAGE_DIR)
	$(RM) -r $(JDK_DEBUG_IMAGE_DIR)
	$(RM) -r $(JRE_IMAGE_DIR)

compare-image-clobber:
	$(RM) -r $(TEMPDIR)/DirDiff
	$(RM) -r $(TEMPDIR)/previous_jre
	$(RM) -r $(TEMPDIR)/previous_jdk

images images-clobber::
	@$(ECHO) ">>>Finished making "$@" @ `$(DATE)` ...";
	@$(java-vm-cleanup)

.PHONY: images image-jre image-jdk \
	initial-image-jre initial-image-jdk \
	initial-image-jre-sol64 initial-image-jdk-sol64 \
	trim-image-jre trim-image-jdk \
	process-image-jre process-image-jdk \
	compare-image-jre compare-image-jdk \
	images-clobber compare-image-clobber

# Force rule
FRC:

