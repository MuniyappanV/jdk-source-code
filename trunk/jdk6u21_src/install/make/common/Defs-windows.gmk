#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

# @(#)Defs-windows.gmk	1.80 10/03/23
# Makefile to specify compiler flags for programs and libraries
# targeted to Windows builds.  Should not contain any rules.

include $(CONTROL_TOPDIR)/make/common/Defs-windows.gmk
include $(J2SE_TOPDIR)/make/common/Defs-windows.gmk

# Default to build 64bit JRE on Window and Linux
BUILD_DEPLOY_AMD64=true

DEPLOY_MSSDK=$(MSSDK)
ifdef ALT_PLUGIN_MSSDK
  DEPLOY_MSSDK=$(ALT_PLUGIN_MSSDK)
endif

# CC compiler object code output directive flag value
CC_OBJECT_OUTPUT_FLAG = -Fo

# PLATFORM_SRC may be set by .../ext/*/build/.../Defs.gmk
ifndef PLATFORM_SRC
  PLATFORM_SRC  = $(TOPDIR)/src/windows
endif # PLATFORM_SRC

# C Compiler flag definitions
# Note: gcc not yet supported on windows.
CFLAGS_COMMON   = -nologo -Zi $(GX_OPTION)
ifeq ($(ARCH_DATA_MODEL), 32)
  CFLAGS_OPT	= $(MS_RUNTIME_OPTION) -O1 -GA
else
  CFLAGS_OPT	= $(MS_RUNTIME_OPTION) -O1 -GA
endif
CFLAGS_DBG      = $(MS_RUNTIME_OPTION) -Od -Gm -ZI

LDEBUG = -debug

ifeq ($(VTUNE_SUPPORT), true)
  OTHER_CFLAGS = -Z7 -Ox 
  LDEBUG += -pdb:NONE
endif

BASELFLAGS = -nologo -map:$(OBJDIR)/$(@F).map -opt:REF
ifeq ($(ARCH_DATA_MODEL), 64)
  BASEFLAGS += /machine=IA64 
endif
LFLAGS = $(BASELFLAGS) $(LDEBUG) $(EXTRA_LFLAGS)

COMPILER_WARNING_LEVEL=3
ifeq ($(ARCH_DATA_MODEL), 32)
  CPPFLAGS_COMMON = -W$(COMPILER_WARNING_LEVEL) -DWIN32 -DIAL -D_X86_ -Dx86 -D_LITTLE_ENDIAN \
-DWIN32_LEAN_AND_MEAN -Fd$(OBJDIR)/ -Fe$(OBJDIR)/ -Fm$(OBJDIR)/ 
else
  CPPFLAGS_COMMON = -W$(COMPILER_WARNING_LEVEL) -DIAL -D_LITTLE_ENDIAN \
-Fd$(OBJDIR)/ -Fe$(OBJDIR)/ -Fm$(OBJDIR)/ 
endif
ifeq ($(ARCH_DATA_MODEL), 64)
  CPPFLAGS_COMMON += -Wp64 
endif
# Treat compiler warnings as errors, unless building in INSANE mode.
ifndef INSANE
  CFLAGS_COMMON += -WX
endif
CPPFLAGS_OPT    = -D NDEBUG
CPPFLAGS_DBG    = -D DEBUG

REBASE_ADDR = 0x6D000000

CXXFLAGS_COMMON = $(CFLAGS_COMMON)
CXXFLAGS_OPT    = $(CFLAGS_OPT)
CXXFLAGS_DBG    = $(CFLAGS_DBG)

# Always add compiler version specific options (e.g. bufferoverflowU.lib)
LNKFLAGS   += $(LFLAGS_$(COMPILER_VERSION))

WIN32LIBS = comctl32.lib kernel32.lib user32.lib gdi32.lib \
	    winspool.lib comdlg32.lib advapi32.lib shell32.lib \
	    ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib	

LDFLAGS_COMMON  = -subsystem:windows -machine:$(LIBARCH) \
		  -pdb:"$(OBJDIR)/$(patsubst %.exe,%.pdb,$(TARGET))" \
		  -implib:"$(OBJDIR)/$(patsubst %.exe,%.lib,$(TARGET))" \
		  -MAP:"$(OBJDIR)/$(patsubst %.exe,%.map,$(TARGET))" \
		  -out:"$(OBJDIR)/$(TARGET)" $(WIN32LIBS)



LDFLAGS_OPT     = -incremental:no
LDFLAGS_DBG     = -debug -pdb:NONE 

LINK_OUTPUT_FLAG = -out:

ifneq ($(LIBRARY),fdlibm)
  EXTRA_LIBS += advapi32.lib
endif

# default GREP_DEPLOY_ACTIONS, just pass it through
GREP_DEPLOY_ACTIONS = $(CAT)

ifeq ($(ARCH_DATA_MODEL),64)
  # Replace the product name for 64bit JRE
  AWK_ProductName = $(NAWK) 'BEGIN { FS="\t" } {if ($$1=="ProductName") {print $$1 "\t" $$2 " (64-bit)\t", $$3} else print $$0}'
  # install JAVA directory in ProgramFiles64Folder, change CommonFilesFolder in JDK
  AWK_Directory_ProgramFilesFolder = $(NAWK) 'BEGIN { FS="\t"; OFS="\t" } {if ($$2=="ProgramFilesFolder") {print $$1 "\tProgramFiles64Folder\t" $$3, $$4, $$5} else print $$0}'
  # change CommonFilesFolder in JDK
  AWK_Directory_CommonFilesFolder  = $(NAWK) 'BEGIN { FS="\t"; OFS="\t" } {if ($$2=="CommonFilesFolder")  {print $$1 "\tCommonFiles64Folder\t"  $$3, $$4, $$5} else print $$0}'
  # set 64-bit attribute on components
  AWK_Component_Attributes = $(NAWK) 'BEGIN { FS="\t"; OFS="\t" } {if (NR > 3) {print $$1, $$2, $$3, 256+$$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11, $$12, $$13, $$14} else print $$0}'
  # set RegLocator table Types for entries records to 18 to support reading 64-bit registry
  AWK_RegLocator_Type = $(NAWK) 'BEGIN { FS="\t"; OFS="\t" } {if ($$5=="2" && $$2=="2" && (($$1=="PrevConsumerVersionSignature") || ($$1=="PatchFromSignature") || ($$1=="SameVersionModeSignature") || ($$1=="SameVersionJREInstalledSignature"))) {print $$1, $$2, $$3, $$4, "18"} else print $$0}'
  ifneq ($(BUILD_DEPLOY_AMD64) , true)
    # remove jaws, javaws, and deploy if not supporting deployment
    GREP_DEPLOY_ACTIONS = $(GREP) -v "^jaws	" | $(GREP) -v "^javaws	" | $(GREP) -v "^deploy	"
  endif
else # just pass it through
  AWK_ProductName = $(CAT)
  AWK_Directory_ProgramFilesFolder = $(CAT)
  AWK_Directory_CommonFilesFolder = $(CAT)
  AWK_Component_Attributes = $(CAT)
endif
AWK_PropertyTable = $(AWK_ProductName) | $(NAWK) 'BEGIN { FS="\t"; OFS="\t" } { \
                if ($$1=="ImageCkSum") {printf "%s\t%s\t%s\n", $$1, "$(shell $(UNIXCOMMAND_PATH)cksum $(BIN_BUNDLEDIR)/patch-image.zip | $(NAWK) '{print $$1}')", $$3} \
                else if ($$1=="FullVersion") {print $$1, "$(FULL_VERSION)", $$3} \
                else print $$0}'
ChangePropertyTable = $(AWK_PropertyTable) | $(SED_JDK_VERSION) | $(SED_MAJOR_VERSION) | $(SED_MINOR_VERSION) | $(SED_MICRO_VERSION) | $(SED_UPDATE_VERSION) | $(SED_MSI_UPDATE)

#
# Different "levels" of optimization.
#
ifeq ($(CC_VERSION),msvc)
   CC_HIGHER_OPT = -xO4
   CC_LOWER_OPT  = -xO2
else # CC_VERSION
# not supported, but left for historical reference...
   CC_HIGHER_OPT = -O2
   CC_LOWER_OPT  = -O2
endif

ifeq ($(CC_VERSION), msvc)
  CC_DEPEND        = -FD
  CC_DEPEND_FILTER = 
else # CC_VERSION
# not supported, but left for historical reference...
  CC_DEPEND        = -MM
  CC_DEPEND_FILTER = $(SED) -e 's!$*\.$(OBJECT_SUFFIX)!$(dir $@)&!g'
endif # CC_VERSION

#PATCH Variables are defined here
RTPATCH_DIR = "c:/Progra~1/pocketsoft/rtpatch"
# Allow the user to override the default value...
ifdef ALT_RTPATCH_DIR
  RTPATCH_DIR = $(ALT_RTPATCH_DIR)
endif

ifeq ($(ARCH_DATA_MODEL), 32)
  ISHIELDDIR="C:/Program Files/InstallShield/Developer"
else
  ISHIELDDIR=C:/PROGRA~2/InstallShield/Devel~2
endif

ifdef ALT_ISHIELDDIR
  ISHIELDDIR=$(ALT_ISHIELDDIR)
endif

TMPISHIELD_DIR = $(TEMP_DIR)/ishield

# for use by ishield\sdk\Makefile and ishield\wrapper\wrapper.jdk\Makefile
SDKISHIELDDIR = $(TMPISHIELD_DIR)/patch/sdk
JDKINSTALLERFILESDIR = $(SDKISHIELDDIR)/sdk/offline/DiskImages/Disk1/
JDKINSTALLERMSIFILE = $(JDKINSTALLERFILESDIR)/*.msi


#installshield8 bug, ignore build errors on amd64
ifeq ($(ARCH), amd64)
	IGNORE_ON_AMD64=-
else
	IGNORE_ON_AMD64=
endif

#If on win64, install into a 64 ProgramFiles folder
ifeq ($(ARCH_DATA_MODEL), 32)
  FOLDER=
else
  FOLDER=64
endif
SED_FOLDER = $(SED) -e 's%SystemFOLDERFolder%System$(FOLDER)Folder%g'

#determine whether the installed ishield product is full or standalone
BUILDER = $(IGNORE_ON_AMD64)$(shell \
    if [ -r $(ISHIELDDIR)/SAAuto.dll ]; then \
      $(ECHO) $(ISHIELDDIR)/IsSaBld.exe ; \
    else \
      $(ECHO) $(ISHIELDDIR)/System/ISCmdBld.exe ; \
    fi)

WI20NT = $(shell \
    if [ -r $(ISHIELDDIR)/SAAuto.dll ]; then \
      $(ECHO) "$(ISHIELDDIR)/instmsiW.exe" ; \
    else \
      $(ECHO) "$(ISHIELDDIR)/ReDist/Language Independent/i386/instmsiW.exe" ; \
    fi)

WI209X = $(shell \
    if [ -r $(ISHIELDDIR)/SAAuto.dll ]; then \
      $(ECHO) "$(ISHIELDDIR)/instmsiA.exe" ; \
    else \
      $(ECHO) "$(ISHIELDDIR)/ReDist/Language Independent/i386/instmsiA.exe" ; \
    fi)

AUTO_LAYER=$(shell \
    if [ -r $(ISHIELDDIR)/SAAuto.dll ]; then \
      $(ECHO) "SAAuto8SP2" ; \
    else \
      $(ECHO) "ISWiAutomation" ; \
    fi)
SED_AUTOMATION_LAYER = $(SED) -e 's%LAYER%$(AUTO_LAYER)%g'

SIGNER=$(shell \
    if [ -r $(ISHIELDDIR)/SAAuto.dll ]; then \
      $(ECHO) "$(ISHIELDDIR)/signcode.exe" ; \
    else \
      $(ECHO) "$(ISHIELDDIR)/System/signcode.exe" ; \
    fi)

# Cert Store Variables are defined here
CERT_STORE_NAME = "my"
CERT_CN = "Sun Microsystems, Inc."

# Allow the user to override the default value...
ifdef ALT_CERT_STORE_NAME
  CERT_STORE_NAME = $(ALT_CERT_STORE_NAME)
endif
ifdef ALT_CERT_CN
  CERT_CN = $(ALT_CERT_CN)
endif
FULL_SIGNER=$(SIGNER) -s $(CERT_STORE_NAME) -cn $(CERT_CN) -t http://timestamp.verisign.com/scripts/timstamp.dll
#FULL_SIGNER=$(SIGNER) /spc a:\sun.spc /v a:\sun.pvk -t http://timestamp.verisign.com/scripts/timstamp.dll

# Signing Directories for the MSI/MSP
MSISIGNTOOLDIR = "C:/utils/msisign"

# signing with NSS signtool.exe

SIGNTOOL = "C:/utils/signtool/signtool.exe"
CERTDIR = "C:/utils/certdir"
CERTNICK = "sun microsystems, inc's VeriSign, Inc. ID"
CERTPASS = ""

ifdef ALT_SIGNTOOL
  SIGNTOOL = $(ALT_SIGNTOOL)
endif

ifdef ALT_CERTDIR
  CERTDIR = $(ALT_CERTDIR)
endif

ifdef ALT_CERTNICK
  CERTNICK = $(ALT_CERTNICK)
endif

ifdef ALT_CERTPASS
  CERTPASS = $(ALT_CERTPASS)
endif

ifndef HTTPSERVER
  HTTPSERVER=http://javadl.sun.com
endif

ifndef SIGN_FLAG
  SIGN_FLAG=0
endif

ifndef JDK_UPDATE_VERSION
  JDK_UPDATE_ISHIELD_VERSION=000
else
  #If the update string is not 3 characters (01a), then add an additional "0" for the cab name
  UPDATELENGTH=$(shell ($(ECHO) "${JDK_UPDATE_VERSION}" | $(NAWK) '{print length($$0);}'))
  ifeq ($(UPDATELENGTH), 2)
    JDK_UPDATE_ISHIELD_VERSION=$(JDK_UPDATE_VERSION)0
  else
    JDK_UPDATE_ISHIELD_VERSION=$(JDK_UPDATE_VERSION)
  endif
endif

ifndef BASE_IMAGE_UPDATE_VERSION
  BASE_IMAGE_UPDATE_ISHIELD_VERSION=000
else
  #If the update string is not 3 characters (01a), then add an additional "0" for the cab name
  UPDATELENGTH=$(shell ($(ECHO) "${BASE_IMAGE_UPDATE_VERSION}" | $(NAWK) '{print length($$0);}'))
  ifeq ($(UPDATELENGTH), 2)
    BASE_IMAGE_UPDATE_ISHIELD_VERSION=$(BASE_IMAGE_UPDATE_VERSION)0
  else
    BASE_IMAGE_UPDATE_ISHIELD_VERSION=$(BASE_IMAGE_UPDATE_VERSION)
  endif
endif

#variables used for iftw cab files
BASE_CAB_VERSION=$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)000
PATCH_CAB_VERSION=$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)$(JDK_UPDATE_ISHIELD_VERSION)

#SED commands to be used by both jre and sdk install builds
SED_ARCH = $(SED) -e 's%ARCH%$(ARCH_DATA_MODEL)%g'
SED_MAJOR_VERSION = $(SED) -e 's%MAJORVERSION%$(JDK_MAJOR_VERSION)%g'
SED_MINOR_VERSION = $(SED) -e 's%MINORVERSION%$(JDK_MINOR_VERSION)%g'
SED_MICRO_VERSION = $(SED) -e 's%MICROVERSION%$(JDK_MICRO_VERSION)%g'
SED_UPDATE_VERSION = $(SED) -e 's%UPDATEVERSION%$(JDK_UPDATE_VERSION)%g'
SED_COMPONENT_UPDATE_VERSION = $(SED) -e 's%COMPUPDATEVERSION%$(JDK_UPDATE_ISHIELD_VERSION)%g'
SED_FULL_VERSION = $(SED) -e 's%THEFULLVERSION%$(JDK_VERSION)%g'
SED_INSTALLDIR_CONSUMER = $(SED) -e 's%_SED_INSTALL_DIR_%jre$(JDK_MINOR_VERSION)%g'
SED_INSTALLDIR_STATIC = $(SED) -e 's%_SED_INSTALL_DIR_%JRE$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)~1.0_0|jre$(JDK_VERSION)%g'
SED_BASE_MAJOR_VERSION = $(SED) -e 's%MAJORBASEVERSION%$(BASE_IMAGE_MAJOR_VERSION)%g'
SED_BASE_MINOR_VERSION = $(SED) -e 's%MINORBASEVERSION%$(BASE_IMAGE_MINOR_VERSION)%g'
SED_BASE_MICRO_VERSION = $(SED) -e 's%MICROBASEVERSION%$(BASE_IMAGE_MICRO_VERSION)%g'
SED_BASE_UPDATE_VERSION = $(SED) -e 's%UPDATEBASEVERSION%$(BASE_IMAGE_UPDATE_VERSION)%g'
SED_BASE_COMPONENT_UPDATE_VERSION = $(SED) -e 's%COMPUPDATEBASEVERSION%$(BASE_IMAGE_UPDATE_ISHIELD_VERSION)%g'
SED_BASE_IMAGE_FULL_VERSION = $(SED) -e 's%BASEIMAGEFULLDOTVERSION%$(DOT_BASE_IMAGE_FULLVERSION)%g'
SED_NEW_IMAGE_FULL_VERSION = $(SED) -e 's%NEWIMAGEFULLDOTVERSION%$(DOT_NEW_IMAGE_FULLVERSION)%g'
PROCESS_FILES = $(SED_MAJOR_VERSION) | $(SED_MINOR_VERSION) | $(SED_MICRO_VERSION) | $(SED_BASE_MAJOR_VERSION) | $(SED_BASE_MINOR_VERSION) | $(SED_BASE_MICRO_VERSION) | $(SED_BASE_IMAGE_FULL_VERSION) | $(SED_NEW_IMAGE_FULL_VERSION) | $(SED_ARCH)
PROCESS_FILES_COMP= $(PROCESS_FILES) | $(SED_COMPONENT_UPDATE_VERSION) | $(SED_BASE_COMPONENT_UPDATE_VERSION)
SED_COMPONENT_ID_VERSION_STATIC= $(SED) -e 's%_COMPONENT_ID_VERSION_%$(ARCH_DATA_MODEL)$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)A$(JDK_UPDATE_ISHIELD_VERSION)%g'
SED_COMPONENT_ID_VERSION_CONSUMER= $(SED) -e 's%_COMPONENT_ID_VERSION_%$(ARCH_DATA_MODEL)$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)F$(JDK_UPDATE_ISHIELD_VERSION)%g'
SED_COMPONENT_ID_VERSION_UPDATE= $(SED) -e 's%_COMPONENT_ID_VERSION_%$(ARCH_DATA_MODEL)$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)B$(JDK_UPDATE_ISHIELD_VERSION)%g'
# ProductCodes
#             {26A24AE4-039D-4CA4-87B4-2F8_PRODUCT_CODE_VERSION_}
#             {26A24AE4-039D-4CA4-87B4-2F83216008F0}                - 32-bit 1.6.0_08 static
#             {26A24AE4-039D-4CA4-87B4-2F83216008FF}                - 32-bit 1.6.0_08 consumer
#             {26A24AE4-039D-4CA4-87B4-2F83216008FB}                - 32-bit 1.6.0_08 update
PRODUCT_CODE_VERSION_BASE= $(ARCH_DATA_MODEL)$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)
SED_PRODUCT_CODE_VERSION_STATIC= $(SED) -e 's%_PRODUCT_CODE_VERSION_%$(PRODUCT_CODE_VERSION_BASE)$(JDK_UPDATE_VERSION)F0%g'
SED_PRODUCT_CODE_VERSION_CONSUMER= $(SED) -e 's%_PRODUCT_CODE_VERSION_%$(PRODUCT_CODE_VERSION_BASE)$(JDK_UPDATE_VERSION)FF%g'
SED_PRODUCT_CODE_VERSION_UPDATE= $(SED) -e 's%_PRODUCT_CODE_VERSION_%$(PRODUCT_CODE_VERSION_BASE)$(JDK_UPDATE_VERSION)FB%g'
# UpgradeCode - one for Java 6 Family (consumer) and one per static update install
#             {57BDA5C6-443C-4D65-B233-28239_UPGRADE_CODE_VERSION_}
#             {57BDA5C6-443C-4D65-B233-282393216004}                - 32-bit 1.6.0_04 static
#             {57BDA5C6-443C-4D65-B233-2823932160FF}                - 32-bit 1.6.0 consumer
#             {57BDA5C6-443C-4D65-B233-2823932160FB}                - 32-bit 1.6.0 update 
UPGRADE_CODE_VERSION_BASE=          $(ARCH_DATA_MODEL)$(JDK_MAJOR_VERSION)$(JDK_MINOR_VERSION)$(JDK_MICRO_VERSION)
UPGRADE_CODE_VERSION_STATIC=              $(UPGRADE_CODE_VERSION_BASE)$(JDK_UPDATE_VERSION)
UPGRADE_CODE_VERSION_CONSUMER=            $(UPGRADE_CODE_VERSION_BASE)FF
UPGRADE_CODE_VERSION_UPDATE=              $(UPGRADE_CODE_VERSION_BASE)FB
SED_UPGRADE_CODE_VERSION_STATIC= $(SED) -e 's%_UPGRADE_CODE_VERSION_%$(UPGRADE_CODE_VERSION_STATIC)%g'
SED_UPGRADE_CODE_VERSION_CONSUMER= $(SED) -e 's%_UPGRADE_CODE_VERSION_%$(UPGRADE_CODE_VERSION_CONSUMER)%g'
SED_UPGRADE_CODE_VERSION_UPDATE= $(SED) -e 's%_UPGRADE_CODE_VERSION_%$(UPGRADE_CODE_VERSION_UPDATE)%g'
SED_UPGRADE_CODE_VERSIONS= $(SED) -e 's%_UPGRADE_CODE_STATIC_VERSION_%$(UPGRADE_CODE_VERSION_STATIC)%g' | $(SED) -e 's%_UPGRADE_CODE_CONSUMER_VERSION_%$(UPGRADE_CODE_VERSION_CONSUMER)%g' | $(SED) -e 's%_UPGRADE_CODE_UPDATE_VERSION_%$(UPGRADE_CODE_VERSION_UPDATE)%g'
#
SED_UPGRADE_ATTRIBS_STATIC=     $(SED) -e 's%_CONS_PROD_FOUND_ATTRIB_%256%g'
SED_UPGRADE_ATTRIBS_NON_STATIC= $(SED) -e 's%_CONS_PROD_FOUND_ATTRIB_%256%g'
#
SED_MODE_PROPERTY_STATIC= $(SED) -e 's/_MODE_PROPERTY_/S/g'
SED_MODE_PROPERTY_CONSUMER= $(SED) -e 's/_MODE_PROPERTY_/C/g'
SED_MODE_PROPERTY_UPDATE= $(SED) -e 's/_MODE_PROPERTY_/U/g'

SED_CONSUMER= $(SED_MARKETING_UPDATE_CONSUMER) | $(SED_PRODUCT_CODE_VERSION_CONSUMER) | $(SED_UPGRADE_CODE_VERSION_CONSUMER) | $(SED_MODE_PROPERTY_CONSUMER)
SED_STATIC=   $(SED_MARKETING_UPDATE)          | $(SED_PRODUCT_CODE_VERSION_STATIC)   | $(SED_UPGRADE_CODE_VERSION_STATIC)   | $(SED_MODE_PROPERTY_STATIC)
SED_UPDATE=   $(SED_MARKETING_UPDATE)          | $(SED_PRODUCT_CODE_VERSION_UPDATE)   | $(SED_UPGRADE_CODE_VERSION_UPDATE)   | $(SED_MODE_PROPERTY_UPDATE)

# InstallShield 8 supports Alpha, Intel, Intel64
# Windows Installer supports Intel, Intel64, and x64.
# "x64" pre-dates InstallShield 8 and the Oct 2002 Platform SDK it is based on.
# http://msdn2.microsoft.com/en-us/library/aa372070(VS.85).aspx
ifeq ($(ARCH_DATA_MODEL),64)
  SED_HARDWARE = $(SED) -e 's%HARDWARE%x64%g'
  #SED_HARDWARE = $(SED) -e 's%HARDWARE%Intel64%g'
else
  SED_HARDWARE = $(SED) -e 's%HARDWARE%Intel%g'
endif


# scripts for VCProj files

BACKSLASH_OUTPUTDIR = $(subst /,\\,$(OUTPUTDIR))
BACKSLASH_OBJDIR = $(subst /,\\,$(OBJDIR))
BACKSLASH_PWD = $(subst /,\\,$(shell pwd))
SED__OUTPUTDIR =            $(SED) -e 's%__OUTPUTDIR__%$(BACKSLASH_OUTPUTDIR)%g'
SED__PROJDIR =              $(SED) -e 's%__PROJDIR__%$(BACKSLASH_PWD)\\..\\..\\..\\ishield%g'
SED__MINOR_VERSION =        $(SED) -e "s%__JDK_MINOR_VERSION__%$(JDK_MINOR_VERSION)%g"
SED__MICRO_VERSION =        $(SED) -e "s%__JDK_MICRO_VERSION__%$(JDK_MICRO_VERSION)%g"
SED__FULL_VERSION =         $(SED) -e "s%__FULL_VERSION__%$(FULL_VERSION)%g"
SED__JDK_VERSION =          $(SED) -e "s%__JDK_VERSION__%$(JDK_VERSION)%g"
SED__DEFAULT_XML =          $(SED) -e "s%__DEFAULT_XML__%$(DEFAULT_XML)%g"
SED__J2SE_FVER =            $(SED) -e "s%__J2SE_FVER__%$(J2SE_VER)%g"
SED__J2SE_UPDATE_META_TAG = $(SED) -e "s%__J2SE_UPDATE_META_TAG__%$(J2SE_UPDATE_META_TAG)%g"
SED__J2SE_UPDATE_VER =      $(SED) -e "s%__J2SE_UPDATE_VER__%$(J2SE_UPDATE_VER)%g"
SED__COOKED_BUILD_NUMBER =  $(SED) -e "s%__COOKED_BUILD_NUMBER__%$(COOKED_BUILD_NUMBER)%g"


# Only define and use extra 7-Zip LZMA file compression if it is available

EC_TMP = $(shell if [ -d $(OUTPUTDIR)/tmp/deploy/lzma/win32 ] ; then \
  $(ECHO) true ; \
else \
  $(ECHO) false ; \
fi )

ifeq ($(EC_TMP), true)
  EXTRA_COMP_LIB_NAME = lzma.dll
  EXTRA_COMP_PATH = $(OUTPUTDIR)/tmp/deploy/lzma/win32/obj
  EXTRA_COMP_CMD_PATH = $(EXTRA_COMP_PATH)/lzma.exe
  EXTRA_COMP_CMD_MSI_OPTS=
  EXTRA_COMP_LIB_PATH = $(EXTRA_COMP_PATH)/$(EXTRA_COMP_LIB_NAME)
endif


    # Only define and use UPX compression if it is available

    UP_TMP = $(shell if [ -d $(OUTPUTDIR)/tmp/deploy/upx/win32 ] ; then \
      $(ECHO) true ; \
    else \
      $(ECHO) false ; \
    fi )
    ifeq ($(UP_TMP), true)
      CMD_COMP_CMD_PATH = $(OUTPUTDIR)/tmp/deploy/upx/win32/upx.exe
      CMD_COMP_CMD_INSTALL_OPTS = --all-methods
    endif

ifdef ALT_BASE_IMAGE_DIR
	# Get the Patch list from the build machine
	# using := will not define PATCH_LIST if empty
	PATCH_LIST:=$(shell $(CD) $(ALT_BASE_IMAGE_DIR); $(LS) -rd jre*)
endif
