#
# Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
# ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
#

#
# @(#)Defs.gmk	1.77 10/05/27
#

ifndef CONTROL_TOPDIR

ifndef CONTROL_TOPDIR_NAME
CONTROL_TOPDIR_NAME=control
endif #CONTROL_TOPDIR_NAME

CONTROL_TOPDIR=$(INSTALL_BUILDDIR)/../../$(CONTROL_TOPDIR_NAME)

ifdef ALT_TOPDIR
CONTROL_TOPDIR=$(ALT_TOPDIR)/$(CONTROL_TOPDIR_NAME)
endif #ALT_TOPDIR

ifdef ALT_CONTROL_TOPDIR
CONTROL_TOPDIR=$(ALT_CONTROL_TOPDIR)
endif #ALT_CONTROL_TOPDIR

endif #CONTROL_TOPDIR

ifndef J2SE_TOPDIR

ifndef J2SE_TOPDIR_NAME
J2SE_TOPDIR_NAME=j2se
endif #J2SE_TOPDIR_NAME

J2SE_TOPDIR=$(INSTALL_BUILDDIR)/../../$(J2SE_TOPDIR_NAME)

ifdef ALT_TOPDIR
J2SE_TOPDIR=$(ALT_TOPDIR)/$(J2SE_TOPDIR_NAME)
endif #ALT_TOPDIR

ifdef ALT_J2SE_TOPDIR
J2SE_TOPDIR=$(ALT_J2SE_TOPDIR)
endif #ALT_J2SE_TOPDIR

endif #J2SE_TOPDIR

# Define the generic JRE and JDK names.
#
# Note: the old J2SE names are still used in names for temporary directories
# that are part of the build process (for example, j2re-image).  There is no
# reason to risk changing these at this point in the Tiger release cycle, but
# they should be changed in Dragonfly.
#
# Set the product name:
#       jdk     Java(TM) SE Runtime Environment
#       jdkfb   Java(TM) Platform, Standard Edition for Business
#
ifeq ($(J4B), true)
  JRE_NAME = jrefb
  JDK_NAME = jdkfb
  JAVA_DESC = Java(TM) Platform, Standard Edition for Business
  JDK_DESC = Java(TM) SE Development Kit for Business
else
  JRE_NAME = jre
  JDK_NAME = jdk
  JAVA_DESC = Java(TM) SE Runtime Environment
  JDK_DESC = Java(TM) SE Development Kit
endif
  


include $(CONTROL_TOPDIR)/make/common/Defs.gmk
include $(INSTALL_BUILDDIR)/common/Defs-$(PLATFORM).gmk

SFX2SH		    = $(SH) $(INSTALL_BUILDDIR)/common/sfx2sh

JDK_SOURCE_DOCLIST = README.html README_ja.html README_zh_CN.html 

# The names of the license files to be copied to the JDK SVR4 package
LICENSE_DOCLIST = THIRDPARTYLICENSEREADME.txt

## Custom Revision milestone checking
## Point Custom rev will have 'revXXXXnn' as MILESTONE value
##    where XXXX is the stock/other symbol unique for customer
##    where nn is the 2 digit numeric number for point release
## See 6908562 for detail

ifeq ($(shell $(ECHO) $(MILESTONE) | $(CUT) -c1-3), rev)
  MILESTONE_CHECK=rev
else
  MILESTONE_CHECK=$(MILESTONE)
endif

# BASE_IMAGE_ZIP=$(DEVTOOLS_DRIVE)/devtools/$(PLATFORM)/PATCH-BASE/latest
ifdef ALT_BASE_IMAGE_JRE_ZIP
BASE_IMAGE_JRE_ZIP=$(ALT_BASE_IMAGE_JRE_ZIP)
endif
ifdef ALT_BASE_IMAGE_SDK_ZIP
BASE_IMAGE_SDK_ZIP=$(ALT_BASE_IMAGE_SDK_ZIP)
endif

STAGE_DIR=$(ABS_TEMP_DIR)/patch-staging

BASE_STAGE_JRE_DIR=$(STAGE_DIR)/base-jre-image
BASE_STAGE_SDK_DIR=$(STAGE_DIR)/base-sdk-image

NEW_STAGE_JRE_DIR=$(STAGE_DIR)/new-jre-image
NEW_STAGE_SDK_DIR=$(STAGE_DIR)/new-sdk-image

BASE_IMAGE_JRE_DIR=$(ABS_OUTPUTDIR)/j2re-image
ifdef ALT_BASE_IMAGE_JRE_ZIP
BASE_IMAGE_JRE_DIR=$(BASE_STAGE_JRE_DIR)
endif
ifdef ALT_BASE_IMAGE_DIR
BASE_IMAGE_JRE_DIR=$(ALT_BASE_IMAGE_DIR)/j2re-image
endif

NEW_IMAGE_JRE_DIR=$(ABS_OUTPUTDIR)/j2re-image
ifdef ALT_NEW_IMAGE_DIR
NEW_IMAGE_JRE_DIR=$(ALT_NEW_IMAGE_DIR)/j2re-image
endif

BASE_IMAGE_SDK_DIR=$(ABS_OUTPUTDIR)/j2sdk-image
ifdef ALT_BASE_IMAGE_SDK_ZIP
BASE_IMAGE_SDK_DIR=$(BASE_STAGE_SDK_DIR)
endif
ifdef ALT_BASE_IMAGE_DIR
BASE_IMAGE_SDK_DIR=$(ALT_BASE_IMAGE_DIR)/j2sdk-image
endif

NEW_IMAGE_SDK_DIR=$(ABS_OUTPUTDIR)/j2sdk-image
ifdef ALT_NEW_IMAGE_DIR
NEW_IMAGE_SDK_DIR=$(ALT_NEW_IMAGE_DIR)/j2sdk-image
endif

JRE_IMAGE_DIR=$(ABS_OUTPUTDIR)/j2re-image
JDK_IMAGE_DIR=$(ABS_OUTPUTDIR)/j2sdk-image
JDK_DEBUG_IMAGE_DIR=$(ABS_OUTPUTDIR)/j2sdk-debug-image

COPKG_DIR=$(INSTALL_BUILDDIR)/../src/copkg
COPKG_JAVADB_DIR=$(COPKG_DIR)/javadb

COPKG_VISUALVM_DIR=$(COPKG_DIR)/visualvm
COPKG_VISUALVM_CMN_ZIP=$(COPKG_VISUALVM_DIR)/common/visualvm.zip
COPKG_VISUALVM_PLATFORM_ZIP=$(COPKG_VISUALVM_DIR)/$(PLATFORM)/$(PLATFORM)-$(ARCH).zip

# CAB file locations
#
ifdef ALT_CAB_LOCATION 
  CAB_LOCATION=$(ALT_CAB_LOCATION)
  SPONSOR_LOCATION=$(ALT_CAB_LOCATION)/sp
  DEFAULT_XML=$(CAB_LOCATION)/$(FULL_VERSION).xml
else
  CAB_LOCATION=http://javadl.sun.com/webapps/download/GetFile/$(FULL_VERSION)/$(PLATFORM)-$(ARCH)
  SPONSOR_LOCATION=http://javadl-esd.sun.com/update/$(JDK_MAJOR_VERSION).$(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION)/sp-$(FULL_VERSION)
  DEFAULT_XML=http://javadl-esd.sun.com/update/$(JDK_MAJOR_VERSION).$(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION)/$(FULL_VERSION).xml
endif


ifneq ($(ARCH_DATA_MODEL), 32)
  OBJDIRNAME  = obj$(ARCH_DATA_MODEL)
  OBJDIR      = $(TEMPDIR)/$(OBJDIRNAME)
  IS32BITARCH      = 0
else
  OBJDIRNAME  = obj
  OBJDIR      = $(TEMPDIR)/$(OBJDIRNAME)
  IS32BITARCH      = 1
endif

BINDIR      = $(OUTPUTDIR)/bin
ifeq ($(PLATFORM), solaris)
  ifeq ($(ARCH_DATA_MODEL), 64)
    BINDIR      = $(OUTPUTDIR)/bin/$(ARCH)
  endif
endif

ifdef USE_ONLY_BOOTDIR_TOOLS
  JAVA		= $(BOOTDIR)/bin/java
  JAVAC		= $(BOOTDIR)/bin/javac
else
  JAVA=$(BINDIR)/java
  JAVAC=$(BINDIR)/javac
endif


# Tool flags
#
CFLAGS          = $(CFLAGS_$(VARIANT)) $(CFLAGS_COMMON) $(OTHER_CFLAGS)
CXXFLAGS        = $(CXXFLAGS_$(VARIANT)) $(CXXFLAGS_COMMON) $(OTHER_CXXFLAGS)
LCFLAGS         = $(CFLAGS_$(VARIANT)) $(LCFLAGS_COMMON) $(OTHER_CFLAGS)
CPPFLAGS        = $(CPPFLAGS_$(VARIANT)) $(CPPFLAGS_COMMON) $(OTHER_CPPFLAGS) \
		  $(DEFINES) $(OPTIONS:%=-D%)
LCPPFLAGS       = $(CPPFLAGS_$(VARIANT)) $(LCPPFLAGS_COMMON) \
		  $(OTHER_CPPFLAGS) $(DEFINES) $(OPTIONS:%=-D%)
LDFLAGS         = $(LDFLAGS_$(VARIANT)) $(LDFLAGS_COMMON) $(OTHER_LDFLAGS)
LDLIBS          = $(OTHER_LDLIBS) $(LDLIBS_$(VARIANT)) $(LDLIBS_COMMON)




#Patch Variables that we need are initialized here

#Parse the fullversion.
#Format: MAJ_NUM.MIN_NUM.MIC_NUM[_UPDATE_VERSION][-MILESTONE]-BUILD_NUMBER
#RULE1: 
#	MAJ,MIN,MIC are seperated by .
#RULE2:
#	The last -b specifies the BUILD_NUMBER
#RULE3:
#	UPDATE always preceded by _ (underscore)
#RULE4:
#	If there are more than 1 - then there is milestone preceded by the
#	first dash


NEW_IMAGE_FULLVERSION := $(shell $(NEW_IMAGE_JRE_DIR)/bin/java -fullversion 2>&1 | $(NAWK) -F'"' '{print $$2 }')
DOT_NEW_IMAGE_FULLVERSION := $(shell $(ECHO) $(NEW_IMAGE_FULLVERSION) | $(TR) - . )
_DOT_VERSION_STRING=$(shell $(ECHO) $(NEW_IMAGE_FULLVERSION) | $(CUT) -f1 -d\_  | $(CUT) -f1 -d\-)
NEW_IMAGE_MAJOR_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f1 -d.)
NEW_IMAGE_MINOR_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f2 -d.)
NEW_IMAGE_MICRO_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f3 -d.)
NEW_IMAGE_UPDATE_VERSION := $(shell $(ECHO) $(NEW_IMAGE_FULLVERSION) | $(NAWK) -F_ '$$2 ~ /^[0-9]/ { split($$2,uv,"-") ; print uv[1] }')
NEW_IMAGE_BUILD_NUMBER := $(shell $(ECHO) $(NEW_IMAGE_FULLVERSION) | $(NAWK) -F- '$$3 ~ /^b/ {print $$3} $$2 ~ /^b[0-9]/ {print $$2}')
NEW_IMAGE_MILESTONE := $(shell $(ECHO) $(NEW_IMAGE_FULLVERSION) | $(NAWK) -F- '$$3 ~ /^b[0-9]/ {print $$2}')

ifeq ($(ARCH_DATA_MODEL), 32)
  BASE_IMAGE_FULLVERSION := 1.6.0
else
  BASE_IMAGE_FULLVERSION := $(shell $(BASE_IMAGE_JRE_DIR)/bin/java -fullversion 2>&1 | $(NAWK) -F'"' '{print $$2 }')
endif

DOT_BASE_IMAGE_FULLVERSION := $(shell $(ECHO) $(BASE_IMAGE_FULLVERSION) | $(TR) - . )
_DOT_VERSION_STRING=$(shell $(ECHO) $(BASE_IMAGE_FULLVERSION) | $(CUT) -f1 -d\_  | $(CUT) -f1 -d\-)
BASE_IMAGE_MAJOR_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f1 -d.)
BASE_IMAGE_MINOR_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f2 -d.)
BASE_IMAGE_MICRO_VERSION := $(shell $(ECHO) $(_DOT_VERSION_STRING) | $(CUT) -f3 -d.)
BASE_IMAGE_UPDATE_VERSION := $(shell $(ECHO) $(BASE_IMAGE_FULLVERSION) | $(NAWK) -F_ '$$2 ~ /^[0-9]/ { split($$2,uv,"-") ; print uv[1] }')
BASE_IMAGE_BUILD_NUMBER := $(shell $(ECHO) $(BASE_IMAGE_FULLVERSION) | $(NAWK) -F- '$$3 ~ /^b/ {print $$3} $$2 ~ /^b[0-9]/ {print $$2}')
BASE_IMAGE_MILESTONE := $(shell $(ECHO) $(BASE_IMAGE_FULLVERSION) | $(NAWK) -F- '$$3 ~ /^b[0-9]/ {print $$2}')

ifdef BASE_IMAGE_UPDATE_VERSION
    US_BASE_IMAGE_UPDATE_VERSION = _$(BASE_IMAGE_UPDATE_VERSION)
endif

ifdef NEW_IMAGE_UPDATE_VERSION
   US_NEW_IMAGE_UPDATE_VERSION = _$(NEW_IMAGE_UPDATE_VERSION)
   DASH_NEW_IMAGE_UPDATE_VERSION = -$(NEW_IMAGE_UPDATE_VERSION)
endif

PATCH_JRE_FILENAME = patch
PATCH_SDK_FILENAME = patch

PATCH_VERSION=$(NEW_IMAGE_MAJOR_VERSION)$(NEW_IMAGE_MINOR_VERSION)$(NEW_IMAGE_MICRO_VERSION)$(US_NEW_IMAGE_UPDATE_VERSION)-$(NEW_IMAGE_BUILD_NUMBER)

BASE_IMAGE_VERSION=$(BASE_IMAGE_MAJOR_VERSION).$(BASE_IMAGE_MINOR_VERSION).$(BASE_IMAGE_MICRO_VERSION)$(US_BASE_IMAGE_UPDATE_VERSION)
NEW_IMAGE_VERSION=$(NEW_IMAGE_MAJOR_VERSION).$(NEW_IMAGE_MINOR_VERSION).$(NEW_IMAGE_MICRO_VERSION)$(US_NEW_IMAGE_UPDATE_VERSION)


PATCH_OUTPUTDIR=$(ABS_TEMP_DIR)/patchgen

ifdef NEW_IMAGE_MILESTONE
	DASH_NEW_IMAGE_MILESTONE=-$(NEW_IMAGE_MILESTONE)
endif

FINAL_JRE_TARGET=$(JRE_NAME)-$(JDK_MKTG_UNDERSCORE_VERSION)$(DASH_NEW_IMAGE_MILESTONE)-$(NEW_IMAGE_BUILD_NUMBER)-$(PLATFORM)-$(ARCH)-update$(EXE_SUFFIX)
FINAL_SDK_TARGET=$(JDK_NAME)-$(JDK_MKTG_UNDERSCORE_VERSION)$(DASH_NEW_IMAGE_MILESTONE)-$(NEW_IMAGE_BUILD_NUMBER)-$(PLATFORM)-$(ARCH)-update$(EXE_SUFFIX)

# Bundle names
BIN_BUNDLE_NAMEPART = $(JDK_MKTG_UNDERSCORE_VERSION)-$(MILESTONE)-bin-$(BUILD_NUMBER)-$(PLATFORM)-$(ARCH)
# The short bundle name is used externally
ifneq ($(MILESTONE),fcs)
BIN_SHORT_BUNDLE_NAMEPART = $(JDK_MKTG_UNDERSCORE_VERSION)-$(MILESTONE)-$(PLATFORM)-$(ARCH)
else
BIN_SHORT_BUNDLE_NAMEPART = $(JDK_MKTG_UNDERSCORE_VERSION)-$(PLATFORM)-$(ARCH)
endif

BUNDLE_DATE := $(shell $(DATE) '+%d_%b_%Y' | $(TR) "A-Z" "a-z")
ifdef ALT_BUNDLE_DATE
  BUNDLE_DATE := $(ALT_BUNDLE_DATE)
endif

#Bundle names for xpi and jxpi install methods
#
XPI_BUNDLE=xpiinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE).exe
XPI_BUNDLE_SHORT=xpiinstall.exe
JXPI_BUNDLE=jxpiinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE).exe
JXPI_BUNDLE_SHORT=jxpiinstall.exe

XPI_RV_BUNDLE=xpiinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE)-rv.exe
XPI_RV_BUNDLE_SHORT=xpiinstall-rv.exe
JXPI_RV_BUNDLE=jxpiinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE)-rv.exe
JXPI_RV_BUNDLE_SHORT=jxpiinstall-rv.exe

JCAB_BUNDLE=JavaSetup$(JDK_MINOR_VERSION)u$(JDK_UPDATE_VERSION).exe
JCAB_RV_BUNDLE=JavaSetup$(JDK_MINOR_VERSION)u$(JDK_UPDATE_VERSION)-rv.exe

JCHROME_BUNDLE=chromeinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE).exe
JCHROME_RV_BUNDLE=chromeinstall-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE)-rv.exe



###################################################################
#
# windows and linux platform tar filenames cannot have ":" in them, 
# which FULL_VERSION
# may have in its time value.
###################################################################
JDK_BUNDLE_NAME         = $(JDK_NAME)-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE)
JDK_DEBUG_BUNDLE_NAME   = $(JDK_NAME)-$(BIN_BUNDLE_NAMEPART)-debug-$(BUNDLE_DATE)
JRE_BUNDLE_NAME         = $(JRE_NAME)-$(BIN_BUNDLE_NAMEPART)-$(BUNDLE_DATE)

JDK_SHORT_BUNDLE_NAME   = $(JDK_NAME)-$(BIN_SHORT_BUNDLE_NAMEPART)
JRE_SHORT_BUNDLE_NAME   = $(JRE_NAME)-$(BIN_SHORT_BUNDLE_NAMEPART)

JRE_TEMPORARY_DIR      = jre$(JDK_VERSION)
JDK_TEMPORARY_DIR      = jdk$(JDK_VERSION)
JRE_NODOTVERSION       = $(subst .,,$(JDK_VERSION))

JRE_JAVAWS = bin/javaws
JDK_JAVAWS = jre/bin/javaws

#################################################################
#
# variable for building jre combo installer
#
#################################################################
ifdef ALT_JRE_32BIT_FILEPATH
  JRE_32BIT_FILEPATH = $(ALT_JRE_32BIT_FILEPATH)
else
  JRE_32BIT_FILEPATH = $(ALT_OUTPUTDIR)/bundles/$(JRE_BUNDLE_NAME)$(EXE_SUFFIX)
endif

#################################################################
#
# Universal iterator macro - repeat command if it failes given number of
# times with given delay and only then exit with error.
# Introduced to workaround random connection failure to verisign.com
# during signing process.
#
# Usage: $(call TryFewTimes, try_count, sleep_time, command)
#
#################################################################

define TryFewTimes
	k=0; \
	echo "Trying $1 times" ; \
	while [ $$k -le $1 ]; do \
		$3 ; \
		if [ $$? -eq 0 ]; then \
			break; \
		fi ; \
		echo "attempt $$k failed - waiting $2 seconds for next attempt..." ; \
		sleep $2 ; \
		k=`expr $$k + 1`; \
	done ; \
	if [ $$k -gt $1 ]; then \
		echo "ERROR - command failed after $1 attempts" ; \
		exit 1 ; \
	fi
endef

#################################################################
#
# Try 3 times given command with 5 minutes delay if it failed
#
#################################################################

define Try3Times
	$(call TryFewTimes, 3, 300, $1)
endef

