#
# Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
# Use is subject to license terms.
#
# pragma ident "@(#)postinstall	1.73 10/03/23 Sun Microsystems"
#
# The JRE package installs links outside of its BASEDIR from "utilities"
# in /usr/bin, up to the /usr/java link which (in turn) points to the
# default JVM. This script installs these links which are independent
# of BASEDIR.
#
# The current system default is determined by the setting of the /usr/java
# symbolic link.
#
# In general, the newly installed jre/sdk should make itself the system
# default iff:
#
#	There is no current system default or it appears to be corrupt.
#
#	The current default is outside of the range of expected defaults
#	for the underlying release of Solaris and this package is within
#	that range.
#
# The single exception to this algorithm is if the version being installed
# is a more recent patch within the the same Micro release family as the
# current default, then the version being installed shall make itself the
# default. The rough translation of this is "patches are patches".
#

#
# InstallLinks ( default_flag )
#
# Shell routine to install the /usr/bin links. Note that we want to register
# these as part of each package which uses them, so that they won't be
# removed until the last Java is removed from the system (or the last Java
# which has that particular component.
#
# Be sure to modify the space file if you add to or subtract from the list
# of links.
#
# Parameters:
#   $1	default_flag	"true" if this package is being installed as the
#			Solaris system default, "false" otherwise.
#
InstallLinks() {

    $INSTALLF -c none $PKGINST $BIN_PATH d 0755 root bin

    BIN_FILES="java keytool policytool rmid rmiregistry tnameserv \
      orbd servertool"
    for file in $BIN_FILES; do
	$INSTALLF -c none $PKGINST "$BIN_PATH/${file}=../java/bin/${file}" s
    done

    JRE_BIN_FILES="jcontrol ControlPanel"
    for file in $JRE_BIN_FILES; do
	$INSTALLF -c none $PKGINST "$BIN_PATH/${file}=../java/jre/bin/${file}" s
    done

    #
    # IMPORTANT NOTE: Special handling for the /usr/bin/javaws symbolic
    # link. See PSARC/2003/091.
    #
    # If this version is being made the default, force the link to the
    # "normal" form.  If not, see if the current setting of the link
    # points at a valid javaws executable. If it doesn't, point it at
    # this installation, but only if this is being installed in the
    # default /usr/jdk directory.
    #
    #	if ("the package being installed will be the default") then
    #	    [Re]Create the link through /usr/java.
    #	else if ("/usr/bin/javaws doesn't exist") then
    #	    Create the link to point directly to this package
    #	else if ("it is a link and is 'dangling'") then
    #	    Create the link to point directly to this package
    #	endif
    #
    # Note that it is not a bug that /usr/bin/javaws isn't registered with
    # the package data base (via installf).
    #
    if [ "$1" = "true" ]; then
	${RM} -f ${BIN_JAVAWS}
	${LN} -s ../java/${REL_JAVAWS} ${BIN_JAVAWS}
    elif [ ! -f ${BIN_JAVAWS} ] && [ ! -d ${BIN_JAVAWS} ] && \
	 [ ! -h ${BIN_JAVAWS} ]; then 
	${RM} -f ${BIN_JAVAWS}
	${LN} -s ../${REGISTRY_DIR}/${REGISTRY_ENTRY}/${REL_JAVAWS} \
	  ${BIN_JAVAWS}
    elif [ -h ${BIN_JAVAWS} ]; then
	target=`FollowLink ${BIN_JAVAWS}`
	if [ ! -x $target ]; then
	    ${RM} -f ${BIN_JAVAWS}
	    ${LN} -s ../${REGISTRY_DIR}/${REGISTRY_ENTRY}/${REL_JAVAWS} \
	      ${BIN_JAVAWS}
        fi
    fi
}

#
# Shell routine to install the /usr symbolic link of /usr/java.
#
# Note that it is not a bug that /usr/java isn't registered with
# the package database. Multiple instances will each have there own
# idea of what this link value should be, so (to avoid pkgchk warnings)
# all manipulation is done via postinstall and preremove scripts.
#
# Returns:
#	zero:		The link was created or altered.
#	non-zero:	The link was not altered
#
SetJavaLink() {

    #
    # If there is nothing there just create a link to this instance.
    #
    if [ ! -f ${JAVA_PATH} ] && [ ! -d ${JAVA_PATH} ] &&
       [ ! -h ${JAVA_PATH} ]; then
	${RM} -f ${JAVA_PATH}
	${LN} -s ${JAVA_LINK_VALUE} ${JAVA_PATH}
	return 0
    fi

    #
    # If there is something there but its not a symbolic link, leave it
    # alone.  Funky things have been done to this system which we had better
    # not muck with.
    #
    if [ ! -h ${JAVA_PATH} ]; then
	return 1
    fi

    #
    # It exists and is a symbolic link.  Possibly we want to do something
    # with it
    #
    # First, resolve what it (and any subsequent links) point to.
    path=`FollowLink ${JAVA_PATH}`

    #
    # If it is 'dangling' (points to something that is no longer a valid
    # JVM, or perhaps never was), take it over.  The simplistic test is for
    # an executable object called "java" at the expected path relative to
    # the final destination of this link.
    #
    if [ ! -x ${path}/bin/java ]; then
	${RM} -f ${JAVA_PATH}
	${LN} -s ${JAVA_LINK_VALUE} ${JAVA_PATH}
	return 0
    fi

    #
    # Getting this far, indicates that the symbolic link exists and points
    # to something which is very likely to be a valid JVM.
    #
    # If the current default is out side of the default range for the
    # Solaris release and the release being installed is within the
    # default range, steal the link.
    #
    # Note that we can't tell the exact version of JVM release found
    # in the legacy directories of /usr/java1.1, /usr/java1.2, or
    # /usr/j2se.  We can only assume the Minor release family found there.
    # Be conservative and assume that the JVM installed there is the most
    # advanced within that family.
    #
    GetDefaultRange
    current_dir=`basename $path`
    if [ "$current_dir" = "j2se" ]; then
	current_tuple=`ExpandPrefixInfinity 1.4`
    elif [ "$current_dir" = "java1.2" ]; then
	current_tuple=`ExpandPrefixInfinity 1.2`
    elif [ "$current_dir" = "java1.1" ]; then
	current_tuple=`ExpandPrefixInfinity 1.1`
    else
	current_tuple=`GetRel $current_dir`
	current_tuple=`ExpandPrefix $current_tuple`
    fi
    prodver_tuple=`ExpandPrefix $PRODVERS`
    if [ \( "`RelCmp $current_tuple $DEFAULT_MIN`" = "lt" -o \
	    "`RelCmp $current_tuple $DEFAULT_MAX`" = "gt" \) -a \
	 \( "`RelCmp $prodver_tuple $DEFAULT_MIN`" != "lt" -a \
	    "`RelCmp $prodver_tuple $DEFAULT_MAX`" != "gt" \) ]; then
	${RM} -f ${JAVA_PATH}
	${LN} -s ${JAVA_LINK_VALUE} ${JAVA_PATH}
	return 0
    fi

    #
    # Subsequent tests for acquiring the link depend upon both the
    # current owner and this package being referenced through the
    # /usr/jdk directory. We know this is true for this package.
    # If this isn't true for the existing default, bail out.
    #
    ls=`ls -l ${JAVA_PATH}`
    target=`echo $ls | cut -f 11 -d " "`
    link=`dirname ${JAVA_PATH}`/`dirname $target`
    link=`echo $link | sed -e "s:/\./:/:g" -e "s:[^/]*/\.\./::g"`
    if [ "$link" != "${REGISTRY_PATH}" ]; then
	return 1
    fi
    target=`basename $target`
    current_tuple=`GetRel $target`

    #
    # Finally, if the link points to a release in the same Micro (dot-dot)
    # family, but of a lower patch level, take over the link.
    #
    if [ "`GetMicro $prodver_tuple`" = "`GetMicro $current_tuple`" ]; then
	if [ "`RelCmp $prodver_tuple $current_tuple`" = "gt" ]; then
	    ${RM} -f ${JAVA_PATH}
	    ${LN} -s ${JAVA_LINK_VALUE} ${JAVA_PATH}
	    return 0
	fi
    fi

    return 1
}

#
# SetLatestLink
#
# Determining the correct algorithm to apply for setting the "latest"
# link isn't as obvious as it might seem. The complication is due to
# package removal.  If the "latest" is being removed, you want to set
# the "latest" link to something else.  The trouble is, if that something
# else wasn't put there via pkgadd (a tar ball for example) or simply
# predates the creation of this interface, absolutely nothing will
# happen on that removal and the link will be left dangling.
#
# There is no complete solution for this, but following algorithm
# limits the problem area to systems where some installs happened
# via packages and other installs by tar archives - in other words,
# an edge condition in a rare scenario.
#
# On installation:
#
#	if <"latest" doesn't exist, or points to something older> then
#		set latest to point at the instance being installed
#
# On removal:
#
#	scan the registry for the most recent of the remaining JVMs
#	if <the most recent remaining is >= 1.5.0_01> then
#		set the link to point to the most recent remaining
#	else
#		remove the link
#	fi
#
# 1.5.0_01 is significant, because that is the first jvm which will
# manipulate this link, and hence, won't leave it dangling should it
# be removed.  The algorithm could be modified to carry back as far
# as 1.4.2_05, with the only downside being the potential for dangling
# links.  Carrying it back beyond this would be a nightmare, because
# a not-so-obvious part of the semantic of "latest", is that it is
# Multiple JRE enabled.
#
SetLatestLink() {

    #
    # If there is nothing there, just create the link to this instance.
    #
    # (Its such a bug in "test" and the shells that this isn't trivial)
    #
    if [ ! -h ${LATEST_PATH} ] && [ ! -d ${LATEST_PATH} ] && \
       [ ! -f ${LATEST_PATH} ] ; then
	${RM} -f ${LATEST_PATH}
	${LN} -s ${LATEST_LINK_VALUE} ${LATEST_PATH}
	return 0
    fi

    #
    # If there is something there but its not a symbolic link, leave it
    # alone.  Funky things have been done to this system which we had better
    # not muck with.
    #
    if [ ! -h ${LATEST_PATH} ]; then
	return 1
    fi

    #
    # It exists and is a symbolic link.  Possibly we want to do something
    # with it
    #
    # First, resolve what it (and any subsequent links) point to.
    #
    path=`FollowLink ${LATEST_PATH}`

    #
    # If it is 'dangling' (points to something that is no longer a valid
    # JVM, or perhaps never was), take it over.  The simplistic test is for
    # an executable object called "java" at the expected path relative to
    # the final destination of this link.
    #
    if [ ! -x ${path}/bin/java ]; then
	${RM} -f ${LATEST_PATH}
	${LN} -s ${LATEST_LINK_VALUE} ${LATEST_PATH}
	return 0
    fi

    #
    # Getting this far, indicates that the symbolic link exists and points
    # to something which is very likely to be a valid JVM.
    #
    # Unlike the twisty maze of logic in SetJavaLink, all you need to do
    # here is compare this JVM to the current "latest" and see which is
    # indeed the latest and set the link if appropriate.
    #
    current_dir=`basename $path`
    current_rel=`GetRel $current_dir`
    current_tuple=`ExpandPrefix $current_rel`
    prodver_tuple=`ExpandPrefix ${PRODVERS}`
    if [ "`RelCmp $current_tuple $prodver_tuple`" = "lt" ]; then
	${RM} -f ${LATEST_PATH}
	${LN} -s ${LATEST_LINK_VALUE} ${LATEST_PATH}
    fi
    return 0
}

#
# CreateGnomeTheme ( theme )
#
# Helper routine to set up the icon directory structure under a theme.
#
# Parameters:
#   $1  theme		Gnome theme directory to establish.
#
CreateGnomeTheme() {
    _theme=$1
    $INSTALLF -c none ${PKGINST} ${_theme} d 0755 root other
    for _res in ${RESOLUTIONS}; do
	$INSTALLF -c none ${PKGINST} ${_theme}/${_res} d 0755 root other
	for _type in apps mimetypes ; do
	    $INSTALLF -c none ${PKGINST} \
	        ${_theme}/${_res}/${_type} d 0755 root other
	done
    done
}

#
# RegisterGnomeDirs ()
#
# Shell routine to register/create the Gnome directories need by this
# installation.  This is done dynamically (rather than in the prototype_com
# file), because is some cases this is not done (notably, when the package
# is relocated and not part of an system installation).
#
RegisterGnomeDirs() {
    $INSTALLF -c none ${PKGINST} ${SHARE_PATH} d 0755 root sys

    #
    # JDS 4: Freedesktop/Gnome later than 2.8 (mostly).  Hopefully the way
    # it will continue to be.
    #
    $INSTALLF -c none ${PKGINST} ${SHARE_ICONS} d 0755 root other
    for _theme in ${THEMES} ; do
	if [ -d ${SHARE_ICONS}/${_theme} ]; then
	    CreateGnomeTheme ${SHARE_ICONS}/${_theme}
	fi
    done
    $INSTALLF -c none ${PKGINST} ${SHARE_APPS} d 0755 root other

    #
    # JDS 3: Legacy Gnome (2.6) installations.
    #
    if [ -d ${SHARE_MIME_INFO} ] || [ -d ${SHARE_APP_REGISTRY} ]; then
	$INSTALLF -c none ${PKGINST} ${SHARE_MIME_INFO} d 0755 root other
	$INSTALLF -c none ${PKGINST} ${SHARE_APP_REGISTRY} d 0755 root other
    fi
    if [ -d ${SHARE_CAPPLETS} ]; then
	$INSTALLF -c none ${PKGINST} ${SHARE_CONTROL_CENTER} d 0755 root other
	$INSTALLF -c none ${PKGINST} ${SHARE_CAPPLETS} d 0755 root other
    fi
    if [ -d ${SHARE_PIXMAPS} ]; then
	$INSTALLF -c none ${PKGINST} ${SHARE_PIXMAPS} d 0755 root other
    fi

    #
    # Other legacy Gnome installations (2.0 - munged by Sun).
    #
    if [ -d ${SHARE_GNOME} ]; then
	$INSTALLF -c none ${PKGINST} ${SHARE_GNOME} d 0755 root other
	if [ -d ${GNOME_MIME_INFO} ] || [ -d ${GNOME_APP_REGISTRY} ]; then
	    $INSTALLF -c none ${PKGINST} ${GNOME_MIME_INFO} d 0755 root other
	    $INSTALLF -c none ${PKGINST} ${GNOME_APP_REGISTRY} d 0755 root other
	fi
	if [ -d ${GNOME_CAPPLETS} ]; then
	    $INSTALLF -c none ${PKGINST} ${GNOME_CONTROL_CENTER} \
		d 0755 root other
	    $INSTALLF -c none ${PKGINST} ${GNOME_CAPPLETS} d 0755 root other
	fi
    fi

    #
    # Commit the changes so that we can actually place files in the
    # newly created directories.
    #
    $INSTALLF -f $PKGINST
}

#
# InstallGnomeFile ( default_flag, src, dest )
#
# Installs any Gnome integration file respecting the policy around which
# version of the file should be installed when multiple Java SE versions
# are installed.  Currently, file is only updated if this Java is being
# installed as the default version (but a fair argument can be made for
# always installing the latest version).  Missing files are always installed.
#
InstallGnomeFile() {
    _default_flag=$1
    _src=$2
    _dest=$3

    #
    # Update the desktop file if this JDK is being installed as the
    # default or the expected file is MIA.
    #
    if [ "${_default_flag}" = "true" ] || \
	( [ ! -f ${_dest} ] && \
	  [ ! -d ${_dest} ] && \
	  [ ! -h ${_dest} ] ) ; then

	$CP ${_src} ${_dest}
	$CHMOD 0644  ${_dest}
	$CHOWN root  ${_dest}
	$CHGRP other ${_dest}

    fi

    if [ -f ${_dest} ]; then
	$INSTALLF -c none $PKGINST ${_dest} e 0644 root other
    fi

}

#
# InstallThemeIcons ( default_flag, theme, icon, type)
#
# Helper routine to set up the icon directory structure under a theme.
#
# Parameters:
#   $1  default_flag
#   $2  theme		Gnome theme directory to establish.
#   $3	icon
#   $4	type
#
InstallThemeIcons() {
    _default_flag=$1
    _theme=$2
    _icon=$3
    _type=$4

    #
    # If this is the default JVM or any of the files are missing, update
    # all the files.  This guarantees that we don't get different icons
    # for different sizes.
    #
    for _res in ${RESOLUTIONS}; do
	if [ ! -f ${SHARE_ICONS}/${_theme}/${_res}/${_type}/${_icon} ]; then
	    _default_flag="true"
	fi
    done

    #
    # Update/Install the files if appropriate.
    #
    # Updated or not, these files are now expected by this JDK (default
    # at the moment, or not).  Register them with the package data base
    # with installf.  Note that even though these files are not really
    # "volatile" they are so marked, so that if different versions of the
    # JDK install different files, pkgchk errors should not be generated.
    #
    for _res in 16x16 48x48 ; do
	if [ "${_default_flag}" = "true" ] ; then
	    ${CP} ${JDK_ICONS}/${_theme}/${_res}/${_type}/${_icon} \
	      ${SHARE_ICONS}/${_theme}/${_res}/${_type}/${_icon}
	fi
	$INSTALLF -c none $PKGINST \
	  ${SHARE_ICONS}/${_theme}/${_res}/${_type}/${_icon} v 644 root other
    done

}

#
# InstallGnomeIcons (default_flag)
#
# Installs the appropriate set of Java icons.  A fairly expansive set is
# installed according to the freedesktop.org specification (0.11 at this
# time):
#       http://standards.freedesktop.org/icon-theme-spec/latest/
#
# Additionally, a limited set of icons is installed in the legacy pixmap
# directory for support of earlier Gnome implementations.
#
InstallGnomeIcons() {
    _default_flag=$1

    #
    # freedesktop.org definitions
    #
    for _theme in ${THEMES} ; do

	#
	# Don't try to create a theme which doesn't exist.
	#
	if [ -d ${SHARE_ICONS}/${_theme} ]; then

	    #
	    # Application icons.
	    #
	    for _icon in ${APPS_ICONS} ; do
		InstallThemeIcons ${default_flag} ${_theme} ${_icon} apps
	    done

	    #
	    # Mime type icons.
	    #
	    for _icon in ${MIME_ICONS} ; do
		InstallThemeIcons ${default_flag} ${_theme} ${_icon} mimetypes
	    done

	    UpdateIconCache ${SHARE_ICONS}/${_theme}

	fi

    done

    #
    # Legacy locations.  Only install these if the target directory already
    # exists.
    #
    if [ -d ${SHARE_PIXMAPS} ]; then

	#
	# Application icons.
	#
	for _icon in ${APPS_ICONS}; do
	    InstallGnomeFile $_default_flag \
		${JDK_ICONS}/${HICOLOR}/48x48/apps/${_icon} \
		${SHARE_PIXMAPS}/${_icon}
	done

	#
	# For mime type icons, only a subset of the icons are used (because
	# only a subset of the mimetypes are known) and we shortened the
	# names.
	#
	InstallGnomeFile $default_flag \
	    ${JDK_ICONS}/${HICOLOR}/48x48/mimetypes/${TEXT_ICON} \
	    ${SHARE_PIXMAPS}/x-java.png
	InstallGnomeFile $default_flag \
	    ${JDK_ICONS}/${HICOLOR}/48x48/mimetypes/${JAR_ICON} \
	    ${SHARE_PIXMAPS}/x-java-archive.png
	InstallGnomeFile $default_flag \
	    ${JDK_ICONS}/${HICOLOR}/48x48/mimetypes/${JNLP_ICON} \
	    ${SHARE_PIXMAPS}/x-java-jnlp-file.png

    fi

}

#
# InstallGnomeDesktop ( default_flag, file )
#
# Installs "file", assumed to be a .desktop file for Gnome in both the
# freedesktop.org specified location (0.9.4 at this time):
#       http://standards.freedesktop.org/desktop-entry-spec/latest/
# and legacy locations.
#
InstallGnomeDesktop () {
    _default_flag=$1
    _file=$2

    #
    # freedesktop.org location.
    #
    InstallGnomeFile ${_default_flag} \
	${JDK_APPS}/${_file} \
	${SHARE_APPS}/${_file}

    #
    # Legacy locations.
    #
    # Using the logic that newer versions of Java SE will not be bundled
    # with older OS versions (which contain older JDS/Gnome versions) and
    # that Gnome versions are not typically downgraded, legacy files are
    # only installed if the directory exists. This helps eliminate clutter
    # on newer installations.
    #
    # Pre-2.10 based Gnome implementations (JDS3) require the Java Control Panel
    # application icon to be in the control-center-2.0 directory which could
    # be in /usr/share (JDS 3) or /usr/gnome (pre-JDS).
    #
    if [ "${_file}" = "sun_java.desktop" ]; then
	if [ -d ${SHARE_CAPPLETS} ]; then
	    InstallGnomeFile ${_default_flag} \
		${JDK_APPS}/${_file} \
		${SHARE_CAPPLETS}/${_file}
	fi
	if [ -d ${GNOME_CAPPLETS} ]; then
	    InstallGnomeFile $default_flag \
		${JDK_APPS}/sun_java.desktop \
		${GNOME_CAPPLETS}/sun_java.desktop
	fi
    fi

}

#
# InstallLegacyMimetype ( default_flag, mime_type, extension, name, command,
#     icon, description, where )
#
# Shell routine to add an entry to Gnome application registry.
#
# Since multiple packages (or package instances) may be attempting to
# install these files, only install them it they don't exist.  However,
# always register them with the package database so that they don't
# get removed out from under you. (This really should be a separate
# package.)
#
# Note that the association files are marked as editable files, so that
# they can be modified (perhaps by being updated by another package) without
# generating pkgchk errors.
#
# Parameters:
#   $1  default_flag	"true" if this package is being installed as the 
#			Solaris system default, "false" otherwise. 
#   $2	mime_type	associated mime type
#   $3	extension	associated file extension
#   $4	name		used to name Gnome registry files
#   $5	command		what to invoke when launching file/mime type
#   $6	icon		name of icon file
#   $7	description	description for association
#   $8  where		base directory
#
InstallLegacyMimetype() {
    _default_flag=$1
    _mime_type=$2
    _extension=$3
    _name=$4
    _command=$5
    _icon=$6
    _description=$7
    _where=$8

    #
    # Similar to the above, update the association files (all or none).
    #
    _keys_file=${_where}/mime-info/${_name}.keys
    _mime_file=${_where}/mime-info/${_name}.mime
    _apps_file=${_where}/application-registry/${_name}.applications

    if [ "${_default_flag}" = "true" ] ||
       [ ! -f ${_keys_file} ] ||
       [ ! -f ${_mime_file} ] ||
       [ ! -f ${_apps_file} ]; then

	cat <<- end_of_keys_file > $_keys_file
	${_mime_type}
	    description=${_description}
	    icon_filename=${_icon}
	    default_action_type=application
	    default_application_id=${_name}
	    short_list_application_user_additions=${_name}
	end_of_keys_file

	cat <<- end_of_mime_file > $_mime_file
	${_mime_type}
	    ext: ${_extension}
	end_of_mime_file

	cat <<- end_of_apps_file > $_apps_file
	${_name}
	    command=${_command}
	    name=${_name}
	    can_open_multiple_files=false
	    requires_terminal=false
	    mime_types=${_mime_type}
	end_of_apps_file

	$CHMOD 0644  ${_keys_file} ${_mime_file} ${_apps_file}
	$CHOWN root  ${_keys_file} ${_mime_file} ${_apps_file}
	$CHGRP other ${_keys_file} ${_mime_file} ${_apps_file}

    fi

    #
    # Also similar to the above, register these truly editable files
    # unconditionally with the package data base.
    #
    $INSTALLF -c none $PKGINST ${_mime_file} e 0644 root other
    $INSTALLF -c none $PKGINST ${_keys_file} e 0644 root other
    $INSTALLF -c none $PKGINST ${_apps_file} e 0644 root other

}

#
# InstallGnomeMimetypes()
#
# Although the full mimetype suite is supposed to be delivered as part of
# Gnome:
#       http://freedesktop.org/wiki/Standards_2fshared_2dmime_2dinfo_2dspec
# the mime specification for jnlp files is missing and the specification for
# jar files is incorrect in early versions.  We "patch" those and rebuild
# the database.
#
# Legacy support for earlier versions of Gnome is also provided.
#
InstallGnomeMimetypes() {
    _default_flag=$1

    #
    # There are "bugs" in the JDS 3 mime recognition algorithms for jar
    # files and the jnlp mime recognition is MIA.  There isn't an
    # appropriate way to recognize JDS 4 (or greater) as being present
    # so this is triggered off of the Solaris release: if its greater
    # than 10, we can assume that the JDS version is greater than 3.
    #
    # If these "patches" are installed, then the mime database needs to
    # be updated with the same caveats as above.
    #
    if [ -d ${SHARE_MIME} ]; then
	release=`GetHostRelease`
	if [ $release -le 10 ]; then
	    InstallGnomeFile ${_default_flag} \
		${JDK_MIME}/packages/x-java-archive.xml \
		${SHARE_MIME}/packages/x-java-archive.xml
	    InstallGnomeFile ${_default_flag} \
		${JDK_MIME}/packages/x-java-jnlp-file.xml \
		${SHARE_MIME}/packages/x-java-jnlp-file.xml
	    UpdateMimeDatabase ${SHARE_MIME}
	fi
    fi

    #
    # Establish the mime types for jar and jnlp files (Legacy Gnome).
    #
    for _dir in ${SHARE_PATH} ${SHARE_GNOME}; do

	if [ -d ${_dir}/mime-info ] && [ -d ${_dir}/application-registry ]; then

	    InstallLegacyMimetype ${_default_flag} \
			   application/x-java-archive \
			   jar \
			   java-archive \
			   "java -jar" \
			   x-java-archive.png \
			   "Java Archive" \
			   ${_dir}

	    InstallLegacyMimetype ${_default_flag} \
			   application/x-java-jnlp-file \
			   jnlp \
			   java-web-start \
			   javaws \
			   x-java-jnlp-file.png \
			   "Java Web Start Application" \
			   ${_dir}

	fi

    done

}

#
# IntegrateWithGnome( default_flag )
#
# This is the main entry point for all Java/Gnome integration.
#
IntegrateWithGnome() {
    _default_flag=$1

    #
    # Establish the basic Gnome directory set.
    #
    RegisterGnomeDirs

    #
    # Copy the icons to the Gnome/freedesktop directory structure.
    #
    InstallGnomeIcons ${_default_flag}

    #
    # Install the .desktop file for Gnome integration.
    #
    # "sun_java" is probably a poor choice of a name for the desktop file
    # associated with jcontrol (aka: ControlPanel), but it would be difficult
    # (if not impossible) to change at this time. A constant name is
    # required for the Gnome transition mechanisms to work.
    #
    InstallGnomeDesktop ${_default_flag} sun_java.desktop 
    InstallGnomeDesktop ${_default_flag} sun-java.desktop 
    InstallGnomeDesktop ${_default_flag} sun-javaws.desktop
    UpdateDesktopDatabase ${SHARE_APPS}

    #
    # Install/Patch the mimetype databases for Gnome integration.
    #
    InstallGnomeMimetypes ${_default_flag}

}

#
# Main Processing
#

#
# Add a link containing the full version from the "registry" directory to
# the "instances" directory.  Also, remove any other symbolic links from
# the "instances" directory which may now be lies.
#
# Note, that there is a somewhat pathological case where the registry entry
# name is already taken in the jdk registry.  This could result from
# a tar file installation being done in /usr/jdk, the installation of
# a third party JVM or any number of strange, rare actions.  In that
# case, leave the existing object alone.  Having done that, any further
# actions by this script are ill-advised, so exit (no error).
#
if [ -d ${REGISTRY_NAME} ] || [ -f ${REGISTRY_NAME} ]; then
    exit 0
fi
for path in `ls -d ${REGISTRY_PATH}/jdk* ${REGISTRY_PATH}/jre* \
  ${REGISTRY_PATH}/j2sdk* ${REGISTRY_PATH}/j2re* 2>/dev/null`; do
    if [ -h $path ]; then
	target=`FollowLink $path`
	if [ "$target" = "${INSTALL_NAME}" ]; then
	    ${RM} $path
	fi
    fi
done
${LN} -s ${INSTALL_DIR}/${INSTALL_ENTRY} ${REGISTRY_NAME}

#
# If this package should become the system default, make it so by
# creating/modifying the /usr/java symbolic link.
#
# Note that this link is always created in $BASEDIR, even if this
# isn't a "system" installation.  This is to provide a "release
# identifier free" name for a relocated JRE. This behavior is required
# by the Solaris install software.
#
if `SetJavaLink`; then
    default_flag="true"
else
    default_flag="false";
fi

#
# If this is the newest JVM in the registry, set the "latest" link.
#
SetLatestLink

#
# Establish the links from the system "bin" directory, iff this is
# being installed as a "system" JDK. Typically, this would be if $BASEDIR
# has its default value of /usr.  However, diskless installations make
# this a bit more difficult to ascertain, so a heuristic of $BASEDIR
# containing a "bin" directory is applied.  This heuristic is ideal
# because even if it incorrectly identifies a "system" installation,
# it will generate a sensible and expected result.
#
if [ -d ${BIN_PATH} ]; then
    InstallLinks $default_flag
fi

#
# Create Gnome associations
#
# The same logic as above applies to creating the Gnome associations except
# it it based on $BASEDIR containing a "share" directory.
#
if [ -d ${SHARE_PATH} ]; then
    IntegrateWithGnome $default_flag
fi


#
# To support class data sharing, run a special command.  An
# additional 'classes.jsa' file is generated.  Add this new
# file to the install registry.
#
# Fix 4972526 - Swallow any errors caused while generating JSA file.  Errors
# can be generated when using -R to install from server/client of different
# architectures.
#
${INSTALL_NAME}/bin/java -client -Xshare:dump > /dev/null 2>&1
if [ $? -eq 0 ]; then
    $INSTALLF -c none $PKGINST \
        ${INSTALL_NAME}/jre/lib/${ARCH}/client/classes.jsa
fi

#
# Create a service tag if supported in the system.
# No product registration is done.
#
# If a different package install root is specified via pkgadd -R option,
# the installer cannot create a service tag since the service tag registry
# client (see /usr/bin/stclient) only supports local system use.
# A RFE# 6576434 is created for stclient to support the remote installation
# support.
#
if [ "${PKG_INSTALL_ROOT}" = "" ]; then
    ${INSTALL_NAME}/bin/java com.sun.servicetag.Installer \
        -source "${PKGINST}" > /dev/null 2>&1
fi

#
# Commit
#
$INSTALLF -f $PKGINST
exit 0
